<?xml version="1.0"?>
<doc>
<assembly>
<name>
Singular.Silverlight
</name>
</assembly>
<members>
<member name="T:Singular.My.Resources.localstring">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Accept">
<summary>
  Looks up a localized string similar to Accept.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Add">
<summary>
  Looks up a localized string similar to Add.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Ago">
<summary>
  Looks up a localized string similar to  ago.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.All">
<summary>
  Looks up a localized string similar to All.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.AndText">
<summary>
  Looks up a localized string similar to and.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Cancel">
<summary>
  Looks up a localized string similar to Cancel.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.CannotAddMessage">
<summary>
  Looks up a localized string similar to You cannot add new items: {0}.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.CannotAddTitle">
<summary>
  Looks up a localized string similar to Cannot Add New Items.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.CannotBeEdited">
<summary>
  Looks up a localized string similar to cannot be edited..
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.CannotEditMsg">
<summary>
  Looks up a localized string similar to You cannot edit [ModelName]:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.CannotSave">
<summary>
  Looks up a localized string similar to Cannot Save {0}, please fix errors then try save again:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ChangePassword">
<summary>
  Looks up a localized string similar to Change Password.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ComboBoxEmptyText">
<summary>
  Looks up a localized string similar to Select Item....
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ComboBoxNoItemsText">
<summary>
  Looks up a localized string similar to No Items.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Criteria">
<summary>
  Looks up a localized string similar to Criteria.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Days">
<summary>
  Looks up a localized string similar to  Day(s) ago.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Delete">
<summary>
  Looks up a localized string similar to Delete.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.DeleteImageMsg">
<summary>
  Looks up a localized string similar to Are you sure you want to delete this image?.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.DeleteImageTitle">
<summary>
  Looks up a localized string similar to Delete Image?.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Description">
<summary>
  Looks up a localized string similar to Description.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Duration">
<summary>
  Looks up a localized string similar to Duration:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Edit">
<summary>
  Looks up a localized string similar to Edit.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Email">
<summary>
  Looks up a localized string similar to Email:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.EmailAddress">
<summary>
  Looks up a localized string similar to Email Address:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ErrorAddingNewItem">
<summary>
  Looks up a localized string similar to Error adding new item.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ErrorDeletingItem">
<summary>
  Looks up a localized string similar to Error deleting item.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Find">
<summary>
  Looks up a localized string similar to Find.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.FindResults">
<summary>
  Looks up a localized string similar to Find Results.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.FindScreen_Waiting">
<summary>
  Looks up a localized string similar to Waiting for Search.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.First">
<summary>
  Looks up a localized string similar to First.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.FirstName">
<summary>
  Looks up a localized string similar to First Name:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.FullName">
<summary>
  Looks up a localized string similar to Full Name.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.General_ToStringBlank">
<summary>
  Looks up a localized string similar to Blank {0}.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.General_ToStringNew">
<summary>
  Looks up a localized string similar to New {0}.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ID">
<summary>
  Looks up a localized string similar to ID.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.InstallToPC">
<summary>
  Looks up a localized string similar to Install to Desktop.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.InvalidData">
<summary>
  Looks up a localized string similar to Invalid Data.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ItemCountLabel">
<summary>
  Looks up a localized string similar to ({0} Items).
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Language">
<summary>
  Looks up a localized string similar to Language:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Last">
<summary>
  Looks up a localized string similar to Last.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.LastName">
<summary>
  Looks up a localized string similar to Last Name:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.LockSystem">
<summary>
  Looks up a localized string similar to Lock System.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.LoggedInAs">
<summary>
  Looks up a localized string similar to Logged in as:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.LoginName">
<summary>
  Looks up a localized string similar to Login Name:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Male">
<summary>
  Looks up a localized string similar to Male.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.MaximumFileSize_Bytes">
<summary>
  Looks up a localized string similar to File cannot be uploaded. The maximum permitted file size is [File Size] bytes..
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.MaximumFileSize_Kilobytes">
<summary>
  Looks up a localized string similar to File cannot be uploaded. The maximum permitted file size is [File Size] kilobytes..
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.MaximumFileSize_Megabytes">
<summary>
  Looks up a localized string similar to File cannot be uploaded. The maximum permitted file size is [File Size] megabytes..
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.MaximumFileSize_Title">
<summary>
  Looks up a localized string similar to File too big.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Navigation">
<summary>
  Looks up a localized string similar to Navigation.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.NavLeft">
<summary>
  Looks up a localized string similar to Prev..
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.NewPassword">
<summary>
  Looks up a localized string similar to New Password:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Next_Record">
<summary>
  Looks up a localized string similar to Next.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.No">
<summary>
  Looks up a localized string similar to No.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.NoSearchControlFound">
<summary>
  Looks up a localized string similar to No GetSearchControl method found?.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Ok">
<summary>
  Looks up a localized string similar to Ok.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Password">
<summary>
  Looks up a localized string similar to Password:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.PasswordChangeDate">
<summary>
  Looks up a localized string similar to Password Change Date.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.PasswordLastChanged">
<summary>
  Looks up a localized string similar to Password last changed .
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Prev">
<summary>
  Looks up a localized string similar to Prev..
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.PropertiesInChildListUnique">
<summary>
  Looks up a localized string similar to {0} must be unique in {1}.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Reload">
<summary>
  Looks up a localized string similar to Reload.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Reset">
<summary>
  Looks up a localized string similar to Reset.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Results">
<summary>
  Looks up a localized string similar to Results.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ROScheduleProgress_CreatedDate">
<summary>
  Looks up a localized string similar to CreatedDate.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ROScheduleProgress_Progress">
<summary>
  Looks up a localized string similar to Progress.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ROScheduleProgress_ScheduleInfoID">
<summary>
  Looks up a localized string similar to ScheduleInfo ID.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ROScheduleProgress_ScheduleProgressID">
<summary>
  Looks up a localized string similar to Schedule Progress ID.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ROScheduleProgress_Version">
<summary>
  Looks up a localized string similar to Version.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ROScheduleProgressList_ToString">
<summary>
  Looks up a localized string similar to Schedule Progress List.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Save">
<summary>
  Looks up a localized string similar to Save .
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.SavedSuccessfully">
<summary>
  Looks up a localized string similar to  Saved Successfully.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.SaveMsgBox_Body">
<summary>
  Looks up a localized string similar to Would you like to save your changes?.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.SaveMsgBox_Title">
<summary>
  Looks up a localized string similar to Save Changes to [ViewModelName]?.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Saving">
<summary>
  Looks up a localized string similar to Saving.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Schedule">
<summary>
  Looks up a localized string similar to Schedule.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleDetails">
<summary>
  Looks up a localized string similar to Schedule Details.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleInfo_ActiveInd">
<summary>
  Looks up a localized string similar to Active.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleInfo_ActiveInd_Required">
<summary>
  Looks up a localized string similar to Active required.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleInfo_ObjectName">
<summary>
  Looks up a localized string similar to Schedule Info.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleInfo_Schedule">
<summary>
  Looks up a localized string similar to Schedule.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleInfo_ScheduleInfo">
<summary>
  Looks up a localized string similar to Schedule Info.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleInfo_ScheduleInfoID">
<summary>
  Looks up a localized string similar to Schedule Info.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleInfo_ScheduleName">
<summary>
  Looks up a localized string similar to Schedule Name.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleInfoList_ToString">
<summary>
  Looks up a localized string similar to Schedule Infos.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ScheduleProgress">
<summary>
  Looks up a localized string similar to Schedule Progress.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Scheduling">
<summary>
  Looks up a localized string similar to Scheduling.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.SectionName">
<summary>
  Looks up a localized string similar to Section Name .
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.SecurityGroup">
<summary>
  Looks up a localized string similar to The Name of the Group.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.SecurityGroups">
<summary>
  Looks up a localized string similar to Security Groups.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.SecurityRole">
<summary>
  Looks up a localized string similar to Security Role.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Select_All">
<summary>
  Looks up a localized string similar to Select All.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Selected">
<summary>
  Looks up a localized string similar to Selected:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Show">
<summary>
  Looks up a localized string similar to Show.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Surname">
<summary>
  Looks up a localized string similar to Surname:.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.SystemError">
<summary>
  Looks up a localized string similar to System Error.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Users">
<summary>
  Looks up a localized string similar to Users.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ValidationBusy">
<summary>
  Looks up a localized string similar to Validation Busy.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ValidationBusyMsg">
<summary>
  Looks up a localized string similar to is still busy validating, please try save again..
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.ViewModelMustInherit">
<summary>
  Looks up a localized string similar to View Model must inherit from FindableViewModel.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Warning">
<summary>
  Looks up a localized string similar to Warning.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.WebcamError_Configuration">
<summary>
  Looks up a localized string similar to There was a problem starting the webcam.  If using a Mac, verify default device settings. Right click app to access the Configuration settings..
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.WebcamError_NotFound">
<summary>
  Looks up a localized string similar to Could not start Webcam. Verify device is connected and privacy permission allow access to device..
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.WebcamErrorTitle">
<summary>
  Looks up a localized string similar to Webcam Error.
</summary>
</member>
<member name="P:Singular.My.Resources.localstring.Yes">
<summary>
  Looks up a localized string similar to Yes.
</summary>
</member>
<member name="T:Singular.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Singular.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Singular.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Singular.My.Resources.Resources.ALTER_InsSecurityRole">
<summary>
  Looks up a localized string similar to ALTER PROCEDURE InsProcs.insSecurityRole
(
	@SecurityRoleID Int OUTPUT,
	@SectionName VarChar(50),
	@SecurityRole VarChar(50),
	@Description VarChar(100),
	@AutoGeneratedInd Bit = 1
)
AS


INSERT INTO SecurityRoles
	(SectionName, SecurityRole, Description, AutoGeneratedInd)
VALUES
	(@SectionName, @SecurityRole, @Description, @AutoGeneratedInd)

	
SET @SecurityRoleID = SCOPE_IDENTITY()

RETURN.
</summary>
</member>
<member name="P:Singular.My.Resources.Resources.CREATE_GetTableReferences">
<summary>
  Looks up a localized string similar to CREATE PROCEDURE [GetProcs].[getTableReferenceList]
(
	@TableToCheck VarChar(40), 
	@Key Int
)
As

DECLARE @References TABLE (
			TableSchema VarChar(150),
			TableName VarChar(150), 
			ColumnName VarChar(100), 
			ConstraintName VarChar(150), 
			ConstraintDescription VarChar(1024),
			NoOfReferences Int
)

INSERT INTO @References
SELECT 
		CONVERT(VarChar(150), FK.TABLE_SCHEMA) As TableSchema,
		CONVERT(VarChar(150), FK.TABLE_NAME) As TableName,
		CONVERT(VarChar(100), CU.COLUMN_NAME) [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:Singular.My.Resources.Resources.CREATE_InsSecurityRole">
<summary>
  Looks up a localized string similar to CREATE PROCEDURE InsProcs.insSecurityRole
(
	@SecurityRoleID Int OUTPUT,
	@SectionName VarChar(50),
	@SecurityRole VarChar(50),
	@Description VarChar(100),
	@AutoGeneratedInd Bit = 1
)
AS


INSERT INTO SecurityRoles
	(SectionName, SecurityRole, Description, AutoGeneratedInd)
VALUES
	(@SectionName, @SecurityRole, @Description, @AutoGeneratedInd)

	
SET @SecurityRoleID = SCOPE_IDENTITY()

RETURN.
</summary>
</member>
<member name="P:Singular.My.Resources.Resources.GetDatabases">
<summary>
  Looks up a localized string similar to  SELECT name 
FROM sys.databases 
WHERE name NOT IN 
(
	&apos;master&apos;,
	&apos;tempdb&apos;,
	&apos;model&apos;,
	&apos;msdb&apos;
)
ORDER BY name.
</summary>
</member>
<member name="P:Singular.My.Resources.Resources.getDuplicateRecord">
<summary>
  Looks up a localized string similar to CREATE PROCEDURE [GetProcs].[getDuplicateRecord]
(
	@XmlUniqueProperties xml, 
	@XmlUniqueValues xml, 
	@XmlDisplayProperties xml,
	@PrimaryKeyProperty VarChar(100), 
	@PrimaryKeyValue Int, 
	@TableName VarChar(200)
)
AS

-- WAITFOR DELAY &apos;00:00:01&apos;

DECLARE @FieldList VarChar(Max), @CriteriaList VarChar(Max)

SELECT @FieldList = &apos;&apos;, @CriteriaList = &apos;&apos;

SELECT @FieldList = @FieldList + ParamValues.Value.value(&apos;.&apos;,&apos;VarChar(100)&apos;) + &apos;, &apos;
FROM @XmlDisplayProperties.nodes(&apos;/Node/Value&apos;) AS Par [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:Singular.My.Resources.Resources.GetStoredProcedures">
<summary>
  Looks up a localized string similar to SELECT SPECIFIC_SCHEMA As [Schema], SPECIFIC_NAME AS ProcName
FROM INFORMATION_SCHEMA.ROUTINES
WHERE LOWER(SPECIFIC_SCHEMA) = LOWER(@SchemaName)
ORDER BY SPECIFIC_SCHEMA, SPECIFIC_NAME

SELECT SPECIFIC_SCHEMA As [Schema], SPECIFIC_NAME AS ProcName,
	PARAMETER_NAME As ParameterName, DATA_TYPE As DataType
FROM INFORMATION_SCHEMA.PARAMETERS
WHERE LOWER(SPECIFIC_SCHEMA) = LOWER(@SchemaName)
ORDER BY SPECIFIC_SCHEMA, SPECIFIC_NAME, ORDINAL_POSITION.
</summary>
</member>
<member name="P:Singular.My.Resources.Resources.SetContextInfo">
<summary>
  Looks up a localized string similar to DECLARE @CONTEXT_INFO VarBinary(128)
	SET @CONTEXT_INFO = CONVERT(VarBinary(128), CONVERT(VarBinary(4), @UserID) + CONVERT(VarBinary(2), DB_ID()))
	SET CONTEXT_INFO @CONTEXT_INFO.
</summary>
</member>
<member name="F:Singular.CheckQueries.CheckQueryStatus.Pending">
 <summary>
 View / Stored Proc hasnt run yet.
 </summary>
</member>
<member name="F:Singular.CheckQueries.CheckQueryStatus.Passed">
 <summary>
 View / Stored Proc returned no rows.
 </summary>
</member>
<member name="F:Singular.CheckQueries.CheckQueryStatus.Failed">
 <summary>
 View / Stored Proc returned 1 or more rows.
 </summary>
</member>
<member name="F:Singular.CheckQueries.CheckQueryStatus.Exception">
 <summary>
 View / Stored Proc threw exception.
 </summary>
</member>
<member name="P:Singular.CheckQueries.CheckQuery.Schema">
 <Summary>
 Gets and sets the ID value
 </Summary>
</member>
<member name="P:Singular.CheckQueries.CheckQuery.Name">
 <Summary>
 Gets and sets the Name value
 </Summary>
</member>
<member name="P:Singular.CheckQueries.CheckQuery.Description">
 <Summary>
 Gets and sets the Definition value
 </Summary>
</member>
<member name="P:Singular.CheckQueries.CheckQuery.SourceType">
 <Summary>
 Source Type. 1=View, 2=Stored Procedure
 </Summary>
</member>
<member name="P:Singular.CheckQueries.CheckQuery.Status">
 <summary>
 1 - Pending; 2 - Passed; 3 - Failed
 </summary>
</member>
<member name="M:Singular.CommonData.Enums.Description(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Perform the <B>Description</B> operation on this object.
 </summary>
 <param name="value">The enumeration value for which the Description is required.</param>
 <returns>
 The <see cref="P:System.ComponentModel.DescriptionAttribute.Description">DescriptionAttribute.Description</see> 
 associated with the specified <paramref name="value"/>.  If the specified <paramref name="value"/> has no 
 <see cref="T:System.ComponentModel.DescriptionAttribute">DescriptionAttribute</see> attribute
 then the <see cref="M:System.Enum.ToString">System.Enum.ToString</see> value is returned.
 </returns>
 -----------------------------------------------------------------------------
</member>
<member name="M:Singular.CommonData.Enums.GetStronglyTypedEnumList``1(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Perform the <B>GetEnumList</B> operation on this object.
 </summary>
 <param name="categories"></param>
 <returns></returns>
 -----------------------------------------------------------------------------
</member>
<member name="M:Singular.CommonData.Enums.GetStronglyTypedEnumList(System.Type,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Perform the <B>GetEnumList</B> operation on this object.
 </summary>
 <param name="enumType"></param>
 <param name="categories"></param>
 <returns></returns>
 -----------------------------------------------------------------------------
</member>
<member name="M:Singular.CommonData.Enums.GetEnumList(System.Type,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Perform the <B>GetEnumList</B> operation on this object.
 </summary>
 <param name="enumType"></param>
 <param name="categories"></param>
 <returns></returns>
 -----------------------------------------------------------------------------
</member>
<member name="T:Singular.CommonData.Enums.EnumItem`1">
 <summary>
 Provides access to all <B>EnumItem</B> business logic.
 </summary>
</member>
<member name="M:Singular.CommonData.Enums.EnumItem`1.#ctor(System.String,`0)">
 <summary>
 Perform the <B>New</B> operation on this object.
 </summary>
 <param name="displayMember"></param>
 <param name="valueMember"></param>
</member>
<member name="P:Singular.CommonData.Enums.EnumItem`1.DisplayMember">
 <summary>
 Returns the <B>DisplayMember</B> attribute for this object.
 </summary>
 <value></value>
</member>
<member name="P:Singular.CommonData.Enums.EnumItem`1.ValueMember">
 <summary>
 Returns the <B>ValueMember</B> attribute for this object.
 </summary>
 <value></value>
 
</member>
<member name="T:Singular.CommonData.Enums.EnumList`1">
 -----------------------------------------------------------------------------
 Project	 : Singular
 Class	 : EnumList
 Name	 : Singular.EnumList
 -----------------------------------------------------------------------------
 <summary>
 Provides access to all <B>EnumList</B> business logic.
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="T:Singular.CommonData.Enums.EnumList`1.Sorter">
 -----------------------------------------------------------------------------
 Project	 : Singular
 Class	 : Sorter
 Name	 : Singular.EnumList.Sorter
 -----------------------------------------------------------------------------
 <summary>
 Provides access to all <B>Sorter</B> business logic.
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="T:Singular.CommonData.Enums.EnumList`1.Sorter.Key">
 -----------------------------------------------------------------------------
 Project	 : Singular
 Type	 : Key
 Name	 : Singular.EnumList.Sorter.Key
 -----------------------------------------------------------------------------
 <summary>
 Enumeration of <B>Key</B> values.
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Singular.CommonData.Enums.EnumList`1.Sorter.Compare(System.Object,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Perform the <B>Compare</B> operation on this object.
 </summary>
 <param name="x"></param>
 <param name="y"></param>
 <returns></returns>
 -----------------------------------------------------------------------------
</member>
<member name="M:Singular.CommonData.Enums.EnumList`1.Sorter.#ctor(Singular.CommonData.Enums.EnumList{`0}.Sorter.Key,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Perform the <B>New</B> operation on this object.
 </summary>
 <param name="value"></param>
 <param name="descending"></param>
 -----------------------------------------------------------------------------
</member>
<member name="T:Singular.CommonData.Enums.EnumItem">
 <summary>
 Provides access to all <B>EnumItem</B> business logic.
 </summary>
</member>
<member name="M:Singular.CommonData.Enums.EnumItem.#ctor(System.String,System.Int32)">
 <summary>
 Perform the <B>New</B> operation on this object.
 </summary>
 <param name="displayMember"></param>
 <param name="valueMember"></param>
</member>
<member name="P:Singular.CommonData.Enums.EnumItem.DisplayMember">
 <summary>
 Returns the <B>DisplayMember</B> attribute for this object.
 </summary>
 <value></value>
</member>
<member name="P:Singular.CommonData.Enums.EnumItem.ValueMember">
 <summary>
 Returns the <B>ValueMember</B> attribute for this object.
 </summary>
 <value></value>
</member>
<member name="T:Singular.CommonData.Enums.EnumList">
 -----------------------------------------------------------------------------
 Project	 : Singular
 Class	 : EnumList
 Name	 : Singular.EnumList
 -----------------------------------------------------------------------------
 <summary>
 Provides access to all <B>EnumList</B> business logic.
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="T:Singular.CommonData.Enums.EnumList.Sorter">
 -----------------------------------------------------------------------------
 Project	 : Singular
 Class	 : Sorter
 Name	 : Singular.EnumList.Sorter
 -----------------------------------------------------------------------------
 <summary>
 Provides access to all <B>Sorter</B> business logic.
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="T:Singular.CommonData.Enums.EnumList.Sorter.Key">
 -----------------------------------------------------------------------------
 Project	 : Singular
 Type	 : Key
 Name	 : Singular.EnumList.Sorter.Key
 -----------------------------------------------------------------------------
 <summary>
 Enumeration of <B>Key</B> values.
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Singular.CommonData.Enums.EnumList.Sorter.Compare(System.Object,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Perform the <B>Compare</B> operation on this object.
 </summary>
 <param name="x"></param>
 <param name="y"></param>
 <returns></returns>
 -----------------------------------------------------------------------------
</member>
<member name="M:Singular.CommonData.Enums.EnumList.Sorter.#ctor(Singular.CommonData.Enums.EnumList.Sorter.Key,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Perform the <B>New</B> operation on this object.
 </summary>
 <param name="value"></param>
 <param name="descending"></param>
 -----------------------------------------------------------------------------
</member>
<member name="M:Singular.CommonData.Misc.GetList(System.String,System.Type)">
 <summary>
 Gets a list based on the property name. If the name is blank, uses the type.
 </summary>
</member>
<member name="M:Singular.CommonData.CommonDataBase`1.CachedLists.GetList(System.Type)">
 <summary>
 Gets the First List that is the Specified Type.
 </summary>
</member>
<member name="M:Singular.CommonData.CommonDataBase`1.CachedLists.GetList(System.String)">
 <summary>
 Gets the First List that is the Specified Name
 </summary>
</member>
<member name="P:Singular.CommonData.CommonDataBase`1.DefaultLifeTime">
 <summary>
 The time inverval before the commondata lists should be reset. Default is Zero, which means never.
 </summary>
</member>
<member name="P:Singular.CommonData.CommonDataBase`1.SessionLists">
 <summary>
 Returns the Lists specific to this session.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Compression.CompressionUtility.DecompressFile(System.Byte[])">
 <summary>
 Decompresses, and returns the first file in a zip file. Returns the original file if its not a zip file.
 </summary>
 <param name="CompressedBytes"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Singular.Correspondence.CorrespondenceSettingsBase.FriendlyFrom">
 <summary>
 FriendlyFrom will only be used if the email doesnt have its own friendly from.
 </summary>
</member>
<member name="P:Singular.CorrespondanceTemplates.CorrespondanceDataSource.DataSourceName">
 <Summary>
 Gets the Security Group value
 </Summary>
</member>
<member name="P:Singular.CorrespondanceTemplates.CorrespondanceTemplate.CorrespondanceTemplateID">
 <Summary>
 Gets the Correspondance Template value
 </Summary>
</member>
<member name="P:Singular.CorrespondanceTemplates.CorrespondanceTemplate.TemplateName">
 <Summary>
 Gets and sets the Template value
 </Summary>
</member>
<member name="P:Singular.CorrespondanceTemplates.CorrespondanceTemplate.SendTo">
 <Summary>
 Gets and sets the SendTo value
 </Summary>
</member>
<member name="P:Singular.CorrespondanceTemplates.CorrespondanceTemplate.Subject">
 <Summary>
 Gets and sets the Template value
 </Summary>
</member>
<member name="P:Singular.CorrespondanceTemplates.CorrespondanceTemplate.Template">
 <Summary>
 Gets and sets the Template value
 </Summary>
</member>
<member name="P:Singular.CorrespondanceTemplates.CorrespondanceTemplate.DataSource">
 <Summary>
 Gets and sets the Data Source value
 </Summary>
</member>
<member name="P:Singular.CorrespondanceTemplates.CorrespondanceTemplateAttachment.CorrespondanceTemplateAttachmentID">
 <Summary>
 Gets the Correspondance Template Attachment value
 </Summary>
</member>
<member name="P:Singular.CorrespondanceTemplates.CorrespondanceTemplateAttachment.CorrespondanceTemplateID">
 <Summary>
 Gets the Correspondance Template value
 </Summary>
</member>
<member name="M:Singular.DevicePush.DeviceMessageSender.SendMessages(Singular.DevicePush.DeviceNotificationList)">
 <summary>
 Sends Messages to the device, and sets the sent date of the object. Does not save the object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.DevicePush.DeviceMessageSender.BeginSendMessages(System.Action{System.String})">
 <summary>
 Fetches the notification list, sends the notifications, and saves them.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Singular.DevicePush.DeviceNotification.DeviceNotificationID">
 <summary>
 Gets and sets the ID value
 </summary>
</member>
<member name="P:Singular.DevicePush.DeviceNotification.Message">
 <summary>
 Gets and sets the Message value
 </summary>
</member>
<member name="P:Singular.DevicePush.DeviceNotification.SendID">
 <summary>
 Gets and sets the Send value
 </summary>
</member>
<member name="P:Singular.DevicePush.DeviceNotification.DeviceOS">
 <summary>
 Gets and sets the Device OS value
 </summary>
</member>
<member name="P:Singular.DevicePush.DeviceNotification.SentDate">
 <summary>
 Gets and sets the Send value
 </summary>
</member>
<member name="P:Singular.DevicePush.DeviceNotification.Result">
 <summary>
 Gets and sets the Send value
 </summary>
</member>
<member name="T:Singular.CellFind.OTAStruct">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.NAME">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.APN">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.BEARER">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.PPP_AUTHNAME">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.PPP_AUTHSECRET">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.PPP_AUTHTYPE">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.PPP_LOGINTYPE">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.PROXY">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.PORT">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.PROXY_LOGINTYPE">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.PROXY_AUTHNAME">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.PROXY_AUTHSECRET">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.CSD_CALLTYPE">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.CSD_CALLSPEED">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.CSD_DIALSTRING">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.ISP_NAME">
<remarks/>
</member>
<member name="P:Singular.CellFind.OTAStruct.STATUS">
<remarks/>
</member>
<member name="T:Singular.CellFind.BEARER">
<remarks/>
</member>
<member name="F:Singular.CellFind.BEARER.GSM_CSD">
<remarks/>
</member>
<member name="F:Singular.CellFind.BEARER.GSM_SMS">
<remarks/>
</member>
<member name="F:Singular.CellFind.BEARER.GSM_USSD">
<remarks/>
</member>
<member name="F:Singular.CellFind.BEARER.IS_136_CSD">
<remarks/>
</member>
<member name="F:Singular.CellFind.BEARER.GPRS">
<remarks/>
</member>
<member name="T:Singular.CellFind.PPP_AUTHTYPE">
<remarks/>
</member>
<member name="F:Singular.CellFind.PPP_AUTHTYPE.PAP">
<remarks/>
</member>
<member name="F:Singular.CellFind.PPP_AUTHTYPE.CHAP">
<remarks/>
</member>
<member name="F:Singular.CellFind.PPP_AUTHTYPE.MS_CHAP">
<remarks/>
</member>
<member name="T:Singular.CellFind.PPP_LOGINTYPE">
<remarks/>
</member>
<member name="F:Singular.CellFind.PPP_LOGINTYPE.AUTOMATIC">
<remarks/>
</member>
<member name="F:Singular.CellFind.PPP_LOGINTYPE.MANUAL">
<remarks/>
</member>
<member name="T:Singular.CellFind.PORT">
<remarks/>
</member>
<member name="F:Singular.CellFind.PORT.CONNECTIONLESS">
<remarks/>
</member>
<member name="F:Singular.CellFind.PORT.CONNECTIONORIENTED">
<remarks/>
</member>
<member name="F:Singular.CellFind.PORT.CONNECTIONLESSSECURE">
<remarks/>
</member>
<member name="F:Singular.CellFind.PORT.CONNECTIONORIENTEDSECURE">
<remarks/>
</member>
<member name="T:Singular.CellFind.PROXY_LOGINTYPE">
<remarks/>
</member>
<member name="F:Singular.CellFind.PROXY_LOGINTYPE.AUTOMATIC">
<remarks/>
</member>
<member name="F:Singular.CellFind.PROXY_LOGINTYPE.MANUAL">
<remarks/>
</member>
<member name="T:Singular.CellFind.CSD_CALLTYPE">
<remarks/>
</member>
<member name="F:Singular.CellFind.CSD_CALLTYPE.ANALOGUE">
<remarks/>
</member>
<member name="F:Singular.CellFind.CSD_CALLTYPE.ISDN">
<remarks/>
</member>
<member name="T:Singular.CellFind.CSD_CALLSPEED">
<remarks/>
</member>
<member name="F:Singular.CellFind.CSD_CALLSPEED.AUTO">
<remarks/>
</member>
<member name="T:Singular.CellFind.STATUS">
<remarks/>
</member>
<member name="F:Singular.CellFind.STATUS.OK">
<remarks/>
</member>
<member name="F:Singular.CellFind.STATUS.FAILED">
<remarks/>
</member>
<member name="M:Singular.SmsSending.ClickatellSender.SendSms(System.String,System.String)">
 <summary>
 Sends and SMS to a single number. Settings must be set before calling this method.
 </summary>
 <param name="ToNumber"></param>
 <param name="Message"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.SmsSending.ClickatellSender.SendSms(System.String[],System.String)">
 <summary>
 Sends an SMS to the specified numbers. Settings must be set before calling this method.
 </summary>
 <param name="ToNumbers"></param>
 <param name="Message"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.SmsSending.ClickatellSender.StartBatch(System.String)">
 <summary>
 Starts a batch and returns a batch ID to be used with the QuickSend Message.
 </summary>
 <param name="Message"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.SmsSending.ClickatellSender.QuickSend(System.String,System.String)">
 <summary>
 Sends an already defined SMS to a number. The Message must be defined by calling StartBatch.
 </summary>
 <param name="BatchID"></param>
 <param name="ToNumber"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.SmsSending.ClickatellSender.SendSmsWithMessageID(System.String,System.String,System.String)">
 <summary>
 Sends and SMS to a single number. Settings must be set before calling this method.
 </summary>
 <param name="ToNumber"></param>
 <param name="Message"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Singular.SmsSending.PushServerWS">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.#ctor">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.authCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.pingCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.sendmsgCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.querymsgCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.delmsgCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.getbalanceCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.routeCoverageCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.si_pushCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.ind_pushCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.token_payCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.startbatchCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.senditemCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.quicksendCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.endbatchCompleted">
<remarks/>
</member>
<member name="E:Singular.SmsSending.PushServerWS.getmsgchargeCompleted">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.auth(System.Int32,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginauth(System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endauth(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.authAsync(System.Int32,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.authAsync(System.Int32,System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.ping(System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginping(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endping(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.pingAsync(System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.pingAsync(System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.sendmsg(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginsendmsg(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endsendmsg(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.sendmsgAsync(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.sendmsgAsync(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.querymsg(System.String,System.Int32,System.String,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginquerymsg(System.String,System.Int32,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endquerymsg(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.querymsgAsync(System.String,System.Int32,System.String,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.querymsgAsync(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.delmsg(System.String,System.String,System.String,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Begindelmsg(System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Enddelmsg(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.delmsgAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.delmsgAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.getbalance(System.String,System.Int32,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Begingetbalance(System.String,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endgetbalance(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.getbalanceAsync(System.String,System.Int32,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.getbalanceAsync(System.String,System.Int32,System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.routeCoverage(System.String,System.Int32,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.BeginrouteCoverage(System.String,System.Int32,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.EndrouteCoverage(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.routeCoverageAsync(System.String,System.Int32,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.routeCoverageAsync(System.String,System.Int32,System.String,System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.si_push(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginsi_push(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endsi_push(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.si_pushAsync(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.si_pushAsync(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.ind_push(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginind_push(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endind_push(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.ind_pushAsync(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.ind_pushAsync(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.token_pay(System.String,System.Int32,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Begintoken_pay(System.String,System.Int32,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endtoken_pay(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.token_payAsync(System.String,System.Int32,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.token_payAsync(System.String,System.Int32,System.String,System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.startbatch(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginstartbatch(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endstartbatch(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.startbatchAsync(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.startbatchAsync(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.senditem(System.String,System.Int32,System.String,System.String,System.String,System.String[],System.String,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginsenditem(System.String,System.Int32,System.String,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endsenditem(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.senditemAsync(System.String,System.Int32,System.String,System.String,System.String,System.String[],System.String,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.senditemAsync(System.String,System.Int32,System.String,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.quicksend(System.String,System.Int32,System.String,System.String,System.String,System.String[])">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginquicksend(System.String,System.Int32,System.String,System.String,System.String,System.String[],System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endquicksend(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.quicksendAsync(System.String,System.Int32,System.String,System.String,System.String,System.String[])">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.quicksendAsync(System.String,System.Int32,System.String,System.String,System.String,System.String[],System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.endbatch(System.String,System.Int32,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Beginendbatch(System.String,System.Int32,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endendbatch(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.endbatchAsync(System.String,System.Int32,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.endbatchAsync(System.String,System.Int32,System.String,System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.getmsgcharge(System.String,System.Int32,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Begingetmsgcharge(System.String,System.Int32,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.Endgetmsgcharge(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.getmsgchargeAsync(System.String,System.Int32,System.String,System.String,System.String)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.getmsgchargeAsync(System.String,System.Int32,System.String,System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Singular.SmsSending.PushServerWS.CancelAsync(System.Object)">
<remarks/>
</member>
<member name="T:Singular.SmsSending.authCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.authCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.authCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.pingCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.pingCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.pingCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.sendmsgCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.sendmsgCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.sendmsgCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.querymsgCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.querymsgCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.querymsgCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.delmsgCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.delmsgCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.delmsgCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.getbalanceCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.getbalanceCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.getbalanceCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.routeCoverageCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.routeCoverageCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.routeCoverageCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.si_pushCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.si_pushCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.si_pushCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.ind_pushCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.ind_pushCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.ind_pushCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.token_payCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.token_payCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.token_payCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.startbatchCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.startbatchCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.startbatchCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.senditemCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.senditemCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.senditemCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.quicksendCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.quicksendCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.quicksendCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.endbatchCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.endbatchCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.endbatchCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Singular.SmsSending.getmsgchargeCompletedEventHandler">
<remarks/>
</member>
<member name="T:Singular.SmsSending.getmsgchargeCompletedEventArgs">
<remarks/>
</member>
<member name="P:Singular.SmsSending.getmsgchargeCompletedEventArgs.Result">
<remarks/>
</member>
<member name="P:Singular.SmsSending.Sms.SmsID">
 <Summary>
 Gets the Sms value
 </Summary>
</member>
<member name="P:Singular.SmsSending.Sms.Message">
 <Summary>
 Gets and sets the Message value
 </Summary>
StringLength(459, ErrorMessage:="Message cannot be more than 459 characters")
</member>
<member name="P:Singular.SmsSending.Sms.CreatedDate">
 <Summary>
 Gets the Created Date value
 </Summary>
</member>
<member name="P:Singular.SmsSending.Sms.DateToSend">
 <Summary>
 Gets and sets the Date To Send value
 </Summary>
</member>
<member name="P:Singular.SmsSending.Sms.Ignore">
 <Summary>
 Gets and sets the Ignore value
 </Summary>
</member>
<member name="P:Singular.SmsSending.Sms.ExtraInfo">
 <summary>
 Used to store extra information about this sms. E.g. to link it to another record
 </summary>
</member>
<member name="M:Singular.SmsSending.Sms.SendAndSave">
 <summary>
 Sends the email and saves it asyncronously. If the send fails, it will be saved with the not sent error.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.SmsSending.Sms.SendAll">
 <summary>
 Sends to all the recipients at once, this way you will not be able to tell which numbers fail.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Singular.SmsSending.Sms.CreateSMS">
 <summary>
 Override if your project has an inherited SMS class.
 </summary>
</member>
<member name="P:Singular.SmsSending.SmsRecipient.OverrideCellNumber">
 <summary>
 Change all smses to send to this number. Usefull for testing.
 </summary>
</member>
<member name="P:Singular.SmsSending.SmsRecipient.SupportsMessageID">
 <summary>
 True if your SMSRecipient table and procs have a MessageID for tracking messages once sent.
 </summary>
</member>
<member name="P:Singular.SmsSending.SmsRecipient.SmsRecipientID">
 <Summary>
 Gets the Sms Recipient value
 </Summary>
</member>
<member name="P:Singular.SmsSending.SmsRecipient.SmsID">
 <Summary>
 Gets the Sms value
 </Summary>
</member>
<member name="P:Singular.SmsSending.SmsRecipient.CellNo">
 <Summary>
 Gets and sets the Cell No value
 </Summary>
</member>
<member name="P:Singular.SmsSending.SmsRecipient.RecipientName">
 <Summary>
 Gets and sets the Recipient Name value
 </Summary>
</member>
<member name="P:Singular.SmsSending.SmsRecipient.SentDate">
 <Summary>
 Gets and sets the Sent Date value
 </Summary>
</member>
<member name="P:Singular.SmsSending.SmsRecipient.NotSentError">
 <Summary>
 Gets and sets the Not Sent Error value
 </Summary>
</member>
<member name="F:Singular.SmsSending.SmsRecipient.CreateSMSRecipient">
 <summary>
 Override if your project has an inherited SMS class.
 </summary>
</member>
<member name="M:Singular.SmsSending.SmsSender.SendSms(System.String,System.String)">
 <summary>
 Sends and SMS to a single number. Settings must be set before calling this method.
 </summary>
 <param name="ToNumber"></param>
 <param name="Message"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.SmsSending.SmsSender.SendSms(System.String[],System.String)">
 <summary>
 Sends an SMS to the specified numbers. Settings must be set before calling this method.
 </summary>
 <param name="ToNumbers"></param>
 <param name="Message"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.SmsSending.SmsSender.SendSmsWithMessageID(System.String,System.String,System.Int32)">
 <summary>
 Sends and SMS to a single number. Settings must be set before calling this method.
 </summary>
 <param name="ToNumber"></param>
 <param name="Message"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Singular.SmsSending.SmsSender.AllowedNumbers">
 <summary>
 If not empty, the library will check if the cell no is in this list. If not, the numer will be changed to the first address in this list.
 Seperate with ;
 </summary>
</member>
<member name="T:Singular.EasyCommand`1">
 <summary>
 Lazy option for creating a command base object with minimal code. E.g. on a class inheriting this one, you can call MyCommandObj.GetData({UserID, 123})
 </summary>
 <typeparam name="ThisType">The type you are busy creating</typeparam>
 <remarks></remarks>
</member>
<member name="M:Singular.CommandProc.ExecuteBatch(System.String)">
 <summary>
 Allows a batch of commands to be executed on the same transaction. Once the batch is complete, call CommitBatch.
 If an exception occurs, the transaction is rolled back, and the connection is closed.
 </summary>
 <param name="TransactionName">The common name used to link different commands to the same transaction.</param>
</member>
<member name="M:Singular.CommandProc.CommitBatch(System.String)">
 <summary>
 Commits a batch started with ExecuteBatch
 </summary>
</member>
<member name="M:Singular.CommandProc.RollbackBatch(System.String)">
 <summary>
 Rolls back a batch started with ExecuteBatch
 </summary>
</member>
<member name="M:Singular.CommandProc.GetDataSet(System.String,System.String[],System.Object[])">
 <summary>
 Runs a stored procedure on the database and returns a dataset
 </summary>
</member>
<member name="M:Singular.CommandProc.GetDataRow(System.String,System.String[],System.Object[])">
 <summary>
 Runs a stored procedure on the database and returns the first row
 </summary>
</member>
<member name="M:Singular.CommandProc.GetDataValueFromQuery(System.String,System.String[],System.Object[])">
 <summary>
 Runs the sql select query on the database and returns the first column of the first row
 </summary>
</member>
<member name="M:Singular.CommandProc.GetDataValue(System.String,System.String[],System.Object[])">
 <summary>
 Runs a stored procedure on the database and returns the first column of the first row
 </summary>
</member>
<member name="M:Singular.CommandProc.GetObject``1(System.String,System.Object,System.Boolean)">
 <summary>
 Executes a stored procedure, and populates an object with the first row of the result. Returns null if there are no rows.
 </summary>
 <param name="Params">Dynamic object with Parameter names and values. e.g. new with {Param1, Param2}</param>
</member>
<member name="M:Singular.CommandProc.GetList``1(System.String,System.Object,System.Boolean)">
 <summary>
 Executes a stored procedure, and populates a list of the supplied object type. Object property names must match the column names returned by the proc.
 Note, this isnt very fast. If your proc returns a large amount of rows, rather create a dedicated CSLA list.
 </summary>
 <param name="Params">Dynamic object with Parameter names and values. e.g. new with {Param1, Param2}</param>
</member>
<member name="M:Singular.CommandProc.RunCommand(System.String,System.String[],System.Object[],System.Boolean)">
 <summary>
 Runs a stored procedure on the database. Use GetDataXXX if you need data returned.
 </summary>
</member>
<member name="M:Singular.CommandProc.RunCommand(System.String,System.String[],System.Object[],System.Data.SqlDbType[],System.Data.ParameterDirection[],System.Int32[],System.Boolean)">
 <summary>
 Runs a stored procedure on the database. Use GetDataXXX if you need data returned.
 </summary>
</member>
<member name="M:Singular.CommandProc.RunCommand(System.String,System.Boolean)">
 <summary>
 Runs a stored procedure on the database. Use GetDataXXX if you need data returned.
 </summary>
</member>
<member name="P:Singular.CommandProc.NoOfRowsAffected">
 <summary>
 Returns the number of rows affected when FetchType = CommandProc.FetchTypes.None (ExecuteNonQuery)
 </summary>
 <value></value>
 <returns>Integer</returns>
 <remarks></remarks>
</member>
<member name="P:Singular.CommandProc.DataRowValue">
 <summary>
 Returns the value of the first cell in the datarow.
 Returns nothing if there is no datarow.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.CSLALib.CSLALib.AddColumns(System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Object,System.Data.DataTable@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Add Columns to DataTable and Returns List of Properties that are Business Objects
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Singular.CSLALib.Database.ROProc.Schema">
 <Summary>
 Gets the ID value
 </Summary>
</member>
<member name="P:Singular.CSLALib.Database.ROProc.ProcName">
 <Summary>
 Gets the Proc Name value
 </Summary>
</member>
<member name="P:Singular.CSLALib.Database.ROProcParameter.Schema">
 <Summary>
 Gets the ID value
 </Summary>
</member>
<member name="P:Singular.CSLALib.Database.ROProcParameter.ProcName">
 <Summary>
 Gets the Proc Name value
 </Summary>
</member>
<member name="P:Singular.CSLALib.Database.ROProcParameter.ParameterName">
 <Summary>
 Gets the Parameter Name value
 </Summary>
</member>
<member name="P:Singular.CSLALib.Database.ROProcParameter.SqlDataType">
 <Summary>
 Gets the Data Type value
 </Summary>
</member>
<member name="P:Singular.CSLALib.Database.ROProcParameter.DotNetDataType">
 <Summary>
 Gets the Data Type value
 </Summary>
</member>
<member name="P:Singular.CSLALib.Database.ROProcParameter.DefaultInd">
 <Summary>
 Gets the Data Type value
 </Summary>
</member>
<member name="P:Singular.CSLALib.Database.ROProcParameter.DefaultValue">
 <Summary>
 Gets the Data Type value
 </Summary>
</member>
<member name="P:Singular.CSLALib.HomeScreen.UserID">
 <Summary>
 Gets and sets the ID value
 </Summary>
</member>
<member name="P:Singular.CSLALib.HomeScreen.UserName">
 <Summary>
 Gets and sets the ID value
 </Summary>
</member>
<member name="P:Singular.CSLALib.HomeScreen.ApplicationName">
 <Summary>
 Gets and sets the Application Name value
 </Summary>
</member>
<member name="P:Singular.CSLALib.HomeScreen.WelcomeText">
 <Summary>
 Gets and sets the Welcome Text value
 </Summary>
</member>
<member name="P:Singular.CSLALib.ObjectIterator.CanIterate">
 <summary>
 True if you want to skip certain types. The child object type is passed.
 </summary>
</member>
<member name="P:Singular.CSLALib.TableReference.TableName">
 <Summary>
 Gets the TableName value
 </Summary>
</member>
<member name="P:Singular.CSLALib.TableReference.ColumnName">
 <Summary>
 Gets the Column Name value
 </Summary>
</member>
<member name="P:Singular.CSLALib.TableReference.ConstraintName">
 <Summary>
 Gets the Constraint Name value
 </Summary>
</member>
<member name="P:Singular.CSLALib.TableReference.ConstraintDescription">
 <Summary>
 Gets the Constraint Description value
 </Summary>
</member>
<member name="P:Singular.CSLALib.TableReference.NoOfReferences">
 <Summary>
 Gets the No Of References value
 </Summary>
</member>
<member name="T:Singular.DataAnnotations.MustSerialise">
 <summary>
 Incidates that this property must be serialised, regardless of browsable / autogenerate.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.UnProtectedKey">
 <summary>
 Indicates that this Key is not encrypted, and can be changed client side.
 Property must still have a Key attribute assigned.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.NonUpdatable">
 <summary>
 Indicates that this property cannot be updated unless the object is new.
 </summary>
</member>
<member name="M:Singular.DataAnnotations.DropDownField.#ctor(System.Type,System.Boolean,System.String,System.String)">
 <summary>
 Creates a non dependant filter for an exact value
 </summary>
 <param name="SourceType"></param>
 <param name="UniqueAmongstSiblings">Indicates whether the value should be unique in the siblings</param>
 <remarks></remarks>
</member>
<member name="M:Singular.DataAnnotations.DropDownField.#ctor(System.Type,System.String,System.String,System.Object)">
 <summary>
 Creates a non dependant filter for an exact value
 </summary>
 <param name="SourceType"></param>
 <param name="ValueMember"></param>
 <param name="FilterField"></param>
 <param name="DirectFilterValue">NB: CType this to Object to ensure correct contructer is called</param>
 <remarks></remarks>
</member>
<member name="M:Singular.DataAnnotations.DropDownField.#ctor(System.Type,System.String,System.String,System.Object,System.Boolean,System.String)">
 <summary>
 Creates a non dependant filter for an exact value
 </summary>
 <param name="SourceType"></param>
 <param name="ValueMember"></param>
 <param name="FilterField"></param>
 <param name="DirectFilterValue">NB: CType this to Object to ensure correct contructer is called</param>
 <remarks></remarks>
</member>
<member name="M:Singular.DataAnnotations.DropDownField.#ctor(System.Type,System.String,System.String,System.Object,Singular.DataAnnotations.DirectFilterType)">
 <summary>
 Creates a non dependant filter for an exact value
 </summary>
 <param name="SourceType"></param>
 <param name="ValueMember"></param>
 <param name="FilterField"></param>
 <param name="DirectFilterValue">NB: CType this to Object to ensure correct contructer is called</param>
 <remarks></remarks>
</member>
<member name="P:Singular.DataAnnotations.DateField.AlwaysShow">
 <summary>
 Display the Date picker inline, so that the user doesn't have to click the input control to get it to pop up.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateField.AutoChange">
 <summary>
 When the user scrolls between months, must the selected date change to a date in that month.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateField.YearRange">
 <summary>
 The number of years to show before / after. e.g: "-20:+0" = 20 years before selected date, "-20:c" = 20 years before current date
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateField.InitialDateFunction">
 <summary>
 A function / property that will return the initial date to select when there is no date selected. Defaults to today.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.UpdateOnKeyPress">
 <summary>
 Update bound property value on each keypress, instead of when focus is lost.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.MultiLine">
 <summary>
 Change a string property to render as a multiline editor.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.NumberField.CurrencySymbolProperty">
 <summary>
 The name of the proprerty that contains a currency symbol for use in this numbers format string. Use $parent, or ViewModel. for other locations.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.NumberField.WebFormatParameters">
 <summary>
 The parameters to pass to the numberformat function.
 0, '' will format with no decimals, and no thousands seperator.
 2, ',' will format with 2 decimals and comma thousands seperator.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.NoBrokenRules">
 <summary>
 Marks a field to indicate that the value should not 
 be recursed for determining all broken rules
 </summary>
</member>
<member name="T:Singular.DataAnnotations.PrimaryProperty">
 <summary>
 Marks a property as a primary VM property.
 Can be applied to multiple properties. These properties will be the only properties checked for IsDirty / IsValid / BrokenRules.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Singular.DataAnnotations.PrimarySearchField">
 <summary>
 Marks a property in a criteria object as the primary field. Enables search when typing in a field without showing the full find screen criteria.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Singular.DataAnnotations.DropDownWeb.SourceType.None">
 <summary>
 Doesnt Look Anywhere, Used when passing in an enum for example.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.DropDownWeb.SourceType.CommonData">
 <summary>
 Searches Commondata.Lists
 </summary>
</member>
<member name="F:Singular.DataAnnotations.DropDownWeb.SourceType.SessionData">
 <summary>
 Searches Commondata.SessionLists
 </summary>
</member>
<member name="F:Singular.DataAnnotations.DropDownWeb.SourceType.ViewModel">
 <summary>
 Searches ViewModel of the current Page.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.DropDownWeb.SourceType.TempData">
 <summary>
 Searches Commondata.TempLists
 </summary>
</member>
<member name="F:Singular.DataAnnotations.DropDownWeb.SourceType.Fetch">
 <summary>
 Fetches the list from the database
 </summary>
</member>
<member name="F:Singular.DataAnnotations.DropDownWeb.SourceType.All">
 <summary>
 Searches All Locations.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.DropDownWeb.SelectType.AutoComplete">
 <summary>
 Same as find screen, but without the find button.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.DropDownWeb.SelectType.DropDownList">
 <summary>
 Normal combo, but the input is readonly.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.LookupMember">
 <summary>
 For find type drop downs, where there could be thousands of items to lookup, the display value can be stored in the object as well as the lookup id.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.DropDownColumns">
 <summary>
 The names of the properties to appear as columns in the drop down. By default this is the Display Member. 
 If specified, the display member will still be displayed when the combo is not dropped down.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.DisplayFunction">
 <summary>
 Allows a calculated display member. E.g. set the value to "function(Item){ return Item.FirstName + ' ' + Item.LastName }"
 You can also use Item.FirstName + ' ' + Item.LastName directly in this property.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.OnCellCreateFunction">
 <summary>
 The name of a javascript function to call when each row / cell is created.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.AfterFetchJS">
 <summary>
 Javascipt code to run after Ajax data has been fetched.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.PreFindJSFunction">
 <summary>
 Javascript function name to run as the user clicks a find drop down, before the find screen is shown. Function(Args: { AutoPopulate, Object, Criteria })
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.BeforeFetchJS">
 <summary>
 Javascipt code to run before Ajax data is fetched. E.g. as the user clicks search, or when they type in an autocomplete combo. Function (Args.Data, BoundObject)
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.OnItemSelectJSFunction">
 <summary>
 Javascript function to run when a user selects an item in a drop down or find screen. Function(SelectedItem, BoundObject)
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.UnselectedText">
 <summary>
 The first item in the list to prompt the user to select something. E.g. Select Item...
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.KeyDelay">
 <summary>
 timeout to use when handling key presses
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.OldFilterProperties">
 <summary>
 If the list has items that should be filtered out because they are old or inactive, specify the property that marks the item as old.
 Specify 2 items if this is a grouped options list.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DropDownWeb.Name">
 <summary>
 Name to be used in Client Data Provider, if Blank, the list type name will be used.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.RadioButtonList">
 <summary>
 Specifies that this property must be displayed as a list of radio buttons from the supplied enumeration.
 </summary>
</member>
<member name="M:Singular.DataAnnotations.RadioButtonList.#ctor(System.Type)">
 <summary>
 Editor for this property will be rendered as a radio button list. 
 </summary>
 <param name="DataSourceType">Type can be an enum, or a list type of a list in commondata.</param>
</member>
<member name="F:Singular.DataAnnotations.ExpandOptions.RenderChildrenModeType.OnParentRender">
 <summary>
 Renders the child elements when the parent element is rendered. Slower initial rendering, faster expand.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.ExpandOptions.RenderChildrenModeType.OnExpand">
 <summary>
 Renders the child elements when they are expanded. Faster initial rendering, slower expand.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Singular.DataAnnotations.HtmlProperty">
 <summary>
 When applied on a property, indicates that this property must not be html encoded. e.g. dont change " to $ quot;
 </summary>
</member>
<member name="T:Singular.DataAnnotations.JSRule">
 <summary>
 NOTE: Please use the AddBusinessRules() function in your business object. This is only here for old CSLA objects.
 Defines a custom JavaScript validation rule to be run when this property changes.
 Rule function must have these parameters: function (Value, Rule, CtlError)
 </summary>
 <remarks></remarks>
</member>
<member name="P:Singular.DataAnnotations.JSRule.RuleName">
 <summary>
 Custom Rule Name, defaults to the property name
 </summary>
</member>
<member name="P:Singular.DataAnnotations.JSRule.FunctionName">
 <summary>
 Name of a JavaScript function which contains the rule logic.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.JSRule.JavascriptCode">
 <summary>
 Actual JavaScript snippet which contains the rule logic.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.JSRule.OtherTriggerProperties">
 <summary>
 Other Properties that should trigger this rule. Can use $parent or $root
 </summary>
</member>
<member name="P:Singular.DataAnnotations.RequiredIf.ConditionLogicJS">
 <summary>
 JavaScript function that returns true or false.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.ServerOnly">
 <summary>
 When attached to a Class, any properties returning this class type will not be serialised into JavaScript.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Singular.DataAnnotations.AllowAddRemoveEdit">
 <summary>
 Specifies if a list can add / remove / update. Put this attribute on your List class.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.SetExpression">
 <summary>
 Specifies the javascript code to run client side when this property is changed.
 Use self to refer to current object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Singular.DataAnnotations.ComputedProperty">
 <summary>
 Specifies that this property should be converted into javascript as a statement, rather than serialising the return value of the property.
 If Javascript Statement is left blank, the property get method will be decompiled into javascript.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.VariableContents">
 <summary>
 Specifies that this list contains items that are different types. Used when you have different objects inheriting from the same base type.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.ResolveType">
 <summary>
 If an object can be inherited, this attribute can be placed on the base object, to get the actual type in a certain context.
 </summary>
</member>
<member name="M:Singular.DataAnnotations.ResolveType.#ctor(System.Type)">
 <summary>
 
 </summary>
 <param name="ResolverType">ResolverType must be a class that inherits from Singular.DataAnnotations.TypeResolver</param>
 <remarks></remarks>
</member>
<member name="T:Singular.DataAnnotations.ClientOnly">
 <summary>
 Indicates that this is a client only property.
 This property will not be serialised back to the server.
 This property will not trigger a save in Immediate Save mode.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Singular.DataAnnotations.ClientOnly.DataOptionType.SendDataToClient">
 <summary>
 Data will be sent to the client on initial load and postbacks.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.ClientOnly.DataOptionType.DontSendData">
 <summary>
 Data will never be sent to the client.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.ClientOnly.DataOptionType.InitalDataOnly">
 <summary>
 Data will only be sent to the client on the inital load of the object, not on postbacks
 </summary>
</member>
<member name="P:Singular.DataAnnotations.ClientOnly.DataOption">
 <summary>
 When true, data will be sent to the client, but not back to the server.
 When false, this property will not be included in any JSON serialisation. 
 </summary>
</member>
<member name="T:Singular.DataAnnotations.ClientOnlyNoData">
 <summary>
 Indicates that this is a client only property.
 This property will not be serialised into JSON, only included as a property in the Model.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.RawDataOnly">
 <summary>
 If a property has this attribute, it will not be included in the JS Class, but will still be rendered as json.
 Usually this would be used for supporting data in a VM, like with ClientDataProvider.AddDatasource, but where you want a strongly typed property.
 </summary>
</member>
<member name="T:Singular.DataAnnotations.AlwaysClean">
 <summary>
 Put this on a property if you need it to be writable, and dont want it to make the object dirty. E.g. on an IsSelected or IsExpanded property.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.AlwaysShow">
 <summary>
 Display the Date picker inline, so that the user doesn't have to click the input control to get it to pop up.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.FormatString">
 <summary>
 The javascript date format to use, default equates to something like: "Mon 01 Jan 2017 13:30"
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.KeepOpen">
 <summary>
 Will cause the date picker to stay open after selecting a date if no time components are being used.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.ShowClear">
 <summary>
 Show the "Clear" button in the icon toolbar.
 Clicking the "Clear" button will set the calendar to null.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.AllowInputToggle">
 <summary>
 If true, the picker will show on textbox focus and icon click when used in a button group
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.SideBySide">
 <summary>
 Shows the date picker and time picker side by side when using the time and date together.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.ShowCalendarWeeks">
 <summary>
 Shows the week of the year to the left of first day of the week.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.ViewMode">
 <summary>
 The default view to display when the picker is shown. Accepts: 'decades','years','months','days'
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.InitialDateFunction">
 <summary>
 A function / property that will return the initial date to select when there is no date selected. Defaults to today.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.DateAndTimeField.Inline">
 <summary>
 Shows the datepicker as an inline calendar.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.Select2Field.SourceType.None">
 <summary>
 Doesnt Look Anywhere, Used when passing in an enum for example.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.Select2Field.SourceType.CommonData">
 <summary>
 Searches Commondata.Lists
 </summary>
</member>
<member name="F:Singular.DataAnnotations.Select2Field.SourceType.ViewModel">
 <summary>
 Searches ViewModel of the current Page.
 </summary>
</member>
<member name="F:Singular.DataAnnotations.Select2Field.SourceType.All">
 <summary>
 Searches All Locations.
 </summary>
</member>
<member name="P:Singular.DataAnnotations.Select2Field.Tags">
 <summary>
 
 </summary>
</member>
<member name="P:Singular.DataAnnotations.Select2Field.Placeholder">
 <summary>
 
 </summary>
</member>
<member name="P:Singular.DataAnnotations.Select2Field.Multiple">
 <summary>
 
 </summary>
</member>
<member name="P:Singular.DataAnnotations.Select2Field.AllowClear">
 <summary>
 
 </summary>
</member>
<member name="P:Singular.DataAnnotations.Select2Field.Width">
 <summary>
 
 </summary>
</member>
<member name="P:Singular.DataAnnotations.Select2Field.ListName">
 <summary>
 Name to be used in Client Data Provider, if Blank, the list type name will be used.
 </summary>
</member>
<member name="P:Singular.Documents.Document.DocumentID">
 <Summary>
 Gets the Document value
 </Summary>
</member>
<member name="P:Singular.Documents.Document.DocumentName">
 <Summary>
 Gets and sets the Document Name value
 </Summary>
</member>
<member name="P:Singular.Documents.Document.Document">
 <Summary>
 Gets and sets the Document value
 </Summary>
</member>
<member name="P:Singular.Documents.Document.CreatedBy">
 <Summary>
 Gets the Created By value
 </Summary>
</member>
<member name="P:Singular.Documents.Document.CreatedDateTime">
 <Summary>
 Gets the Created Date Time value
 </Summary>
</member>
<member name="P:Singular.Documents.Document.ModifiedBy">
 <Summary>
 Gets the Modified By value
 </Summary>
</member>
<member name="P:Singular.Documents.Document.OverridesModifiedBy">
 <Summary>
 Gets the Modified By value
 </Summary>
</member>
<member name="P:Singular.Documents.Document.ModifiedDateTime">
 <Summary>
 Gets the Modified Date Time value
 </Summary>
</member>
<member name="P:Singular.Documents.DocumentProviderBase`1.DocumentName">
 <Summary>
 Gets and sets the Document value
 </Summary>
</member>
<member name="P:Singular.Documents.DocumentProviderBase`1.IsDownloaded">
 <Summary>
 Gets IsDownloaded value
 </Summary>
</member>
<member name="P:Singular.Documents.DocumentProviderBase`1.OverridesModifiedBy">
 <Summary>
 Gets and sets the Document value
 </Summary>
</member>
<member name="P:Singular.Documents.DocumentProviderBase`1.ExistsOnServer">
 <summary>
 Indicates that the document has been transferred from the browser to the server.
 0 = Its not on the server, 1 = It has always been on the server, 2 = It is busy transferring to the server, 3 = It has finished transferring from the client to the server.
 If the document was loaded from the database, it does exist (Not IsNew)
 If the document data is not null, it exists (IsDownloaded)
 Used by the Web Document uploader.
 </summary>
</member>
<member name="M:Singular.Documents.DocumentProviderBase`1.MarkSaved">
 <summary>
 Removes the 'Document ready to be saved' message
 </summary>
 <remarks></remarks>
</member>
<member name="P:Singular.Documents.DocumentProviderBase`1.ButtonEnabled">
 <Summary>
 Gets the Entity Document value
 </Summary>
</member>
<member name="P:Singular.Documents.DocumentProviderBase`1.ButtonText">
 <Summary>
 Gets the Entity Document value
 </Summary>
</member>
<member name="M:Singular.Documents.DocumentProviderBase`1.SetDocument(System.Int32,System.String)">
 <summary>
 Sets the information required to retrieve the document from the database, and marks it old.
 </summary>
</member>
<member name="M:Singular.Documents.DocumentProviderBase`1.CallSaveDocument">
 <summary>
 Add this method and call 'SaveDocument' is it. Call this method from your InsertUpdate method
 </summary>
 <remarks></remarks>
</member>
<member name="P:Singular.Documents.Settings.DocumentHashesEnabled">
 <summary>
 True if the document hash must be calculated, and sent to the insDocument proc.
 </summary>
</member>
<member name="P:Singular.Documents.Settings.PassUserIDToGetProc">
 <summary>
 True if the current userid must be passed to the getDocument proc.
 </summary>
</member>
<member name="F:Singular.Documents.Settings.AddParametersToFetch">
 <summary>
 If you need to add extra parameters to the getDocument proc, specify the address of the method that will do this.
 </summary>
</member>
<member name="T:Singular.Documents.TemporaryDocument">
 <summary>
 Allows temporary storage of documents in memory, for use with UI elements that use DocumentProviderBase.
 </summary>
</member>
<member name="T:Singular.Documents.TemporaryDocumentNotRequired">
 <summary>
 Allows temporary storage of documents in memory, for use with UI elements that use DocumentProviderBase.
 </summary>
</member>
<member name="P:Singular.Errorlog.ErrorLog.ErrorLogID">
 <Summary>
 Gets the Log value
 </Summary>
</member>
<member name="P:Singular.Errorlog.ErrorLog.ErrorDescription">
 <Summary>
 Gets and sets the Log Location value
 </Summary>
</member>
<member name="P:Singular.Errorlog.ErrorLog.StackTrace">
 <Summary>
 Gets and sets the Exception Detail value
 </Summary>
</member>
<member name="P:Singular.Errorlog.ErrorLog.ProgramVersion">
 <Summary>
 Gets and sets the Version No value
 </Summary>
</member>
<member name="P:Singular.Errorlog.ErrorLog.CreatedDateTime">
 <Summary>
 Gets the Created Date Time value
 </Summary>
</member>
<member name="P:Singular.Errorlog.ErrorLog.CreatedBy">
 <Summary>
 Gets the Created By value
 </Summary>
</member>
<member name="F:Singular.Localisation.DataLocalisationLevel.AllStringProperties">
 <summary>
 All string properties will be localised. Specific properties can be ignored by using the LocaliseField attribute
 </summary>
</member>
<member name="F:Singular.Localisation.DataLocalisationLevel.SpecifyProperties">
 <summary>
 Only properties marked with the LocaliseField attribute will be localised.
 </summary>
</member>
<member name="F:Singular.Localisation.DataLocalisationLevel.ChildrenOnly">
 <summary>
 This object will not be localised, but its children will be checked for the LocaliseData attribute.
 </summary>
</member>
<member name="T:Singular.Localisation.LocaliseDataAttribute">
 <summary>
 Marks a class for data localisation. Localised data will be stored in the LocalisationDataValues table.
 </summary>
</member>
<member name="T:Singular.Localisation.LocaliseFieldAttribute">
 <summary>
 Marks a property for data localisation. Only required if the class localisation level is set to "SpecifyProperties", or if you want to exclude properties.
 </summary>
</member>
<member name="M:Singular.Localisation.Data.Helpers.CanPerformDataLocalisation(Singular.ReflectionCached.TypeInfo)">
 <summary>
 Returns true if localisation is enabled, the current language and variant are not the default, and the class has the LocaliseDataAttribute
 </summary>
</member>
<member name="F:Singular.Localisation.Localisation.SourceType.None">
 <summary>
 Project doesnt use localisation
 </summary>
</member>
<member name="F:Singular.Localisation.Localisation.SourceType.ProjectResourceFile">
 <summary>
 Finds Localised Strings in project resource files defined by calling RegisterLocalisedResource
 </summary>
</member>
<member name="F:Singular.Localisation.Localisation.SourceType.Database">
 <summary>
 Finds Localised Strings in the database.
 </summary>
</member>
<member name="M:Singular.Localisation.Localisation.Setup(Singular.Localisation.Localisation.SourceType,System.Func{System.Globalization.CultureInfo},System.Func{System.Nullable{System.Int32}},Singular.Localisation.Localisation.LanguageVariant)">
 <summary>
 Setup Localisation for this project.
 </summary>
 <param name="Source">Location of the Localised Strings</param>
 <param name="CurrentCultureCallback">Custom function that returns the culture for the current user.</param>
 <param name="CurrentVariantCallback">Custom function that returns the language variant ID for the current user.</param>
</member>
<member name="P:Singular.Localisation.Localisation.LocalisationVariantsEnabled">
 <summary>
 True if your database splits localisation values by language, and variant.
 </summary>
 <returns></returns>
</member>
<member name="P:Singular.Localisation.Localisation.LocalisationStringsSource">
 <summary>
 Location of the Localised Strings
 </summary>
</member>
<member name="P:Singular.Localisation.Localisation.CurrentCulture">
 <summary>
 Returns the culture for the current user. 
 </summary>
</member>
<member name="M:Singular.Localisation.Localisation.SetupRequest">
 <summary>
 Invokes the current culture delegate in case the application overrides the default localisation.
 </summary>
</member>
<member name="P:Singular.Localisation.Localisation.CurrentLanguageID">
 <summary>
 Returns the database language id for the language of the current culture.
 If localisation source is not Database, then returns 1.
 </summary>
</member>
<member name="M:Singular.Localisation.Localisation.RegisterLocalisedResource(System.String,System.String)">
 <summary>
 Tells the localisation helper where your resx file with the localised strings is.
 </summary>
 <param name="AssemblyName">e.g. "XXLib" or "XXWin"</param>
 <param name="ResourceName">The name of the resx file (without the .resx extension)</param>
 <remarks></remarks>
</member>
<member name="P:Singular.Localisation.Localisation.SupportedLanguages">
 <summary>
 Returns the list of languages from the database.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>from [GetProcs].[getROLocalisationKeyList]</remarks>
</member>
<member name="M:Singular.Localisation.Localisation.CreateLanguageCulture(System.String)">
 <summary>
 Create a CultureInfo object form the supplied CultureCode. The number and date formats are left as default.
 </summary>
</member>
<member name="M:Singular.Localisation.Localisation.LocalText(System.String)">
 <summary>
 Gets the localised text for the given key. Returns the text in the default language if the localised version is missing.
 </summary>
</member>
<member name="M:Singular.Localisation.Localisation.LocalTextDefaultOverride(System.String,System.String)">
 <summary>
 Gets the localised text for the given key. If they key is missing, returns null.
 </summary>
</member>
<member name="M:Singular.Localisation.Localisation.LocalText_DontReplaceMissing(System.String)">
 <summary>
 Gets the localised text for the given key. If they key is missing, returns null.
 </summary>
</member>
<member name="M:Singular.Localisation.Localisation.LocalTextJS(System.String)">
 <summary>
 JS encoded local text
 </summary>
</member>
<member name="M:Singular.Localisation.Localisation.LocalText(System.String,System.Object[])">
 <summary>
 Gets the localised text for the given key and parameters. Returns the text in the default language if the localised version is missing.
 Requires that the localised text has the parameters in {0}, {1} format.
 </summary>
</member>
<member name="M:Singular.Localisation.Localisation.ForceSafeFormatSettings">
 <summary>
 Sets the number format to use a period as the decimal seperator, and sets the date format to day month year.
 'Don't use this in web, rather call Singular.Localisation.Setup and return Singular.Localisation.GetSafeFormatSettings
 </summary>
</member>
<member name="P:Singular.LocalStrings.EnableLookup">
 <summary>
 When true, the string will act as a key for localisation.
 </summary>
</member>
<member name="P:Singular.Rules.JavascriptRule`1.ServerRuleFunction">
 <summary>
 Address of a function that will check the rule on the server. If JavascriptRuleFunctionName and JavascriptRuleCode are not set, then this will be called
 asynchronously from the client as well.
 </summary>
</member>
<member name="P:Singular.Rules.JavascriptRule`1.AsyncBusyText">
 <summary>
 The text to show the user while the rule is being sent/validated from client to server and back.
 If this is blank, the rule will only be checked on the next post back.
 </summary>
</member>
<member name="P:Singular.Rules.JavascriptRule`1.RunAsyncOnLoad">
 <summary>
 Async Rules by default only run when a dependant property changes. Set this to true to run the rule on load / object set etc.
 </summary>
</member>
<member name="P:Singular.Rules.JavascriptRule`1.AsyncDirtyOnly">
 <summary>
 If true, the server call will only be made if the object is dirty.
 </summary>
</member>
<member name="P:Singular.Rules.JavascriptRule`1.JavascriptRuleFunctionName">
 <summary>
 Name of a JavaScript function that must be called for Client Side validation. Must have Parameters {Value, Rule, CtlError}
 </summary>
</member>
<member name="P:Singular.Rules.JavascriptRule`1.JavascriptRuleCode">
 <summary>
 Actual JavaScript code that will be copied into the JavaScript object. Will be passed Parameters {Value, Rule, CtlError}
 </summary>
</member>
<member name="P:Singular.Rules.JavascriptRule`1.ClientOnly">
 <summary>
 True if the rule must only be executed on the client. Rule will never break on the server.
 </summary>
</member>
<member name="M:Singular.Rules.JavascriptRule`1.#ctor(Csla.Core.IPropertyInfo,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Singular.Rules.RuleSeverity)">
 <summary>
 Creates a Rule that will be checked on the client, and the server.
 </summary>
</member>
<member name="M:Singular.SingularBusinessBase`1.ToStringHelper(System.String,System.String)">
 <summary>
 Returns the provided text if it is not blank, Otherwise returns New Object / Blank Object.
 </summary>
</member>
<member name="M:Singular.SingularBusinessBase`1.AddDuplicateRule``1(Csla.Core.IPropertyInfo,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.IList}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
 <summary>
 Checks that the items in a child list of this object are unique.
 </summary>
 <typeparam name="ChildType">The single object type of the child list</typeparam>
 <param name="RuleProperty">The property to add the rule to</param>
 <param name="ErrorDescription">Description if the rule is broken</param>
 <param name="List">The list to check for uniqueness</param>
 <param name="Properties">The properties that must be unique</param>
</member>
<member name="M:Singular.SingularBusinessBase`1.CheckAllRules">
 <summary>
 Checks the rules in this object, and all child objects. Returns true if Valid
 </summary>
</member>
<member name="P:Singular.SingularBusinessBase`1.ErrorsAsWarnings">
 <summary>
 If this returns true, your object will be allowed to save, as all errors will be treated as warnings.
 To change this value dynamically, create a backing field using RegisterReadOnlyProperty.
 </summary>
</member>
<member name="M:Singular.SingularBusinessBase`1.SaveDirectly">
 <summary>
 Will try save this object on its own, by creating a new list of this objects parent type, and adding the object to the list.
 </summary>
 <remarks>B Marlborough.</remarks>
</member>
<member name="M:Singular.SingularBusinessBase`1.TransactionIsolationLevel">
 <summary>
 The isolation level to use when starting a transaction in DoInsertUpdateParent
 </summary>
</member>
<member name="M:Singular.SingularBusinessBase`1.LoadMultipleProperties(Csla.Data.SafeDataReader,System.Int32,Csla.Core.IPropertyInfo[])">
 <summary>
 Loads properties with data from the data reader. A list of properties can be specified without indexing each property.
 </summary>
</member>
<member name="M:Singular.SingularBusinessBase`1.UpdateChild(Singular.ISingularBusinessListBase)">
 <summary>
 Checks if the child list is not nothing, then calls UpdateGeneric on the child list.
 </summary>
</member>
<member name="P:Singular.SingularBusinessBase`1.IsClientNew">
 <summary>
 Used for Singular Web library. In javascript, will return if the object was created on the client. On server, will return the same value as IsNew.
 </summary>
</member>
<member name="M:Singular.SingularBusinessBase`1.InitialisationDummy">
 <summary>
 Forces the type to be initialised, and have all of its csla property infos created.
 </summary>
</member>
<member name="P:Singular.SingularBusinessBase`1.StorageDynamic">
 <summary>
 Allows dynamic declaration of properties / variables. e.g. Storage.SomeValue = "x"
 </summary>
</member>
<member name="M:Singular.SingularBusinessListBase`2.BulkUpdate(Singular.BulkUpdateMethod,System.Int32,System.Action{Singular.CommandProc})">
 <summary>
 Performs a bulk update of records using XML.
 </summary>
 <param name="UpdateMethod">Update all records at once, or insert / update seperately. InsProc will be called if All is specified.</param>
 <param name="BatchSizeKB">Whenever the xml size reaches this limit, the proc will be called.</param>
 <param name="ProcSetup">Any custom params for the proc. By default Proc name is InsProcs.ins[ObjectName]Bulk, or UpdProcs.upd[ObjectName]Bulk</param>
</member>
<member name="M:Singular.SingularBusinessListBase`2.FirstAndOnly">
 <summary>
 Returns the first item in the list. If there is more than 1 item, and exception is thrown.
 </summary>
</member>
<member name="M:Singular.SingularBusinessListBase`2.ReplaceOrAdd(Singular.ISingularBase)">
 <summary>
 Replaces the items in this list with items where the guids match. Useful if saving in a different list, and you need to merge the items back into the original list.
 </summary>
</member>
<member name="M:Singular.SingularBusinessListBase`2.ReplaceOrAdd(Singular.ISingularBusinessListBase)">
 <summary>
 Replaces the items in this list with items where the guids match. Useful if saving in a different list, and you need to merge the items back into the original list.
 </summary>
</member>
<member name="M:Singular.SingularCriteriaBase`1.InitialisationDummy">
 <summary>
 Forces the type to be initialised, and have all of its csla property infos created.
 </summary>
</member>
<member name="M:Singular.SingularReadOnlyBase`1.InitialisationDummy">
 <summary>
 Forces the type to be initialised, and have all of its csla property infos created.
 </summary>
</member>
<member name="M:Singular.SingularReadOnlyListBase`2.FirstAndOnly">
 <summary>
 Returns the first item in the list. If there is more than 1 item, and exception is thrown.
 </summary>
</member>
<member name="M:Singular.SingularReadOnlyListBase`2.FilterList(System.String,System.Object[])">
 <summary>
 Returns a list that only has the child items specified in the match criteria
 </summary>
 <param name="MatchColumn">The Property to Match On</param>
 <param name="MatchValues">A List of values to match</param>
 <returns>T</returns>
 <remarks>B Marlborough 2 June 08</remarks>
</member>
<member name="P:Singular.SingularReadOnlyListBase`2.ListIsReadOnly">
 <summary>
 Work around (hack) to get Singular.Server to build on Jenkins. Without this Jenkins has compile error "'Set' accessor of property 'IsReadOnly' is not accessible."
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Data.DataFunctions.PopulateObject(System.Object,Csla.Data.SafeDataReader)">
 <summary>
 Populates an object based on the field names returned from a query
 </summary>
</member>
<member name="M:Singular.Data.DataFunctions.PopulateList``1(System.Collections.IList,Csla.Data.SafeDataReader)">
 <summary>
 Populates a list by creating an object of the supplied type for each row returned. Field names must match property names.
 </summary>
</member>
<member name="M:Singular.Data.Files.MoveFileToLocation(System.String,System.String,System.Boolean)">
 <summary>
 Moves the given file to new the location folder
 </summary>
 <param name="FileName">Filename to be moved</param>
 <param name="LocationFolder">Location file is moved to</param>
 <param name="CreateFolder">Pass true to create folder if it does not exist</param>
 <remarks></remarks>
</member>
<member name="M:Singular.Data.Files.MoveFileToLocation(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Moves the given file to new the location folder
 </summary>
 <param name="FileName">Filename to be moved</param>
 <param name="LocationFolder">Location file is moved to</param>
 <param name="CreateFolder">Pass true to create folder if it does not exist</param>
 <remarks></remarks>
</member>
<member name="M:Singular.Data.Files.GetFileNameFromFullFileName(System.String,System.Boolean)">
 <summary>
 Returnes the File Name from a full file name (file name with path)
 </summary>
 <param name="FullFileName">The full file name</param>
 <param name="StripOffExtension">Pass in true to strip off the extension</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Data.Files.ImportTabDelimitedTextFile(System.String,System.Boolean,System.String@,System.String)">
 <summary>
 Imports tab delimited text file
 </summary>
 <param name="FileName">Full File Name to import</param>
 <param name="FirstLineIsColumnHeaders">Pass true if the first line of the file contains the column headers</param>
 <param name="TableName">Name of DataTable returned (</param>
 <param name="Errors">Errors encountered during import process, Check if Empty to ensure correct import</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Data.DataTables.GetValueSeparatedDataTable(System.String,System.Int32,System.Boolean,System.String,System.Object)">
 <summary>
 Returns a DataTable with 2 columns: Value and Display. Usefull for creating a drop down datasource where you dont have a list / database table.
 </summary>
 <param name="Values"></param>
 <param name="NoOfColumns"></param>
 <param name="AllowNulls"></param>
 <param name="Seperator"></param>
 <param name="NullValue"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Singular.Data.DataTables.ExtendedProperties.Description">
 <summary>
 For column tooltips.
 </summary>
</member>
<member name="M:Singular.Data.DataTables.AddExtendedInfo(System.Data.DataColumn,System.Boolean)">
 <summary>
 Adds extended info based on the column type.
 </summary>
 <param name="Column"></param>
 <remarks></remarks>
</member>
<member name="M:Singular.Data.DataTables.GetSortedChildRows(System.Data.DataRow,System.Data.DataRelation)">
 <summary>
 Returns a sorted array of child rows based on the child tables DefaultView.Sort property.
 </summary>
</member>
<member name="M:Singular.Data.DataTables.GetCellDisplayValue(System.Object,System.Data.DataColumn)">
 <summary>
 Gets the display value of a cell using the columns format string if there is one.
 </summary>
</member>
<member name="M:Singular.Data.DataTables.ClearDataTableAndChildTables(System.Data.DataTable)">
 <summary>
 Clears the data out of a table. Recurses throught the child relations, and clears those tables as well.
 </summary>
</member>
<member name="M:Singular.Data.DataTables.CopyDataTableAndChildTables(System.Data.DataRow[],System.Data.DataTable)">
 <summary>
 Copies the data from a collection of rows into a datatable. Recurses throught the child relations, and copies those rows as well.
 </summary>
</member>
<member name="M:Singular.Data.XML.DictionaryToXML``2(System.Collections.Generic.Dictionary{``0,``1})">
 <summary>
 Converts the entries in a dictionary to XML for use in SQL.
 </summary>
</member>
<member name="M:Singular.Data.Excel.ExcelFile.#ctor(System.String,System.String)">
 <summary>Creates the object baised on the file you already uploaded. Populates the WorkSheet Property with worksheet names</summary>
 <param name="path">The Pshyical path that could / should be baised on the web config Server.MapPath("excelreading")</param>
 <param name="fileName">this is the name that you saved the file as not necassarly the original file name</param>
 <remarks>Contains error checking incase the wrong file type is uploaded</remarks>
</member>
<member name="M:Singular.Data.Excel.ExcelFile.LoadWorkSheetNames">
 <summary>Populates the WorkSheet property with a collection of worksheet names</summary>
 <remarks>more field could be added but are not really relative. The time stamp is accessable
 but it is the time stamp of when the file was coppied</remarks>
</member>
<member name="M:Singular.Data.Excel.ExcelFile.GetWorkSheetByName(System.String)">
 <summary>Gets data from select workbook</summary>
 <param name="workSheetName">Should ab a name from the excellWorkSheets property</param>
 <returns>dataset</returns>
 <remarks>The worksheet name does not require a $ appended to the name</remarks>
</member>
<member name="M:Singular.Data.Excel.ExcelFile.GetFileType">
 <summary>Strips the file type out of the file name property</summary>
 <returns>file type as string</returns>
</member>
<member name="T:Singular.Data.Excel.SingularWorkSheet">
 <summary>Simple class to hold info about the worksheets in the workbook</summary>
</member>
<member name="P:Singular.Data.Excel.SingularWorkSheet.TableName">
 <summary>"TABLE_NAME" property loaded from OleDbSchemaGuid.Tables method</summary>
</member>
<member name="M:Singular.Data.Excel.SingularWorkSheet.#ctor(System.String)">
 <summary>Constructor used to add new worksheets to a collection</summary>
 <param name="tableName">worksheet name includes the appended $</param>
</member>
<member name="T:Singular.Data.Excel.SingularWorkSheets">
 <summary>Simple Collection to store all the worksheets in the work book</summary>
</member>
<member name="M:Singular.Data.ExcelExporter.PopulateData(System.Data.DataTable,System.String,System.Collections.Generic.List{Singular.Data.ExcelExporter.Lookup},System.Int32)">
 <summary>
 Creates a worksheet using the table name, or the supplied Name.
 </summary>
</member>
<member name="M:Singular.Data.ExcelExporter.PopulateWorksheetFromDataTable(System.Data.DataTable,Infragistics.Documents.Excel.Worksheet)">
 <summary>
 Populate a worksheet using a datatable.
 </summary>
</member>
<member name="M:Singular.Data.ExcelExporter.GetColumnAplhaIndex(System.Int32)">
 <summary>
 Returns the excel alphabet character for the column. E.g. column index 0 is column A
 </summary>
</member>
<member name="P:Singular.Data.CSV.CSVLineWriter.CommaAtEnd">
 <summary>
 Specifies whether the last record on a line should have a comma after it.
 </summary>
</member>
<member name="M:Singular.Data.CSV.CSVLineWriter.AddField(System.Object)">
 <summary>
 Adds a normal field without inverted commas
 </summary>
</member>
<member name="M:Singular.Data.CSV.CSVLineWriter.AddTextField(System.Object)">
 <summary>
 Adds a text field with inverted commas. Inverted comma's in the original string are replaced with double inverted comma's.
 </summary>
</member>
<member name="M:Singular.Data.CSV.CSVLineWriter.NextRecord">
 <summary>
 Closes off the line and adds a new line.
 </summary>
</member>
<member name="M:Singular.Data.CSV.FromDataTable(System.Data.DataTable,System.Boolean)">
 <summary>
 Converts a datatable into CSV. To convert to string, use System.Text.Encoding.ASCII.GetString(CSV.FromDataTable(.....)).
 </summary>
</member>
<member name="M:Singular.Data.Sql.CommandAsSql(System.Data.SqlClient.SqlCommand,System.Boolean)">
 <summary>
 Will attempt to convert the SQL Command into an executable SQL String (only tested with normal business object commands)
 </summary>
 <param name="cm">The command that must be converted</param>
 <returns>The executable SQL string that can be run directly against SQL</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Data.Sql.CheckConnectionSettings(System.String@,System.String,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Will check if the connection settings seem valid without trying to connect to the database
 </summary>
 <param name="Problems">An output parameter listing the problems with the connection settings</param>
 <param name="ServerName"></param>
 <param name="DatabaseName"></param>
 <param name="UserName"></param>
 <param name="Password"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Data.Sql.GetConnectionString(System.String,System.String,System.String,System.String)">
 <summary>
 Returns a sql connection string for a given server and database
 </summary>
 <param name="ServerName">The Server</param>
 <param name="DatabaseName">The Database</param>
 <param name="UserName">UserName, Leave blank for Integrated Security</param>
 <param name="Password">Unencrypted Password</param>
 <returns>A sql connection string</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Data.Sql.AddTableParameter``1(System.Data.SqlClient.SqlCommand,System.String,System.Collections.Generic.List{``0},System.String)">
 <summary>
 Adds a parameter to a command that is a table parameter with 1 column. The Type needs to be defined in SQL.
 </summary>
 <typeparam name="DataType"></typeparam>
 <param name="cm">The SQLCommand</param>
 <param name="ParamName">The name of the parameter in the datasource.</param>
 <param name="List">The list of values to be passed in.</param>
 <param name="ColumnName">The column name of the custom SQL data type.</param>
</member>
<member name="M:Singular.Data.SqlNotifier.#ctor(System.String,System.String,System.String,System.Int32)">
 <summary>
 Creates a class that listens for when the data returned by the stored proc: ProcName changes.
 See class definition for how to create the sql queues / services.
 </summary>
 <param name="ProcName">The stored proc name that returns the data you want to be notified of changes on. NB: This proc must execute as owner.</param>
 <param name="QueueName">Name of the Sql Queue you created.</param>
 <param name="ServiceName">Name of the Sql Service you created.</param>
 <param name="TimeoutSeconds">Timeout in seconds before the Stored proc is run again if no data changed. Zero is not a valid value.</param>
 <remarks></remarks>
</member>
<member name="T:Singular.Data.SQLQueueReader">
 <summary>
 Listens for messages being pushed onto a SQL queue. A callback is called when a message is received, and the listening starts again.
 The process repeats every [Timeout] seconds in case a message is missed.
 </summary>
</member>
<member name="P:Singular.Data.SQLQueueReader.MaxConcurrentThreads">
 <summary>
 The number of simultaneous threads allowed at once.
 </summary>
</member>
<member name="M:Singular.Data.SQLQueueReader.BeginWaitForMessage(System.Action{System.String},System.Action{System.Exception})">
 <summary>
 Starts waiting for a message without blocking the current thread.
 </summary>
 <param name="Callback">Method to run when a message is received. The next message will not be processed until the first one is complete, unless MaxConcurrentThreads is more than 1.</param>
 <param name="ErrorCallback">Method to run when an exception occurs.</param>
</member>
<member name="P:Singular.Emails.Email.EmailID">
 <Summary>
 Gets the Email value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.ToEmailAddress">
 <Summary>
 Gets and sets the To Email Address value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.FromEmailAddress">
 <Summary>
 Gets and sets the From Email Address value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.FriendlyFrom">
 <Summary>
 Gets and sets the Friendly From value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.Subject">
 <Summary>
 Gets and sets the Subject value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.Body">
 <Summary>
 Gets and sets the Body value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.CCEmailAddresses">
 <Summary>
 Gets and sets the CC Email Addresses value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.CreatedBy">
 <Summary>
 Gets the Created By value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.CreatedDate">
 <Summary>
 Gets the Created Date value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.DateToSend">
 <Summary>
 Gets and sets the Date To Send value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.SentDate">
 <Summary>
 Gets and sets the Sent Date value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.NotSentError">
 <Summary>
 Gets and sets the Not Sent Error value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.Ignore">
 <Summary>
 Gets and sets the Ignore value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.SendOnInsert">
 <Summary>
 Gets and sets the SendOnInsert value
 </Summary>
</member>
<member name="P:Singular.Emails.Email.ExtraInfo">
 <summary>
 Used to store extra information about this email. E.g. to link it to another record
 </summary>
</member>
<member name="M:Singular.Emails.Email.SendAndSave(System.Boolean)">
 <summary>
 Sends the email and saves it asyncronously. If the send fails, it will be saved with the not sent error.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.Emails.Email.SendAndSave(Singular.Emails.SingularMailSettings.MailCredential,System.Boolean,System.Action{Singular.Emails.Email,System.Exception})">
 <summary>
 Sends the email and saves it asyncronously. If the send fails, it will be saved with the not sent error.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Singular.Emails.Email.CreateEmail">
 <summary>
 Override if your project has an inherited Email class.
 </summary>
</member>
<member name="P:Singular.Emails.EmailAttachment.EmailAttachmentID">
 <Summary>
 Gets the Email Attachment value
 </Summary>
</member>
<member name="P:Singular.Emails.EmailAttachment.EmailID">
 <Summary>
 Gets the Email value
 </Summary>
</member>
<member name="P:Singular.Emails.EmailAttachment.AttachmentName">
 <Summary>
 Gets and sets the Attachment Name value
 </Summary>
</member>
<member name="P:Singular.Emails.EmailAttachment.AddressOfAttachment">
 <Summary>
 Gets and sets the Address Of Attachment value
 </Summary>
</member>
<member name="M:Singular.Emails.EMailBuilder.AddAttachment(Singular.Documents.IDocument)">
 <summary>
 WARNING! This Only attaches the documentID, not the document contents. Use AddAttachmentData if you want the later.
 </summary>
</member>
<member name="M:Singular.Emails.EMailBuilder.Split(System.Int32)">
 <summary>
 Split into multiple emails if there are more than <paramref name="BatchSize" /> recipients. Note: All recipients are added as CC
 </summary>
 <param name="BatchSize">Max no of recipients per mail.</param>
</member>
<member name="P:Singular.Emails.SingularMail.UseBCC">
 <summary>
 When the to address contains more than 1 email address, split by ;, the first is added to the to address, the rest to cc, or bcc?
 </summary>
</member>
<member name="M:Singular.Emails.SingularMailSettings.MailCredential.FromProjectSettings(Singular.Correspondence.IEmailSettings)">
 <summary>
 Populates the settings from your projects settings class. Inherit from Singular.Correspondence.CorrespondenceSettingsBase, otherwise implement Singular.Correspondence.IEmailSettings
 </summary>
</member>
<member name="F:Singular.Emails.SingularMailSettings.EmailBodyType.PlainTextOnly">
 <summary>
 Sends plain text version of the email only. The email will look like it's in Notepad.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Singular.Emails.SingularMailSettings.EmailBodyType.PlainTextAndSimpleHTML">
 <summary>
 Adds a Body tag around the plain text to change the font of the email body. Will use the text in the Body property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Singular.Emails.SingularMailSettings.EmailBodyType.PlainTextAndCustomHTML">
 <summary>
 Uses the value in the HTMLBody Property as the HTML part of the Email.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Singular.Emails.SingularMailSettings.EmailBodyType.CustomHTMLOnly">
 <summary>
 Uses the value in the HTMLBody Property as the HTML part of the Email. Does not add Plain Text Version
 </summary>
 <remarks></remarks>
</member>
<member name="F:Singular.Emails.SingularMailSettings.EmailBodyType.CalendarEntry">
 <summary>
 Sends calendar entry version of the email only.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Singular.Emails.SingularMailSettings.AllowedEmailAddresses">
 <summary>
 If not empty, the library will check if the to email addresses are in this list. If not, the address will be changed to the first address in this list.
 Seperate with ;
 </summary>
</member>
<member name="M:Singular.Extensions.Csla.ToBindingList``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Will convert the collection into a BindingList collection
 </summary>
 <typeparam name="C"></typeparam>
 <param name="list"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Extensions.Strings.AddSingleQuotes(System.String)">
 <summary>
 Adds single quotes to the start and end of a string.
 </summary>
</member>
<member name="M:Singular.Extensions.Strings.IfEmpty(System.String,System.String)">
 <summary>
 If the string is empty, returns the replacement value.
 </summary>
</member>
<member name="M:Singular.Extensions.Strings.ToHTML(System.String,Singular.Extensions.Strings.NewLineHandlingType)">
 <summary>
 Tries to convert plain text to HTML by replacing line feeds with br /> etc.
 </summary>
</member>
<member name="M:Singular.Extensions.Strings.InArray``1(``0,``0[])">
 <summary>
 Checks if 'self' is contained in the values array
 </summary>
</member>
<member name="M:Singular.Extensions.Strings.RemoveStartsWith(System.String,System.String)">
 <summary>
 Removes the beginning of the 'Source' string if it starts with the 'StartsWith' string
 </summary>
</member>
<member name="P:Singular.Linq.JavascriptExpressionParser`1.PropertyAccessMode">
 <summary>
 If set to True, renders any properties without the () at the end, so that knockout can bind to the observable, not the value.
 </summary>
</member>
<member name="P:Singular.Linq.JavascriptExpressionParser`1.CheckBrowsable">
 <summary>
 If set to True, and property used in an expression that is not browsable according to Singular.Reflection.AutoGenerateField will cause an exception to be raised.
 </summary>
</member>
<member name="T:Singular.Arrays">
 <summary>
 Provides methods for searching, and manipulating arrays
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.Arrays.GetMobileList``1(``0[])">
 <summary>
 Transforming any array object to an Csla.Core.MobileList object
 </summary>
 <typeparam name="T">Type of your Array</typeparam>
 <param name="FromArray">Accepts an array object</param>
 <returns>Csla.Core.MobileList(Of T)</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Arrays.ArrayContains(System.Object[],System.Object)">
 <summary>
 Returns a boolean value indicating whether a specified item exist within this array. 
 </summary>
 <param name="Array">Accepts an array object</param>
 <param name="Value">The item to seek</param>
 <returns>Boolean</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Arrays.ArrayContainsGeneric``1(``0[],System.Object)">
 <summary>
 Returns a boolean value indicating whether a specified item exist within this array. 
 </summary>
 <typeparam name="T">Type of your Array</typeparam>
 <param name="Array">Accepts an generic array object</param>
 <param name="Value">The item to seek</param>
 <returns>Boolean</returns>
 <remarks></remarks>
</member>
<member name="P:Singular.Barcodes.QRGenerator.ST">
 <Summary>
 Gets and sets the ST value
 </Summary>
</member>
<member name="P:Singular.Barcodes.QRGenerator.BarcodeFormat">
 <Summary>
 Gets and sets the ST value
 </Summary>
</member>
<member name="P:Singular.Barcodes.QRGenerator.Criteria.Image">
 <Summary>
 Gets and sets the ImageList value
 </Summary>
</member>
<member name="P:Singular.Barcodes.QRGenerator.Criteria.ST">
 <Summary>
 Gets and sets the STList value
 </Summary>
</member>
<member name="P:Singular.Barcodes.QRGenerator.Criteria.BarcodeFormat">
 <Summary>
 Gets and sets the STList value
 </Summary>
</member>
<member name="T:Singular.Colours.ColourGenerator">
 <summary>
 Provides methods for manipulating and generation colours
 </summary>
 <remarks></remarks>
</member>
<member name="T:Singular.Dates">
 <summary>
 Provides methods for manipulating dates
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.MonthDifference(System.DateTime,System.DateTime)">
 <summary>
 Method to calculates the difference in month between two dates
 </summary>
 <param name="Date1">Date value of the date the months will be calculated for</param>
 <param name="Date2">Date value of the date for the calculation</param>
 <returns>Integer with the difference in month value</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the MonthDifference Method
 <code>
 DateTime date1 = new DateTime(2016, 02, 24);
 DateTime date2 = new DateTime(2017, 02, 27);
 int monthDifference = Singular.Dates.MonthDifference(date1, date2);
 </code>
 </example>
</member>
<member name="M:Singular.Dates.MonthDifferencePrecise(System.DateTime,System.DateTime)">
 <summary>
  Method to calculates the difference in month between two dates
 </summary>
 <param name="Date1">Date value of the date the months will be calculated for</param>
 <param name="Date2">Date value of the date for the calculation</param>
 <returns>Decimal value with the difference in month value</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the MonthDifferencePrecise Method
 <code>
 DateTime date1 = new DateTime(2016, 02, 24);
 DateTime date2 = new DateTime(2017, 02, 27);
 decimal monthDifference = Singular.Dates.MonthDifferencePrecise(date1, date2);
 </code>
</example>
</member>
<member name="M:Singular.Dates.GetAgeFromDate(System.DateTime)">
 <summary>
 Method to calculated age for the passed in date of birth
 </summary>
 <param name="BirthDate">Date value for Date of birth</param>
 <returns>Integer value with age</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.DateMonthStart(System.DateTime)">
 <summary>
 Method to calculates the first date of the month
 </summary>
 <param name="ReferenceDate">Date value for the date you want the first date of the month</param>
 <returns>Date value for first date of the month</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.DateMonthEnd(System.DateTime,System.Boolean)">
 <summary>
 Method to calculates the last date of the month
 </summary>
 <param name="ReferenceDate">Date value for the date you want the end date of the month </param>
 <param name="ToLastSecond">Must alwayds be false as true will throw an exception: Throw New NotSupportedException("To Last Second Not Supported")</param>
 <returns>Date value for the last date of the month</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the DateMonthEnd Method
 <code>
 DateTime DateParam = new DateTime(2017, 01, 15);
 DateTime MonthEndDate = Singular.Dates.DateMonthEnd(DateParam);
 </code>
</example>
</member>
<member name="M:Singular.Dates.YearDiff(System.DateTime,System.DateTime)">
 <summary>
 This function will give you an accurate decimal year difference between the 2 dates (taking into account leap years)
 </summary>
 <param name="Date1"></param>
 <param name="Date2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.GetSATaxYear(System.DateTime)">
 <summary>
 Returns the South African Tax year
 </summary>
 <param name="OfDate">Date the tax year must be calucalted against</param>
 <returns>Integer value of the Tax year</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the GetSATaxYear Method
 <code>
 DateTime DateParam = new DateTime(2016, 02, 24);
 int taxyear = Singular.Dates.GetSATaxYear(DateParam);
 </code>
 </example>
</member>
<member name="M:Singular.Dates.Parse(System.String,System.String)">
 <summary>
 Converts the specified string representation of a date and time to its System.DateTime equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.
 </summary>
 <param name="DateString">A string that contains a date and time to convert.</param>
 <param name="FormatString">A format specifier that defines the required format of DateString</param>
 <returns>An object that is equivalent to the date and time contained in s, as specified by format and provider.</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.DateWeekStart(System.DateTime,System.DayOfWeek)">
 <summary>
 Method to calculates the first day of the week that falls on a Monday or System.DayOfWeek if passed
 </summary>
 <param name="ReferenceDate">Date value to check the start of the week agains</param>
 <param name="FirstDayOfWeek">Optional param to specify the Firstday of the week default is Monday</param>
 <returns>Date value for the first day of week for passed in date</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the DateMonthEnd Method
 <code>
 DateTime DateParam = new DateTime(2017, 01, 15);
 DateTime WeekStartDate = Singular.Dates.DateWeekStart(DateParam);
 </code>
</example>
</member>
<member name="M:Singular.Dates.DateWeekEnd(System.DateTime,System.Boolean)">
 <summary>
 Method to calculates the date for the next day that falls on a Saturday
 </summary>
 <param name="ReferenceDate">Date value to check the end of the week against</param>
 <param name="ToLastSecond">Default to false this param is not being used in the Method</param>
 <returns>Date value for the next day that falls on a Saturday</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the DateWeekEnd Method
 <code>
 DateTime DateParam = new DateTime(2017, 01, 15);
 DateTime WeekEndDate = Singular.Dates.DateWeekEnd(DateParam);
 </code>
</example>
</member>
<member name="M:Singular.Dates.DateYearStart(System.DateTime)">
 <summary>
 Method to calculates the start date of the year
 </summary>
 <param name="ReferenceDate">Date value for the date you want the start of the year calculated against</param>
 <returns>date value of start of the year</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the DateYearStart Method
 <code>
 DateTime DateParam = new DateTime(2017, 06, 22);
 DateTime YearStartDate = Singular.Dates.DateYearStart(DateParam);
 </code>
</example>
</member>
<member name="M:Singular.Dates.DateYearEnd(System.DateTime,System.Boolean)">
 <summary>
 Method to calculates the end date of the year
 </summary>
 <param name="ReferenceDate">Date value for the date you want the end of the year calculated against</param>
 <param name="ToLastSecond">Must alwayds be false as true will throw an exception: Throw New NotSupportedException("To Last Second Not Supported")</param>
 <returns>date value of end of the year</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the DateYearEnd Method
 <code>
 DateTime DateParam = new DateTime(2017, 06, 22);
 DateTime YearEndDate = Singular.Dates.DateYearEnd(DateParam);
 </code>
</example>
</member>
<member name="M:Singular.Dates.GetFinMonth(System.Int32,System.DateTime)">
 <summary>
 This function will return the financial month of the DateToCheck based on the FinYearMonthStart
 </summary>
 <param name="FinYearMonthStart">Starting calendar month of the financial year</param>
 <param name="DateToCheck">The date of which the function must return the financial month</param>
 <returns>Integer value of the financial month corresponding to the calendar DateToCheck</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.GetFinYear(System.Int32,System.DateTime)">
 <summary>
 Returns the Financial year of the DateToCheck according to the FinYearMonthStart
 </summary>
 <param name="FinYearMonthStart">First Month of the Financial Year</param>
 <param name="DateToCheck">Date to check which financial year</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.GetCalMonth(System.Int32,System.Int32,System.Int32)">
 <summary>
 This function will return the 1st date of the calendar month of the FinMonth and FinYear based on the FinYearMonthStart
 </summary>
 <param name="FinYearMonthStart">Starting calendar month of the financial year</param>
 <param name="FinYear">The current financial year</param>
 <param name="FinMonth">The fin month you want the calendar date for</param>
 <returns>Integer value of the financial month corresponding to the calendar DateToCheck</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.GetFirstDay(System.DateTime,System.DayOfWeek,System.Boolean)">
 <summary>
 Methord that calculates the date for the day of the week passed in either before or after a specified date.
 </summary>
 <param name="FromDate">Date used for calculation</param>
 <param name="DayOfWeek">Day of the week date is calculated for</param>
 <param name="Before">If Before = true it gets the date after specified date, when false gets the date before. Default to false.</param>
 <returns>A datetime with the calucated day of the week</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the DateYearEnd Method
 <code>
 DateTime date1 = new DateTime(2017, 02, 23);
 DayOfWeek day = DayOfWeek.Friday;
 DateTime firstDay = Singular.Dates.GetFirstDay(date1, day);
 </code>
</example>
</member>
<member name="M:Singular.Dates.GetFirstDay(System.Int32,System.Int32,System.Int32,System.DayOfWeek,System.Boolean)">
 <summary>
 Methord that calculates the date for the day of the week passed in either before or after a specified date.
 </summary>
 <param name="Year">Year used for calculation</param>
 <param name="Month">Month used for calculation</param>
 <param name="Day">Day used for calculation</param>
 <param name="DayOfWeek">Day of the week date is calculated for</param>
 <param name="Before">If Before = true it gets the date after specified date, when false gets the date before. Default to false.</param>
 <returns>A datetime with the calucated day of the week</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the DateYearEnd Method
 <code>
 DayOfWeek day = DayOfWeek.Friday;
 DateTime firstDay = Singular.Dates.GetFirstDay(2017,02,23, day);
 </code>
</example>
</member>
<member name="M:Singular.Dates.GetMonthValueList(System.Int32)">
 <summary>
 Returns a value list of all the months in a year, starting at a specified month.
 Contains the Index of the Month, and the Name of the Month
 </summary>
 <param name="StartMonth">Start Month (January = 1)</param>
</member>
<member name="M:Singular.Dates.GetYearValueList(System.Int32,System.Int32)">
 <summary>
 Returns a value list of years.
 The value and display are the same
 </summary>
 <param name="StartYear">Which year to start at</param>
 <param name="NoOfYears">No Of Years (to include backwards)</param>
</member>
<member name="M:Singular.Dates.GetYearList(System.Int32,System.Int32)">
 <summary>
 Returns an Integer list of years.
 The value and display are the same
 </summary>
 <param name="StartYear">Which year to start at</param>
 <param name="NoOfYears">No Of Years (to include backwards)</param>
</member>
<member name="M:Singular.Dates.GetMonthIndexFromString(System.String)">
 <summary>
 If you have a month string. e.g 'March' and you want 3 returned.. Use this function
 </summary>
 <param name="Month">The Full Month Name. e.g. January, Not Jan</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.GetNextWorkingDay(System.DateTime)">
 <summary>
 Method to caluculate the next working day
 </summary>
 <param name="ReferenceDate">Date the previous working day is calculated against</param>
 <returns>Date value of the previous working day</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.GetPreviousWorkingDay(System.DateTime)">
 <summary>
 Method to caluculate the previous working day
 </summary>
 <param name="ReferenceDate">Date the previous working day is calculated against</param>
 <returns>Date value of the previous working day</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Dates.Min(System.DateTime,System.DateTime)">
 <summary>
 Method to calculates the min date between two dates
 </summary>
 <param name="Date1">Date value of the first date for comparison</param>
 <param name="Date2">Date value of the second date for comparison</param>
 <returns>Object type with the min date</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the Min Method
 <code>
 DateTime date1 = new DateTime(2017, 02, 24);
 DateTime date2 = new DateTime(2017, 02, 27);
 object minDate = Singular.Dates.Min(date1, date2);
 </code>
</example>
</member>
<member name="M:Singular.Dates.Max(System.DateTime,System.DateTime)">
 <summary>
 Method to calculates the max date between two dates
 </summary>
 <param name="Date1">Date value of the first date for comparison</param>
 <param name="date2">Date value of the second date for comparison</param>
 <returns>Object type value with the max date</returns>
 <remarks></remarks>
 <example>
 This a C# sample that shows how to call the Max Method
 <code>
 DateTime date1 = new DateTime(2017, 02, 24);
 DateTime date2 = new DateTime(2017, 02, 27);
 object maxDate = Singular.Dates.Max(date1, date2);
 </code>
</example>
</member>
<member name="M:Singular.Dates.SafeCompare(System.Func{System.Boolean})">
 <summary>
 Used for javascript date comparisons.
 </summary>
</member>
<member name="M:Singular.Debug.RecurseExceptionMessage(System.Exception,System.Boolean)">
 <summary>
 Returns a string containing all the messages of exceptions that are in the specified exception's tree
 </summary>
 <param name="ex"></param>
 <param name="OverrideForCustomErrors"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Debug.GetCleanStackTrace(System.Exception)">
 <summary>
 Returns the stack trace of an exception without the System methods.
 </summary>
</member>
<member name="M:Singular.Debug.InDesignMode">
 <summary>
 Returns true if the visual studio development environment is executing.
 This will happen when inherited forms are viewed etc, any code you dont want the designer to execute should be put in 
 an if statement (if not InDesignMode)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Debug.GetBottomLevelExceptionMessage(System.Exception)">
 <summary>
 Returns the message of the bottom most exception in the specified exception's tree
 </summary>
 <param name="ex">An exception</param>
 <returns>Exception Message</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Debug.GetBottomLevelException(System.Exception)">
 <summary>
 Returns the message of the bottom most exception in the specified exception's tree
 </summary>
 <param name="ex">An exception</param>
 <returns>Exception Message</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Defaultable.DefaultableObject`1.CreateProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
 <summary>
 Creates a defaultable property. Sets the value to the Root Value if this is the Root Object. Otherwise references the parent objects property.
 </summary>
 <typeparam name="p">Type of Property e.g String</typeparam>
 <param name="le">Function(c) c.PropertyName</param>
 <param name="RootValue">The Root Value of this property when this is the Root Object.</param>
</member>
<member name="M:Singular.Dynamic.DynamicStorage`1.LateBind(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{System.Object})">
 <summary>
 This will check if there is data for the supplied property. If not, the code in the callback funcion will be called.
 </summary>
 <param name="Property">Property this is being used in.</param>
 <param name="CallBack">Code that will be called the first time this property is called..</param>
</member>
<member name="M:Singular.Dynamic.DynamicStorage`1.ResetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
 <summary>
 Clears the specified property so that it is refetched the next time it is called.
 </summary>
</member>
<member name="T:Singular.Files">
 <summary>
 Provides methods for manipulating files
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.Files.GetReadableSize(System.Int64)">
 <summary>
 Gets the readable size of a file form the no of bytes. E.g. 1048576 = 1MB, 4567 = 4.45KB
 </summary>
 <param name="SizeInBytes">Size of the file in bytes value</param>
 <returns>Returns a string value with a friendly file size description</returns>
 <remarks></remarks>
</member>
<member name="F:Singular.Imaging.Resizer.ImageResizeMode.KeepOriginalAspect">
 <summary>
 The aspect ratio of the original image is preserved.
 </summary>
</member>
<member name="F:Singular.Imaging.Resizer.ImageResizeMode.AddBorders">
 <summary>
 The new image will have the aspect ratio of the required size. The image will be centered with borders of color 'BorderColor' will be added. If the border color is transparent, the image will be converted to png.
 </summary>
</member>
<member name="F:Singular.Imaging.Resizer.ImageFitMode.Contain">
 <summary>
 The image will be contained within the borders of the required size area. Both of the dimensions will be less than the required size.
 </summary>
</member>
<member name="F:Singular.Imaging.Resizer.ImageFitMode.Cover">
 <summary>
 The image will fit into the borders of the required size area with no gaps. One of the dimensions may be more than the required size.
 </summary>
</member>
<member name="P:Singular.Imaging.Resizer.FileExtension">
 <summary>
 File extension to use for the resized image. Includes the "."
 </summary>
</member>
<member name="T:Singular.Misc">
 <summary>
 Provides methods for manipulating or comparing objects 
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.CompareSafe(System.Object,System.Object)">
 <summary>
 Method to compare objects type and value
 </summary>
 <param name="obj1">First object that is used in comparing</param>
 <param name="obj2">Second object that is used in comparing</param>
 <returns>Boolean value true if object are the same type and value, otherwise false.</returns>
 <remarks>If an exception happens then false will be returned</remarks>
</member>
<member name="M:Singular.Misc.CompareSafeEmptyString(System.Object,System.Object)">
 <summary>
 Method to compare objects type and value if object is empty it will convert the object to empty string.
 </summary>
 <param name="obj1">First object that is used in comparing</param>
 <param name="obj2">Second object that is used in comparing</param>
 <returns>Boolean value true if object are the same type and value, otherwise false.</returns>
 <remarks>If an exception happens then false will be returned</remarks>
</member>
<member name="M:Singular.Misc.CompareSafe(System.Object,System.Object,System.Boolean)">
 <summary>
 Method to compare objects type and value
 </summary>
 <param name="obj1">First object that is used in comparing</param>
 <param name="obj2">Second object that is used in comparing</param>
 <param name="IgnoreCase">Pass true to ignore case</param>
 <returns>Boolean value true if object are the same type and value, otherwise false.</returns>
 <remarks>If an exception happens then false will be returned</remarks>
</member>
<member name="M:Singular.Misc.CompareSafe(System.Object,System.Object,System.String)">
 <summary>
 Method to compare objects type and value with Operator
 </summary>
 <param name="obj1">First object that is used in comparing</param>
 <param name="obj2">Second object that is used in comparing</param>
 <param name="Operator">Operate that is used to compare in string format e.g =, >, >= </param>
 <returns>Boolean value true if the comapre if the operator passed is true.</returns>
 <remarks>If an exception happens then false will be returned</remarks>
</member>
<member name="M:Singular.Misc.IsNullT``1(System.Object,``0)">
 <summary>
 Method to replace the value if is null
 </summary>
 <typeparam name="RType">Object typethat is passed thought in Value parameter</typeparam>
 <param name="Value">Object value that null is being check against</param>
 <param name="ReplaceValue">Replace value if object part in Value parameter is null</param>
 <returns>Value pass in Value parameter unless it is null the it will return the value passed in the ReplaceValue parameter </returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.IsNull(System.Object,System.Object)">
 <summary>
 Method to replace the value if is null
 </summary>
 <param name="Value">Object value that null is being check against</param>
 <param name="ReplaceValue">Replace value if object part in Value parameter is null</param>
 <returns>Value pass in Value parameter unless it is null the it will return the value passed in the ReplaceValue parameter </returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.IsNullNothing(System.Object,System.Boolean)">
 <summary>
 Method to check if object value is null or Zero
 </summary>
 <param name="Value">Object value to check against</param>
 <param name="ZeroIncluded">Booleab value to include Zero to null check</param>
 <returns>Boolean value true if object is null otherwise false is returned</returns>
 <remarks>If ZeroIncluded is true must pass numeric object in Value parameter</remarks>
</member>
<member name="M:Singular.Misc.IsNullNothing(System.Object)">
 <summary>
 Method to check if object value is null
 </summary>
 <param name="Value">Object value to check against</param>
 <returns>Boolean value true if object is null or empty string otherwise false is returned</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.IsNullNothingOrEmpty(System.Object)">
 <summary>
 Method to check if object value is null or empty
 </summary>
 <param name="Value">Object value to check against</param>
 <returns>Boolean value true if object is null otherwise false is returned</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.NothingDBNull(System.Object)">
 <summary>
 Method to return DBNull.Value if object is null
 </summary>
 <param name="value">Object value to check against</param>
 <returns>The value parameter unless it is null then DBNull.Value is returned</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.ZeroDBNull(System.Object)">
 <summary>
 Method to return DBNull.Value if object is Zero
 </summary>
 <param name="Value">Object value to check against</param>
 <returns>The value parameter unless it is 0 then DBNull.Value is returned</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.ZeroNothingDBNull(System.Object)">
 <summary>
  Method to return DBNull.Value if object is Zero or Nothing
 </summary>
 <param name="Value">Object value to check against</param>
 <returns>The value parameter unless it is 0 or Nothing then DBNull.Value is returned</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.ZeroNothing(System.Object)">
 <summary>
 This function will return nothing if the value is 0
 </summary>
 <param name="Value">Object value to check against</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.ValueDBNull(System.Object,System.Object)">
 <summary>
 Method to return DBNull.Value if value parmeter equels NullValue parmeter
 </summary>
 <param name="Value">Object value to check against</param>
 <param name="NullValue">Object that will result in DBNull.Value return</param>
 <returns>The value parameter Value = NullValue then DBNull.Value is returned</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.In(System.Object,System.Object[])">
 <summary>
 If you ever wished the SQL 'in' clause existed in .net? Then you are in luck! (almost).
 This function will do a similar comparison, with slightly different syntax.
 E.G: Instead of WHERE MainGroupID In (18, 20, 25, 26) use this: If Singular.Misc.In(MainGroupID, 18, 20, 25, 26)
 </summary>
 <param name="CompareObj">See Method Summary</param>
 <param name="CompareObjects">See Method Summary</param>
 <returns></returns>
 <remarks>B Marlborough 26 Aug 09</remarks>
</member>
<member name="M:Singular.Misc.InSafe(System.String,System.String[])">
 <summary>
 See Singular.Misc.In 
 This version is faster, but doesn't handle nulls.
 </summary>
 <param name="CompareObj">See Method Summary</param>
 <param name="CompareObjects">See Method Summary</param>
 <returns></returns>
 <remarks>B Marlborough 26 Aug 09</remarks>
</member>
<member name="M:Singular.Misc.Effect(System.Decimal,System.Int32)">
 <summary>
 Returns the effective annual interest rate.
 </summary>
 <param name="Rate">The monthly / quarterly / etc rate</param>
 <param name="Period">Periods per year. e.g. 12 for monthly interest.</param>
</member>
<member name="T:Singular.Misc.Booleans">
 <summary>
 Calls that contians methods for boolean objects
 </summary>
</member>
<member name="M:Singular.Misc.Booleans.ConvertBooleanToYesNo(System.Boolean)">
 <summary>
 Method to convert boolean value to string value yes/no
 </summary>
 <param name="Value">Boolean value to convert</param>
 <returns>yes/no string value values yes when true else no</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.Colors.GetTextColorForBackground(System.Drawing.Color)">
 <summary>
 Returns the best font colour for a specific background colour
 </summary>
 <param name="BackColor">The background colour the text will be displayed on</param>
 <returns>Color.White or Color.Black to be used as the font colour</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.Password.GetRandomCharInt">
 <summary>
 Gets a random ascii character value between 33 and 126.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.Password.CreateRandomPassword(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a random password, based on the parameters specified.
 </summary>
 <param name="PasswordLength">How many characters must be generated.</param>
 <param name="IncludeSpecialCharacters">Are special characters allowed? E.g: !#$%^</param>
 <param name="IncludeNumericCharacters">Are numeric characters allowed? E.g: 1234567890</param>
 <param name="IncludeAlphabeticalCapsCharacters">Are capital letters allowed?</param>
 <param name="IncludeAlphabeticalLowercaseCharacters">Are lower case letters allowed?</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.Password.CreateRandomEasyPassword(System.Int32,System.String)">
 <summary>
 Creates a random password with easy to read letters and no ambiguous characters like {0 O} or {l I 1} etc. 
 </summary>
</member>
<member name="T:Singular.Misc.Password.PasswordChecker">
 <summary>
 Provides functions that help check if a password complies to specified password rules. Such as minimum length, character / numeric requirements etc.
 </summary>
 <remarks>Passwords</remarks>
</member>
<member name="M:Singular.Misc.Password.PasswordChecker.#ctor(System.Int32)">
 <summary>
 Creates a simple password checker that only checks minimum length.
 </summary>
 <param name="MinLength">minimum length of the password</param>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.Password.PasswordChecker.CheckPassword(System.String)">
 <summary>
 Checks that the specified password complies to the rules specified. 
 </summary>
 <param name="Password"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Singular.Misc.IDNumber">
 <summary>
 Contains methods to help with extracting gender and birth date data from a South African ID Number, as well as validating an ID Number.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.IDNumber.GetControlDigit(System.String)">
 <summary>
 Calculates the control digit (The 13th number) of the ID Number, for comparison with the actual 13th number, to check if the ID No is valid.
 </summary>
 <param name="IdNo"></param>
 <returns></returns>
 <remarks>ID No ID Number</remarks>
</member>
<member name="M:Singular.Misc.IDNumber.TrySetBirthDateFromIDNumber(Csla.SmartDate@,System.String)">
 <summary>
 Will attempt to set the given BirthDate to the birth date from to the ID Number
 </summary>
 <param name="BirthDate"></param>
 <param name="IDNumber"></param>
 <returns>True if the set was successful and value changed, False if unsuccessful</returns>
 <remarks>Changed Jan 2011 by Marlborough to not duplicate code from GetBirthDateFromIDNumber()</remarks>
</member>
<member name="M:Singular.Misc.IDNumber.TrySetGenderFromIDNumber(System.Object@,System.String,System.Object,System.Object)">
 <summary>
 Will attempt to set the Gender from the given ID Number
 </summary>
 <param name="Gender"></param>
 <param name="IDNumber"></param>
 <param name="Male"></param>
 <param name="Female"></param>
 <returns>True if the set was successful and value changed, False if unsuccessful</returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.IDNumber.GetBirthDateFromIDNumber(System.String,System.Int32)">
 <summary>
 Will try and return a new SmartDate containing the birthdate of the ID number
 If this is not possible an empty SmartDate will be returned
 </summary>
 <param name="IDNumber"></param>
 <returns></returns>
 <remarks>Changed Jan 2011 by Marlborough</remarks>
</member>
<member name="M:Singular.Misc.IDNumber.GetGenderFromIDNumber(System.String,System.Object,System.Object)">
 <summary>
 Gets the Gender from the passed in ID Number.
 </summary>
 <param name="IDNumber">The ID Number to extract the gender from.</param>
 <param name="Male">How does your business object store Male?</param>
 <param name="Female">How does your business object store Female?</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.IDNumber.ValidIDNumber(System.String,System.String@,System.Boolean)">
 <summary>
 Checks if an ID Number is valid by checking the length, if there are alphabet characters, if the birth date is valid, and if the check digit is correct.
 </summary>
 <param name="IDNumber">The ID Number to check</param>
 <param name="Errors">Any errors with the ID Number will be written to this string.</param>
 <param name="NonSouthAfrican">Are you checking non South African ID Numbers? This will affect the validation.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.IDNumber.IDNoMatchesBirthDate(System.String,System.Object)">
 <summary>
 Checks to see whether a given Birth Date corresponds to a given ID Number.
 </summary>
 <param name="IDNumber">The ID Number to compare.</param>
 <param name="BirthDate">The Birth Date to compare.</param>
 <returns>True or false depending on the comparison result.</returns>
 <author>Mark van Dyk</author>
 <created>2011-01-18</created>
 <remarks>Changed 19 Jan 2011 by Marlborough</remarks>
</member>
<member name="T:Singular.Misc.CompanyTrustNos">
 <summary>
 Contains methods for validating Company Registration Numbers and Trust Numbers.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.Misc.TaxRefNo.IsTaxRefNoValid(System.String,System.Boolean,System.String@)">
 <summary>
 Checks if a SARS Tax Ref No is valid using the modulus 10 check.
 </summary>
 <param name="TaxRefNo">The Ref No to be checked.</param>
 <param name="StripGroupingCharacters">If this function must ignore grouing characters such as / and -.</param>
 <param name="Errors">Description of what is wrong.</param>
</member>
<member name="M:Singular.Misc.Numbers.BaseXEncode(System.Int64,System.Byte)">
 <summary>
 Converts from base 10 to some other base. Max base is 62. Encode characters start with numbers then upper case, then lower case.
 </summary>
 <param name="Value">The number to encode</param>
 <param name="Base">The base to encode to (max 62)</param>
</member>
<member name="M:Singular.Misc.Numbers.BaseXDecode(System.String,System.Byte)">
 <summary>
 Converts from base x to base 10. Encoded string must have been generated using EncodeChars using the same base.
 </summary>
 <param name="Value">The encoded string in base x.</param>
 <param name="Base">The base the string is encoded in.</param>
</member>
<member name="P:Singular.Message.FadeAfter">
 <summary>
 Time in milliseconds to wait until the message fades out. 0 or less means dont fade.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.TypeInfo.ServerOnly">
 <summary>
 If this class has a serveronly attribute on it.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.TypeInfo.ReadOnlyList">
 <summary>
 If this type is a readonly collection
 </summary>
</member>
<member name="P:Singular.ReflectionCached.TypeInfo.IsBusinessObject">
 <summary>
 If this type inherits from SingularBusinessBase. E.g. it can save data.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.TypeInfo.GenericArgumentCount">
 <summary>
 How many generic arguments this type has.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.TypeInfo.LastGenericType">
 <summary>
 The last generic type, usefull to determine the type of items in a list.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.TypeInfo.IsEnumerable">
 <summary>
 True if this is a collection of items that can be iterated.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.TypeInfo.SerialisedType">
 <summary>
 The general type of data object this is.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.TypeInfo.ProtectedKeySalt">
 <summary>
 The primary key of this type will be encrypted using this name as a salt. This is set to the type name by default.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.TypeInfo.AdditionalInfo">
 <summary>
 Any info other parts of the library need to store about a type.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.CachedMemberInfo.OnType">
 <summary>
 The Type this property belongs to, not the property return type
 </summary>
</member>
<member name="P:Singular.ReflectionCached.CachedMemberInfo.MemberInfo">
 <summary>
 The System.Reflection.MemberInfo this is based on.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.CachedMemberInfo.IsProperty">
 <summary>
 True if this is a property, false if its a method.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.CachedMemberInfo.BackingField">
 <summary>
 The CSLA.PropertyInfo linked to this property.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.CachedMemberInfo.PropertyName">
 <summary>
 Property name defined in code.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.CachedMemberInfo.DisplayName">
 <summary>
 Display name returned by Singular.Reflection.DisplayName
 </summary>
</member>
<member name="P:Singular.ReflectionCached.CachedMemberInfo.DefaultValue">
 <summary>
 Default value declared in a DefaultValue attribute, or in CSLA registerproperty method.
 </summary>
</member>
<member name="P:Singular.ReflectionCached.CachedMemberInfo.HasJSGetExpression">
 <summary>
 True if this property defines Javascript code for its get accessor.
 </summary>
</member>
<member name="M:Singular.Reflection.GetDescription(System.Reflection.PropertyInfo)">
 <summary>
 Gets the description of the property from the properties attributes in the following order: LocalisedDisplayAttribute >  Display attribute
 </summary>
 <param name="PropertyInfo"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Reflection.GetEnumDisplayName(System.Object)">
 <summary>
 Gets the Description of an Enum. First checks if there is a Description attribute on the enum item, otherwise returns the readable name.
 </summary>
</member>
<member name="M:Singular.Reflection.GetEnumArray(System.Type)">
 <summary>
 Returns an list of EnumItem with the values, display and descriptions (using the System.ComponentModel.Description attribute) of the enumeration.
 Also sorts the list if the items have the Singular.DataAnnotations.Order attribute on them.
 </summary>
</member>
<member name="M:Singular.Reflection.AutoGenerateField(System.Reflection.PropertyInfo)">
 <summary>
 Returns true if the Property Should be Displayed in the UI.
 Checks the Display:AutoGenerateField, and Browsable Attributes. Differs from CanSerialiseField in that AutoGenerateField overrides browsable.
 </summary>
</member>
<member name="M:Singular.Reflection.CanSerialiseField(System.Reflection.PropertyInfo)">
 <summary>
 Returns true if the Property Should be serialised into other formats. Or e.g. if the property should be added to a generated javascript object.
 Checks the Display:AutoGenerateField, and Browsable Attributes. Differs from AutoGenerateField in that browsable overrides AutoGenerateField.
 </summary>
</member>
<member name="M:Singular.Reflection.GetDefaultValue(System.Reflection.PropertyInfo,System.Boolean,System.Object@)">
 <summary>
 Tries to get the Default Value of a Property by:
 a) Looking at the DefaultValueAttribute if there is one.
 b) Looking at the CLSA.PropertyInfo Field attached to the Property.
 c) Creating an Instance of the Object and Getting the initial Value, if CreateInstance is True.
 </summary>
 <remarks>B.Marlborough Apr 2012</remarks>
</member>
<member name="M:Singular.Reflection.GetGenericArgumentCount(System.Type)">
 <summary>
 Returns the no of generic arguments of the first generic type. Zero if the type, and none of its parents are not generic.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Reflection.GetLastGenericType(System.Type)">
 <summary>
 If the Type is generic, this will return the last generic type. E.g. if you want to know a 'List(of User)' contains objects of type 'User'.
 </summary>
</member>
<member name="M:Singular.Reflection.GetTypeFullName(System.Type)">
 <summary>
 Gets the type name and assembly name without the culture and version info.
 </summary>
</member>
<member name="M:Singular.Reflection.MethodHasParameters(System.Reflection.MethodInfo)">
 <summary>
 Returns true if the method has REQUIRED parameters. e.g. GetList(optional ID as Integer = 0) will return false.
 </summary>
 <param name="Method"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Reflection.InvokeMethod(System.Reflection.MethodInfo,System.Object)">
 <summary>
 Invokes a method, and will fill in optional parameters with the default values.
 </summary>
</member>
<member name="M:Singular.Reflection.GetPropertyFromList(System.Type,System.String)">
 <summary>
 Gets the Property Info from the type that the list contains.
 </summary>
</member>
<member name="M:Singular.Reflection.GetProperty(System.Type,System.String)">
 <summary>
 Gets the Property Info using the Public or Instance Binding.
 </summary>
</member>
<member name="M:Singular.Reflection.GetProperty(System.Type,System.Type)">
 <summary>
 Gets the first Property Info where the property type matches the Given Type.
 </summary>
</member>
<member name="M:Singular.Reflection.GetPropertyValueWithSet(System.Object,System.String)">
 <summary>
 Gets a value from a property. If the value is null, an object of the property type is created, and the property is set with this value.
 </summary>
</member>
<member name="M:Singular.Reflection.GetRegisteredProperties(System.Type)">
 <summary>
 Returns all the Csla.IPropertyInfo's that were registered on this type.
 </summary>
</member>
<member name="M:Singular.Reflection.TryCreateInstance(System.Type)">
 <summary>
 Tries to create an instance of a type using the parameterless constructor.
 Returns nothing if there is no parameterless constructor, or an error occured.
 </summary>
</member>
<member name="M:Singular.Reflection.FetchList(System.Type,System.Object)">
 <summary>
 Fetches the csla list with an empty criteria object. Note: Calls DataPortal.fetch(of type), not List.GetList
 </summary>
</member>
<member name="M:Singular.Reflection.GetMember``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
 <summary>
 Gets the Property Info from a Linq Expression.
 </summary>
</member>
<member name="M:Singular.Strings.StripTags(System.String)">
 <summary>
 This function will remove markup tags from text
 </summary>
 <param name="HTML"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Strings.AddOrdinal(System.Int32)">
 <summary>
 Adds th, st, nd etc to a number. Eg. 1st 2nd 3rd
 </summary>
</member>
<member name="M:Singular.Strings.LimitLines(System.String,System.Int32,System.Boolean)">
 <summary>
 Limits the number of lines of the given Text to Lines (can end with an ellipses '...')
 </summary>
 <param name="Text"></param>
 <param name="Lines"></param>
 <param name="LastLineAsEllipses"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Strings.Indent(System.String,System.Int32)">
 <summary>
 Indents the given Text by the number of Tabs
 </summary>
 <param name="Text"></param>
 <param name="Tabs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Strings.Concat(System.String,System.String[])">
 <summary>
 Concatenates a list of string, seperating the words with a seperator. Blank words are ignored.
 </summary>
</member>
<member name="M:Singular.Strings.Join(System.String,System.Boolean,System.Boolean,System.Object[])">
 <summary>
 Joins the specified strings together using the supplied seperator.
 </summary>
 <param name="Seperator">How to seperate the strings. E.G, a space or a new line after each string.</param>
 <param name="IncludeBlank">True if blank strings must be added to the joined string.</param>
 <param name="SeperateBlank">True if the seperator must be added after blank strings.</param>
 <param name="Strings">The strings to join together.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Strings.Pluralize(System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
 <summary>
 This function will make a number together with a noun sound more correct
 Eg. No Days, 1 Day, 2 Days
 </summary>
 <param name="Number">The number concerned</param>
 <param name="WordToPluralizeWithoutS">The word (without the s)</param>
 <param name="CapitaliseNo">Indicate whether No should be capitalised</param>
 <param name="NoNumberWhen1">Indicates whether the number should be left out if the number is 1</param>
 <param name="NoNumberEver">Indicates whether the number should be left out</param>
 <param name="NumberFormat">How the number will be formatted</param>
 <param name="WordsEndingWithY_ToEndWithIES">To end with ies instead of ys (e.g. 2 Berries, 2 Bays)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Strings.ToTitleCase(System.String)">
 <summary>
 Converts a string to Title Case:
 hello -> Hello, HELLO -> Hello, HelLO -> Hello, two words -> Two Words
 </summary>
 <param name="str">The String to convert</param>
 <returns></returns>
 <remarks>Marlborough March 2010</remarks>
</member>
<member name="M:Singular.Strings.Pad(System.String,System.String,System.Int32)">
 <summary>
 Pads left if PadChar is "0", otherwise Pads to the right
 </summary>
</member>
<member name="M:Singular.Strings.Similar(System.String,System.String)">
 <summary>
 Returns true if the String 1 is contained in String 2, or if String 2 is contained in String 1 (Trimmed and Ignoring case)
 </summary>
 <param name="String1"></param>
 <param name="String2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Strings.Delimit(System.String@,System.String,System.String)">
 <summary>
 Useful when you need to make a list of strings and separate them with a delimiter.
 </summary>
 <param name="Text">The text you will end up with</param>
 <param name="AppendString">The current item to append.</param>
 <param name="Delimiter">The text to go between each item.</param>
</member>
<member name="M:Singular.Strings.MakeEmptyDBNull(System.Object)">
 <summary>
 Converts and empty string, nothing or dbnull to dbnull, otherwise returns the string
 </summary>
 <param name="Text"></param>
 <returns></returns>
 <remarks>Andrew C changed 'Text As String' to 'Text as Object'. Function would break if we passed DBNull.Value in.
 24 Nov 2010 - Marlborough changed it so that if a non text datatype is passed in it will work the same as before Andrews change.</remarks>
</member>
<member name="M:Singular.Strings.Left(System.String,System.Int32)">
 <summary>
 Like SQL Left(), use if you want to make sure a string is up to a certain length
 </summary>
</member>
<member name="M:Singular.Strings.Right(System.String,System.Int32)">
 <summary>
 Like SQL Right(), use if you want to make sure a string is up to a certain length
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.DynamicDropDownList.DatabaseSchema">
 <summary>
 Sets the database schema that contains dynamic drop down stored procs.
 </summary>
</member>
<member name="M:Singular.Reporting.Dynamic.DynamicDropDownList.AddDropDown(System.String,Singular.DataAnnotations.DropDownWeb,System.String)">
 <summary>
 Adds dropdown info for use with dynamic reports.
 </summary>
 <param name="Name">The name to appear in the dynamic reports setup screen.</param>
 <param name="DropDownInfo">The information about the drop down. Specify as you would on a drop down property.</param>
 <param name="DefaultParameterName">The parameter name that usually requires this drop down. E.g. BranchID will always require a Branch drop down.</param>
</member>
<member name="P:Singular.Reporting.Dynamic.Report.DynamicReportID">
 <summary>
 Gets the Dynamic Report value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.Report.DynamicReportGroupID">
 <summary>
 Gets the Dynamic Report Group value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.Report.DisplayName">
 <summary>
 Gets and sets the Display Name value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.Report.Description">
 <summary>
 Gets and sets the Description value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.Report.StoredProcedureName">
 <summary>
 Gets and sets the Stored Procedure Name value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.Report.QueryText">
 <summary>
 Gets and sets the Query Text value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.Report.SortOrder">
 <summary>
 Gets and sets the Sort Order value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.Report.SecurityRole">
 <summary>
 Gets and sets the Security Role value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.Report.AutoGeneratedInd">
 <summary>
 Gets the Auto Generated value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportGroup.DynamicReportGroupID">
 <summary>
 Gets the Dynamic Report Group value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportGroup.GroupName">
 <summary>
 Gets and sets the Group Name value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportGroup.SortOrder">
 <summary>
 Gets and sets the Sort Order value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportGroup.SecurityRole">
 <summary>
 Gets and sets the Security Role value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.DynamicReportParameterID">
 <summary>
 Gets the Dynamic Report Parameter value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.DynamicReportID">
 <summary>
 Gets the Dynamic Report value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.ParameterName">
 <summary>
 Gets and sets the Parameter Name value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.DisplayName">
 <summary>
 Gets and sets the Display Name value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.DropDownSource">
 <summary>
 Gets and sets the Drop Down Source value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.RequiredInd">
 <summary>
 Gets and sets the Required value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.DataType">
 <summary>
 Gets and sets the Data Type value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.Visible">
 <summary>
 Gets and sets the Required value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.DefaultValue">
 <summary>
 Gets and sets the Required value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.DefinedDefaultValue">
 <summary>
 Gets and sets the Required value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ReportParameter.DefaultType">
 <summary>
 Gets and sets the Required value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ROParameter.DisplayName">
 <summary>
 Gets the Display Name value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ROParameter.DropDownSource">
 <summary>
 Gets the Drop Down Source value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ROParameter.RequiredInd">
 <summary>
 Gets the Required value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ROReportSource.SourceType">
 <summary>
 Gets the SourceType value
 </summary>
</member>
<member name="P:Singular.Reporting.Dynamic.ROReportSource.SourceName">
 <summary>
 Gets the ID value
 </summary>
</member>
<member name="M:Singular.Reporting.DynamicReports.DynamicDropDownList.AddDropDown(System.String,Singular.DataAnnotations.DropDownWeb,System.String)">
 <summary>
 Adds dropdown info for use with dynamic reports.
 </summary>
 <param name="Name">The name to appear in the dynamic reports setup screen.</param>
 <param name="DropDownInfo">The information about the drop down. Specify as you would on a drop down property.</param>
 <param name="DefaultParameterName">The parameter name that usually requires this drop down. E.g. BranchID will always require a Branch drop down.</param>
</member>
<member name="F:Singular.Reporting.GridInfo.GetDataTransform">
 <summary>
 Data transform function. Use this if you want to remove tables from the dataset or modify data / schema.
 </summary>
</member>
<member name="P:Singular.Reporting.PDFReportSettings.MainHeaderStyle">
 <summary>
 Main Heading at the top of the report. Usually report name
 </summary>
</member>
<member name="P:Singular.Reporting.PDFReportSettings.SubHeaderStyle">
 <summary>
 Sub Heading at the top of the report. Usually report criteria.
 </summary>
</member>
<member name="P:Singular.Reporting.PDFReportSettings.NormalStyle">
 <summary>
 Normal text of data in the report. 
 </summary>
</member>
<member name="P:Singular.Reporting.PDFReportSettings.SmallStyle">
 <summary>
 Small text like page numbers, print date etc.
 </summary>
</member>
<member name="P:Singular.Reporting.PDFReportSettings.Orientation">
 <summary>
 Orientation of the pages in the report. By default, the number of columns in the data will determine whether the report is portrait or landscape. 
 </summary>
</member>
<member name="P:Singular.Reporting.PDFReportSettings.ColumnPadding">
 <summary>
 Padding left and right for cells.
 </summary>
</member>
<member name="P:Singular.Reporting.PDFReport.SectionTitles">
 <summary>
 If the dataset has more than 1 root table, and you want each table to appear in the report, specify the extra page headings here.
 </summary>
</member>
<member name="P:Singular.Reporting.PDFReport.Settings">
 <summary>
 Gets the settings for this instance.
 </summary>
 <returns></returns>
</member>
<member name="P:Singular.Reporting.PDFReport.GlobalSettings">
 <summary>
 Gets the global report settings. All reports will be created with these settings.
 </summary>
 <returns></returns>
</member>
<member name="T:Singular.Reporting.IStandAloneReport">
 <summary>
 Put this interface on your report if you need to show it on the reports screen (to allow criteria selection), but dont want it in the main reports menu.
 </summary>
</member>
<member name="P:Singular.Reporting.ReportBase`1.ReportName">
 <summary>
 Name of Report.
 </summary>
</member>
<member name="P:Singular.Reporting.ReportBase`1.ReportURL">
 <summary>
 When clicking on the report menu item, a new window will be opened at the url specified.
 </summary>
</member>
<member name="M:Singular.Reporting.ReportBase`1.SetupCommandProc(Singular.CommandProc)">
 <summary>
 Use this to set the name of the sql command. The parameters are set automatically.
 </summary>
</member>
<member name="P:Singular.Reporting.ReportBase`1.CrystalReportType">
 <summary>
 Override this if your report has a crystal report. 
 </summary>
</member>
<member name="P:Singular.Reporting.ReportBase`1.ShowTotalsRow">
 <summary>
 Override this if your report must not have a Totals Row. 
 </summary>
</member>
<member name="M:Singular.Reporting.ReportBase`1.ModifyDataSet(System.Data.DataSet)">
 <summary>
 Override if you want to change any data / structure of the dataset.
 </summary>
</member>
<member name="M:Singular.Reporting.ReportBase`1.ResetData">
 <summary>
 Forces the data to be re-fetched the next time the report is shown.
 </summary>
</member>
<member name="P:Singular.Reporting.ReportBase`1.DataSourceIsOutOfDate">
 <summary>
 Indicates that the data source in the crystal report does not match the data source returned from the database.
 New columns and tables wont trigger this, only if the crystal report is missing a field, or the field type is different.
 </summary>
</member>
<member name="M:Singular.Reporting.ReportBase`1.GetAsDocument(Singular.Reporting.ReportDocumentType)">
 <summary>
 Fetches the report dataset if needed, sets up the crystal report, and returns it as a pdf file in a memory stream
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Reporting.ReportBase`1.GetAsMultipleFiles(Singular.Reporting.ReportDocumentType,System.String,System.Func{System.Data.DataSet,System.Data.DataColumn},System.Func{System.Data.DataRow,System.String,System.String})">
 <summary>
 Executes the stored proc for the current criteria, and creates multiple documents based on the group value in GetGroupColumnSelector. 
 A zip file containing a document per group is returned.
 </summary>
 <param name="DocumentType">Type of file to create</param>
 <param name="ZipFileName">Name of Zip file including / excluding extension.</param>
 <param name="GetGroupColumnSelector">Return the column that contains the values you want to split by.</param>
 <param name="GetFileName">Return the file name based on the group. Function is run for each group. Current row, and group value is passed in.</param>
</member>
<member name="M:Singular.Reporting.ReportBase`1.GetAsMultipleFiles(Singular.Reporting.ReportDocumentType,System.Func{System.Data.DataSet,System.Data.DataColumn},System.Func{System.Data.DataRow,System.String,System.String})">
 <summary>
 Executes the stored proc for the current criteria, and creates multiple documents based on the group value in GetGroupColumnSelector. 
 A List of documents is returned.
 </summary>
 <param name="DocumentType">Type of file to create</param>
 <param name="GetGroupColumnSelector">Return the column that contains the values you want to split by.</param>
 <param name="GetFileName">Return the file name based on the group. Function is run for each group. Current row, and group value is passed in.</param>
</member>
<member name="M:Singular.Reporting.ReportBase`1.GetAsMultipleFiles(Singular.Reporting.ReportDocumentType,System.Func{System.Data.DataSet,System.Data.DataColumn},System.Action{System.IO.MemoryStream,System.Data.DataRow,System.String})">
 <summary>
 Executes the stored proc for the current criteria, and creates multiple documents based on the group value in GetGroupColumnSelector. 
 The OnDocumentCreated callback is executed for each document created.
 </summary>
 <param name="DocumentType">Type of file to create</param>
 <param name="GetGroupColumnSelector">Return the column that contains the values you want to split by.</param>
 <param name="OnDocumentCreated">Callback with the document data, grouped row, and group value.</param>
</member>
<member name="M:Singular.Reporting.ReportBase`1.GetDataSetSchemaFile">
 <summary>
 Returns the schema definition of the data source
 </summary>
</member>
<member name="F:Singular.Reporting.ReportCriteria.ToStringExpression">
 <summary>
 ToString Override for Web
 </summary>
</member>
<member name="M:Singular.Reporting.ReportFunctions.GetCrystalReportDataType(System.Type)">
 <summary>
 Maps Dot Net types to Crystal Report Field Types.
 </summary>
</member>
<member name="M:Singular.Reporting.ReportFunctions.RegisterReportForDisposal(CrystalDecisions.CrystalReports.Engine.ReportClass)">
 <summary>
 Keeps track of the report, and when the job limit is exceeded, disposes the report if it hasn't been disposed already.
 </summary>
</member>
<member name="P:Singular.Reporting.ReportFunctions.ProjectReportHierarchy">
 <summary>
 The Project specific report Report Hierarchy your UI is using.
 </summary>
</member>
<member name="M:Singular.Reporting.ReportFunctions.FindAllReports">
 <summary>
 Creates a hash code for all reports in the report assembly. Used on web to hide the report assembly names from the user.
 </summary>
</member>
<member name="T:Singular.Reporting.ReportHierarchy">
 <summary>
 Allows the Report Menu structure to be created.
 </summary>
</member>
<member name="P:Singular.Reporting.ReportHierarchy.DefaultGroupName">
 <summary>
 By default, dynamic reports that don't have meta data are added to a group with the same name as the schema of the stored proc.
 You can override the name for uncategorised reports with this property.
 </summary>
</member>
<member name="P:Singular.Reporting.ReportHierarchy.AlwaysFetchDynamicReports">
 <summary>
 Always get the list of dynamic reports from the database. Otherwise the reports must be refreshed by going to the dynamic report setup screen.
 </summary>
</member>
<member name="M:Singular.Reporting.MainSection.IsAllowed">
 <summary>
 Checks if the user has access to this section, and if the sub sections have at least 1 item.
 </summary>
</member>
<member name="P:Singular.Web.SGridInfo.GridOptions.RowColorFunction">
 <summary>
 JS function that will return a color to conditionally color rows. return null for default. Fn(RowInfo, IsAlt, OrigColor)
 </summary>
</member>
<member name="P:Singular.Web.SGridInfo.GridOptions.DataTransformFunction">
 <summary>
 JS Function to modify the data. Fn(Data, Schema, Options)
 </summary>
</member>
<member name="P:Singular.Web.SGridInfo.GridOptions.AutoHeightFunction">
 <summary>
 JS function that will return the window height less x height in order for the page to fill the screen
 </summary>
</member>
<member name="P:Singular.Web.SGridInfo.GridOptions.StyleGridFunction">
 <summary>
 JS Function to set default grid styles
 </summary>
</member>
<member name="P:Singular.Web.SGridInfo.GridOptions.ContextMenuFunction">
 <summary>
 JS Function to allow context menu items to be created. Fn(ClickedElement, MenuItemsArray)
 </summary>
</member>
<member name="P:Singular.Web.SGridInfo.GridOptions.FetchDataOnLoad">
 <summary>
 Set this to false if you don't want the data to be fetched on page load, and will call Property().FetchData manually.
 </summary>
</member>
<member name="P:Singular.Web.SGridInfo.GridOptions.GetArgumentsFunction">
 <summary>
 Function that will return an object with arguments to pass to the server.
 </summary>
</member>
<member name="P:Singular.Web.SGridInfo.GridOptions.AfterLayoutFunction">
 <summary>
 Called when the grid has created its bands initially, and whenever a group is created / removed. Fn(Grid, ChangedBand, IsAdding)
 </summary>
</member>
<member name="P:Singular.Web.Data.JS.JSSerialiser.ProtectKeyProperties">
 <summary>
 When true, encrypts properties that have a Key attribute, so that the key cannot be changed on the client.
 </summary>
</member>
<member name="P:Singular.Web.Data.JS.JSSerialiser.IsInitial">
 <summary>
 Indicates that this is an inital request for data, e.g. a full page load, not an ajax request.
 This is for non stateless ViewModels.
 </summary>
</member>
<member name="M:Singular.Web.Data.JS.ObjectInfo.Member.PreRenderModel(Singular.Web.Utilities.JavaScriptWriter)">
 <summary>
 Checks if the property has its own get expression, and renders it. Returns true if the caller must carry on with rendering.
 </summary>
</member>
<member name="F:Singular.Web.Data.JS.ObjectInfo.PropertyHelper.WritesData">
 <summary>
 If this property writes JSON data.
 </summary>
</member>
<member name="T:Singular.Web.Data.JS.SchemaDefinitionList">
 <summary>
 A lightweight version of Type Definition
 </summary>
</member>
<member name="M:Singular.Web.Data.JSonWriter.SerialiseObject(System.Object,System.String,System.Nullable{System.Boolean},Singular.Web.Data.OutputType,System.Boolean)">
 <summary>
 Serialises an object into JSON
 </summary>
 <param name="List">List or object</param>
 <param name="Context">optional Context</param>
 <param name="RenderGuids">Should the objects GUIDs be included in the rendered JSON</param>
 <param name="Output">Output the object as JSON or Javascript</param>
 <param name="FullRender">Must properties marked with InitialDataOnly be rendered.</param>
</member>
<member name="T:Singular.Web.Utilities.JavascriptMethod">
 <summary>
 Allows a custom JavaScript function to be attached to the business object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Singular.Web.JSonString">
 <summary>
 Applying this attribute on a string property indicates that the string already contains JSON data. It wont be re serialised into JSon.
 Applying it on a parameter indicates that the string version of the json object should be passed in.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Singular.Web.WebDataAllowed">
 <summary>
 Specifies that this class can be used directly from javascript. This is only for authenticated users unless otherwise specified.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Singular.Security.SecurityGroupBase`1.SecurityGroupID">
 <Summary>
 Gets the Security Group value
 </Summary>
</member>
<member name="P:Singular.Security.SecurityGroupBase`1.SecurityGroup">
 <Summary>
 Gets and sets the Security Group value
 </Summary>
</member>
<member name="P:Singular.Security.SecurityGroupBase`1.Description">
 <Summary>
 Gets and sets the Description value
 </Summary>
</member>
<member name="P:Singular.Security.UserBase`1.UserID">
 <Summary>
 Gets the User value
 </Summary>
</member>
<member name="P:Singular.Security.UserBase`1.FirstName">
 <Summary>
 Gets and sets the First Name value
 </Summary>
</member>
<member name="P:Singular.Security.UserBase`1.Surname">
 <Summary>
 Gets and sets the Surname value
 </Summary>
</member>
<member name="P:Singular.Security.UserBase`1.LoginName">
 <Summary>
 Gets and sets the Login Name value
 </Summary>
</member>
<member name="P:Singular.Security.UserBase`1.PasswordChangeDate">
 <Summary>
 Gets and sets the Password Change Date value
 </Summary>
</member>
<member name="P:Singular.Security.UserBase`1.EmailAddress">
 <Summary>
 Gets and sets the Email Address value
 </Summary>
</member>
<member name="P:Singular.Security.UserBase`1.CreatedBy">
 <Summary>
 Gets the Created By value
 </Summary>
</member>
<member name="P:Singular.Security.UserBase`1.CreatedDate">
 <Summary>
 Gets the Created Date value
 </Summary>
</member>
<member name="P:Singular.Security.IdentityBase`1.UserID">
 <summary>
 The Database ID of the User
 </summary>
</member>
<member name="P:Singular.Security.IdentityBase`1.UserNameReadable">
 <summary>
 The Full Name of the User
 </summary>
</member>
<member name="P:Singular.Security.IdentityBase`1.IsAdministrator">
 <summary>
 Indicates that the user is an administrator.
 </summary>
</member>
<member name="P:Singular.Security.IdentityBase`1.PasswordChangedDate">
 <summary>
 Password last changed on this date.
 </summary>
</member>
<member name="M:Singular.Security.IdentityBase`1.MakeServiceUser(System.Int32)">
 <summary>
 Creates an identity for use with services, where there is not an app user that logs in.
 </summary>
</member>
<member name="P:Singular.Security.IdentityCriterea.AuthTicketUserData">
 <summary>
 User data from the forms auth cookie. Set Singular.Security.DecryptCookie = True for this to be set.
 </summary>
 <returns></returns>
</member>
<member name="P:Singular.Security.ROSecurityRole.SecurityRoleID">
 <Summary>
 Gets the ID value
 </Summary>
</member>
<member name="P:Singular.Security.ROSecurityRole.SectionName">
 <Summary>
 Gets the Section Name value
 </Summary>
</member>
<member name="P:Singular.Security.ROSecurityRole.SecurityRole">
 <Summary>
 Gets the Security Role value
 </Summary>
</member>
<member name="P:Singular.Security.ROSecurityRole.Description">
 <Summary>
 Gets the Description value
 </Summary>
</member>
<member name="P:Singular.Security.ROSecurityRoleHeader.SectionName">
 <Summary>
 Gets the ID value
 </Summary>
</member>
<member name="P:Singular.Security.SecurityGroupRole.SecurityGroupRoleID">
 <Summary>
 Gets the Security Group Role value
 </Summary>
</member>
<member name="P:Singular.Security.SecurityGroupRole.SecurityGroupID">
 <Summary>
 Gets the Security Group value
 </Summary>
</member>
<member name="P:Singular.Security.SecurityGroupRole.SecurityRoleID">
 <Summary>
 Gets and sets the Security Role value
 </Summary>
</member>
<member name="P:Singular.Security.SecurityGroupRole.IsSelected">
 <Summary>
 Gets and sets the Security Role value
 </Summary>
</member>
<member name="P:Singular.Security.SecurityGroupUser.SecurityGroupUserID">
 <Summary>
 Gets the Security Group User value
 </Summary>
</member>
<member name="P:Singular.Security.SecurityGroupUser.SecurityGroupID">
 <Summary>
 Gets and sets the Security Group value
 </Summary>
</member>
<member name="P:Singular.Security.SecurityGroupUser.UserID">
 <Summary>
 Gets the User value
 </Summary>
</member>
<member name="P:Singular.Security.PasswordPolicyDefinition.EncryptPassword">
 <summary>
 True if passwords are enrypted and not hashed.
 </summary>
</member>
<member name="M:Singular.Security.PrincipalBase`1.Login(System.String,System.String)">
 <summary>
 Tries to authenticate the user with the supplied password
 </summary>
 <remarks>Password must be encrypted</remarks>
</member>
<member name="P:Singular.Service.Scheduling.ROScheduleProgress.ScheduleProgressID">
 <Summary>
 Gets the Schedule Progress value
 </Summary>
</member>
<member name="P:Singular.Service.Scheduling.ROScheduleProgress.ScheduleInfoID">
 <Summary>
 Gets the Schedule Info value
 </Summary>
</member>
<member name="P:Singular.Service.Scheduling.ROScheduleProgress.Progress">
 <Summary>
 Gets the Progress value
 </Summary>
</member>
<member name="P:Singular.Service.Scheduling.ROScheduleProgress.CreatedDate">
 <Summary>
 Gets the Created Date value
 </Summary>
</member>
<member name="P:Singular.Service.Scheduling.ROScheduleProgress.Version">
 <Summary>
 Gets the Version value
 </Summary>
</member>
<member name="P:Singular.Service.ServiceModule.ServiceUpdateMode">
 <summary>
 Enable if changes to settings / commondata / service info from the main app must notify the service.
 </summary>
</member>
<member name="P:Singular.Service.ServiceModule.IsService">
 <summary>
 True if the current application is a service. Will be set by Servicebase.
 </summary>
</member>
<member name="F:Singular.Service.ServiceModule.ServiceUpdateOption.UseQueue">
 <summary>
 Uses the ServiceUpdateService and ServiceUpdateQueue to watch for messages.
 </summary>
</member>
<member name="F:Singular.Service.ServiceModule.ServiceUpdateOption.UseMessagesTable">
 <summary>
 Uses the ServerProgramMessages table to poll for messages.
 </summary>
</member>
<member name="P:Singular.Service.ServerProgramType.ServerProgramTypeID">
 <Summary>
 Gets the Server Program Type value
 </Summary>
</member>
<member name="P:Singular.Service.ServerProgramType.ServerProgramType">
 <Summary>
 Gets and sets the Server Program Type value
 </Summary>
</member>
<member name="P:Singular.Service.ServerProgramType.ActiveInd">
 <Summary>
 Gets and sets the Active value
 </Summary>
</member>
<member name="M:Singular.Encryption.GetEncryptedToken(System.String,System.String[])">
 <summary>
 Gets an enrpyted value using a salt. The salt should be unique for each use of this function, e.g. an objects GUID.
 </summary>
 <param name="Salt">The salt should be unique for each use of this function, e.g. an objects GUID.</param>
</member>
<member name="M:Singular.Encryption.TryDecryptToken(System.DateTime,System.String,System.String@)">
 <summary>
 Decrypts a token that was encrpyted with an expiry date.
 </summary>
 <param name="CurrentDate">The current date of the server that created the token. Use 'Now' in most cases</param>
</member>
<member name="P:Singular.CmdInsSecurityRole.SecurityRoleID">
 <Summary>
 Gets and sets the Security Group value
 </Summary>
</member>
<member name="P:Singular.CmdInsSecurityRole.Section">
 <Summary>
 Gets and sets the Security Group value
 </Summary>
</member>
<member name="P:Singular.CmdInsSecurityRole.Role">
 <Summary>
 Gets and sets the Security Group value
 </Summary>
</member>
<member name="P:Singular.CmdInsSecurityRole.Description">
 <Summary>
 Gets and sets the Security Group value
 </Summary>
</member>
<member name="M:Singular.Settings.TestConnection(System.Exception@)">
 <summary>
 Tests the default connection using the settings saved in the settings file
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Settings.TestConnection(System.Int32)">
 <summary>
 Tests the default connection using the settings saved in the settings file
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Settings.TestConnection">
 <summary>
 Tests the default connection using the settings saved in the settings file
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Settings.TestConnection(System.String)">
 <summary>
 Test the connection using the settings saved in the settings file for a particular section
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Settings.TestConnection(System.String,System.Int32)">
 <summary>
 Test the connection using the settings saved in the settings file for a particular section
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Settings.TestConnection(System.String,System.Exception@)">
 <summary>
 Test the connection using the settings saved in the settings file for a particular section
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Singular.Settings.TestConnection(System.String,System.Exception@,System.Int32)">
 <summary>
 Test the connection using the settings saved in the settings file for a particular section
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Singular.Settings.OverridingPath">
 <summary>
 Only use this if you really have to. Using "OverridingAppName" is better, as it will still use the normal windows app data path.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Singular.SystemSettings.Objects.SystemSetting.SystemSettingID">
 <summary>
 Gets the System Setting value
 </summary>
</member>
<member name="P:Singular.SystemSettings.Objects.SystemSetting.SystemSetting">
 <summary>
 Gets and sets the System Setting value
 </summary>
</member>
<member name="M:Singular.SystemSettings.Objects.SystemSettingList.PrepareToSave">
 <summary>
 Checks for differences in each system setting, and populates the system settings values list from the system setting class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Singular.SystemSettings.Objects.SystemSettingList.PopulateSettings(System.String)">
 <summary>
 Populates all registered settings classes.
 </summary>
</member>
<member name="M:Singular.SystemSettings.Objects.SystemSettingList.PopulateSettings(Singular.SystemSettings.ISettingsSection)">
 <summary>
 Populates the provided settings class.
 </summary>
</member>
<member name="M:Singular.SystemSettings.Objects.SystemSettingList.GetSystemSettingList``1">
 <summary>
 Populates the provided settings class with the settings in the database.
 </summary>
</member>
<member name="P:Singular.SystemSettings.Objects.SystemSettingValue.SystemSettingValueID">
 <summary>
 Gets the System Setting Value value
 </summary>
</member>
<member name="P:Singular.SystemSettings.Objects.SystemSettingValue.SystemSettingID">
 <summary>
 Gets the System Setting value
 </summary>
</member>
<member name="P:Singular.SystemSettings.Objects.SystemSettingValue.PropertyName">
 <summary>
 Gets and sets the Property Name value
 </summary>
</member>
<member name="P:Singular.SystemSettings.Objects.SystemSettingValue.PropertyValue">
 <summary>
 Gets and sets the Property Value value
 </summary>
</member>
<member name="P:Singular.SystemSettings.Objects.SystemSettingValue.IsEncrypted">
 <summary>
 Gets and sets the Property Value value
 </summary>
</member>
<member name="M:Singular.SystemSettings.General.GetAllSettings">
 <summary>
 Gets a list of all the registered system settings
 </summary>
</member>
<member name="M:Singular.SystemSettings.General.GetSystemSetting``1(System.Boolean,System.String)">
 <summary>
 Gets the specified system setting section.
 </summary>
</member>
<member name="M:Singular.SystemSettings.General.GetSettingValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
 <summary>
 Gets a setting value directly from the database, without fetching the entire settings class. Warning: Requires EXECUTE role on Fn Schema.
 </summary>
 <typeparam name="ST">Settings Class Type</typeparam>
 <param name="SettingProperty">Property to be fetched</param>
</member>
<member name="M:Singular.SystemSettings.SettingsSection`1.RegisterTransform(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Object},System.Func{System.Object})">
 <summary>
 Allows complex data types to be converted to a format supported by sql server.
 </summary>
 <param name="TargetProperty">The property to apply the transform to</param>
 <param name="LoadTransform">Convert when loading from the database. Parameter: Value from database</param>
 <param name="SaveTransform">Convert when saving to the database.</param>
 <remarks></remarks>
</member>
<member name="M:Singular.SystemSettings.SettingsSection`1.RegisterIDocumentProviderImageTransform(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Drawing.Imaging.ImageFormat)">
 <summary>
 Converts a file byte array to an image of the specified type. 
 </summary>
</member>
</members>
</doc>
