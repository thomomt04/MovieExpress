// Generated 18 Jan 2021 13:22 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Categories
{
  [Serializable]
  public class SubCategory
   : MEBusinessBase<SubCategory>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> SubCategoryIDProperty = RegisterProperty<int>(c => c.SubCategoryID, "ID", 0);
    /// <summary>
    /// Gets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key]
    public int SubCategoryID
    {
      get { return GetProperty(SubCategoryIDProperty); }
    }

    public static PropertyInfo<int> CategoryIDProperty = RegisterProperty<int>(c => c.CategoryID, "Category", 0);
    /// <summary>
    /// Gets the Category value
    /// </summary>
    // [Display(AutoGenerateField = false)] CommentThisOut
    public int CategoryID
    {
      get { return GetProperty(CategoryIDProperty); }
    }

    public static PropertyInfo<String> SubCategoryNameProperty = RegisterProperty<String>(c => c.SubCategoryName, "Sub Category Name", "");
    /// <summary>
    /// Gets and sets the Sub Category Name value
    /// </summary>
    [Display(Name = "Sub Category Name", Description = ""),
    StringLength(250, ErrorMessage = "Sub Category Name cannot be more than 250 characters")]
    public String SubCategoryName
    {
      get { return GetProperty(SubCategoryNameProperty); }
      set { SetProperty(SubCategoryNameProperty, value); }
    }

    public static PropertyInfo<String> SubCategoryDescriptionProperty = RegisterProperty<String>(c => c.SubCategoryDescription, "Sub Category Description", "");
    /// <summary>
    /// Gets and sets the Sub Category Description value
    /// </summary>
    [Display(Name = "Sub Category Decription", Description = ""),
    StringLength(250, ErrorMessage = "Sub Category Description cannot be more than 1250 characters")]
    public String SubCategoryDescription
    {
      get { return GetProperty(SubCategoryDescriptionProperty); }
      set { SetProperty(SubCategoryDescriptionProperty, value); }
    }

    public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", true);
    /// <summary>
    /// Gets and sets the Is Active value
    /// </summary>
    [Display(Name = "Is Active", Description = "Indicator showing if the Movie is Active"),
    Required(ErrorMessage = "Is Active required")]
    public Boolean IsActiveInd
    {
      get { return GetProperty(IsActiveIndProperty); }
      set { SetProperty(IsActiveIndProperty, value); }
    }

    public static PropertyInfo<DateTime?> DeletedDateProperty = RegisterProperty<DateTime?>(c => c.DeletedDate, "Deleted Date");
    /// <summary>
    /// Gets and sets the Deleted Date value
    /// </summary>
    [Display(Name = "Deleted Date", Description = "When this record was deleted")]
    public DateTime? DeletedDate
    {
      get
      {
        return GetProperty(DeletedDateProperty);
      }
      set
      {
        SetProperty(DeletedDateProperty, value);
      }
    }

    public static PropertyInfo<int> DeletedByProperty = RegisterProperty<int>(c => c.DeletedBy, "Deleted By", 0);
    /// <summary>
    /// Gets and sets the Deleted By value
    /// </summary>
    [Display(Name = "Deleted By", Description = "User that deleted the record")]
    public int DeletedBy
    {
      get { return GetProperty(DeletedByProperty); }
      set { SetProperty(DeletedByProperty, value); }
    }

    public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
    /// <summary>
    /// Gets the Created Date value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate CreatedDate
    {
      get { return GetProperty(CreatedDateProperty); }
    }

    public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
    /// <summary>
    /// Gets the Created By value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public int CreatedBy
    {
      get { return GetProperty(CreatedByProperty); }
    }

    public static PropertyInfo<SmartDate> ModifiedDateProperty = RegisterProperty<SmartDate>(c => c.ModifiedDate, "Modified Date", new SmartDate(DateTime.Now));
    /// <summary>
    /// Gets the Modified Date value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate ModifiedDate
    {
      get { return GetProperty(ModifiedDateProperty); }
    }

    public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
    /// <summary>
    /// Gets the Modified By value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public int ModifiedBy
    {
      get { return GetProperty(ModifiedByProperty); }
    }

    #endregion

    #region " Methods "

    public Category GetParent()
    {
      return (Category)((SubCategoryList)this.Parent).Parent;
    }

    protected override object GetIdValue()
    {
      return GetProperty(SubCategoryIDProperty);
    }

    public override string ToString()
    {
      if (this.SubCategoryName.Length == 0)
      {
        if (this.IsNew)
        {
          return String.Format("New {0}", "Sub Category");
        }
        else
        {
          return String.Format("Blank {0}", "Sub Category");
        }
      }
      else
      {
        return this.SubCategoryName;
      }
    }

    #endregion

    #endregion

    #region " Validation Rules "

    protected override void AddBusinessRules()
    {
      base.AddBusinessRules();
    }

    #endregion

    #region " Data Access & Factory Methods "

    protected override void OnCreate()
    {
      // This is called when a new object is created
      // Set any variables here, not in the constructor or NewSubCategory() method.
    }

    public static SubCategory NewSubCategory()
    {
      return DataPortal.CreateChild<SubCategory>();
    }

    public SubCategory()
    {
      MarkAsChild();
    }

    internal static SubCategory GetSubCategory(SafeDataReader dr)
    {
      var s = new SubCategory();
      s.Fetch(dr);
      return s;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      using (BypassPropertyChecks)
      {
        int i = 0;
        LoadProperty(SubCategoryIDProperty, sdr.GetInt32(i++));
        LoadProperty(CategoryIDProperty, sdr.GetInt32(i++));
        LoadProperty(SubCategoryNameProperty, sdr.GetString(i++));
        LoadProperty(SubCategoryDescriptionProperty, sdr.GetString(i++));
        LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
        LoadProperty(DeletedDateProperty, sdr.GetValue(i++));
        LoadProperty(DeletedByProperty, sdr.GetInt32(i++));
        LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
        LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
        LoadProperty(ModifiedDateProperty, sdr.GetSmartDate(i++));
        LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
      }

      MarkAsChild();
      MarkOld();
      BusinessRules.CheckRules();
    }

    protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
    {
      LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

      AddPrimaryKeyParam(cm, SubCategoryIDProperty);

      cm.Parameters.AddWithValue("@CategoryID", this.GetParent().CategoryID);
      cm.Parameters.AddWithValue("@SubCategoryName", GetProperty(SubCategoryNameProperty));
      cm.Parameters.AddWithValue("@IsActiveInd", GetProperty(IsActiveIndProperty));
      cm.Parameters.AddWithValue("@DeletedDate", Singular.Misc.NothingDBNull(DeletedDate));
      cm.Parameters.AddWithValue("@DeletedBy", GetProperty(DeletedByProperty));
      cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));

      return (scm) =>
      {
  // Post Save
  if (this.IsNew)
        {
          LoadProperty(SubCategoryIDProperty, scm.Parameters["@SubCategoryID"].Value);
        }
      };
    }

    protected override void SaveChildren()
    {
      // No Children
    }

    protected override void SetupDeleteCommand(SqlCommand cm)
    {
      cm.Parameters.AddWithValue("@SubCategoryID", GetProperty(SubCategoryIDProperty));
    }

    #endregion

  }

}