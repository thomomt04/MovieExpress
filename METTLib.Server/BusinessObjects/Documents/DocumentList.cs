// Generated 31 Jul 2020 10:51 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Documents
{
  [Serializable]
  public class DocumentList
   : MEBusinessListBase<DocumentList, Document>
  {
    #region " Business Methods "

    public Document GetItem(int DocumentID)
    {
      foreach (Document child in this)
      {
        if (child.DocumentID == DocumentID)
        {
          return child;
        }
      }
      return null;
    }

    public override string ToString()
    {
      return "Documents";
    }

    #endregion

    #region " Data Access "

    [Serializable]
    public class Criteria
      : CriteriaBase<Criteria>
    {
      public Criteria()
      {
      }

    }

    public static DocumentList NewDocumentList()
    {
      return new DocumentList();
    }

    public DocumentList()
    {
      // must have parameter-less constructor
    }

    public static DocumentList GetDocumentList()
    {
      return DataPortal.Fetch<DocumentList>(new Criteria());
    }

    protected void Fetch(SafeDataReader sdr)
    {
      this.RaiseListChangedEvents = false;
      while (sdr.Read())
      {
        this.Add(Document.GetDocument(sdr));
      }
      this.RaiseListChangedEvents = true;
    }

    protected override void DataPortal_Fetch(Object criteria)
    {
      Criteria crit = (Criteria)criteria;
      using (SqlConnection cn = new SqlConnection(Singular.Settings.ConnectionString))
      {
        cn.Open();
        try
        {
          using (SqlCommand cm = cn.CreateCommand())
          {
            cm.CommandType = CommandType.StoredProcedure;
            cm.CommandText = "GetProcs.getDocumentList";
            using (SafeDataReader sdr = new SafeDataReader(cm.ExecuteReader()))
            {
              Fetch(sdr);
            }
          }
        }
        finally
        {
          cn.Close();
        }
      }
    }

    #endregion

  }

}