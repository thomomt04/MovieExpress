// Generated 06 Feb 2018 14:01 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Document
{
	[Serializable]
	public class ExcelImportDocumentHeader
	 : MEBusinessBase<ExcelImportDocumentHeader>
	{
		#region " Properties and Methods "

		#region " Properties "

		public static PropertyInfo<int> ExcelImportDocumentHeaderIDProperty = RegisterProperty<int>(c => c.ExcelImportDocumentHeaderID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int ExcelImportDocumentHeaderID
		{
			get { return GetProperty(ExcelImportDocumentHeaderIDProperty); }
		}

		public static PropertyInfo<int?> ExcelImportDocumentIDProperty = RegisterProperty<int?>(c => c.ExcelImportDocumentID, "Excel Import Document", null);
		/// <summary>
		/// Gets the Excel Import Document value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int? ExcelImportDocumentID
		{
			get { return GetProperty(ExcelImportDocumentIDProperty); }
		}

		public static PropertyInfo<String> ExcelHeaderProperty = RegisterProperty<String>(c => c.ExcelHeader, "Excel Header", "");
		/// <summary>
		/// Gets the Excel Header value
		/// </summary>
		[Display(Name = "Excel Header", Description = ""),
		StringLength(150, ErrorMessage = "Excel Header cannot be more than 150 characters")]
		public String ExcelHeader
		{
			get { return GetProperty(ExcelHeaderProperty); }
		}

		public static PropertyInfo<String> CSLAPropertyProperty = RegisterProperty<String>(c => c.CSLAProperty, "CSLA Property", "");
		/// <summary>
		/// Gets the CSLA Property value
		/// </summary>
		[Display(Name = "CSLA Property", Description = ""),
		StringLength(150, ErrorMessage = "CSLA Property cannot be more than 150 characters")]
		public String CSLAProperty
		{
			get { return GetProperty(CSLAPropertyProperty); }
		}

		public static PropertyInfo<String> CSLAPropertyDefaultValueProperty = RegisterProperty<String>(c => c.CSLAPropertyDefaultValue, "CSLA Property", "");
		/// <summary>
		/// Gets the CSLA Property value
		/// </summary>
		[Display(Name = "CSLA Property Default Value", Description = ""),
		StringLength(150, ErrorMessage = "CSLA Property cannot be more than 150 characters")]
		public String CSLAPropertyDefaultValue
		{
			get { return GetProperty(CSLAPropertyDefaultValueProperty); }
		}


		public static PropertyInfo<bool> NotImportableIndProperty = RegisterProperty<bool>(c => c.NotImportableInd, "CSLA Property", 0);
		/// <summary>
		/// Gets the CSLA Property value
		/// </summary>
		[Display(Name = "Not Importable Ind", Description = "")]
		public bool NotImportableInd
		{
			get { return GetProperty(NotImportableIndProperty); }
		}
		#endregion

		#region " Methods "

		public ExcelImportDocument GetParent()
		{
			return (ExcelImportDocument)((ExcelImportDocumentHeaderList)this.Parent).Parent;
		}

		protected override object GetIdValue()
		{
			return GetProperty(ExcelImportDocumentHeaderIDProperty);
		}

		public override string ToString()
		{
			if (this.ExcelHeader.Length == 0)
			{
				if (this.IsNew)
				{
					return String.Format("New {0}", "Excel Import Document Header");
				}
				else
				{
					return String.Format("Blank {0}", "Excel Import Document Header");
				}
			}
			else
			{
				return this.ExcelHeader;
			}
		}

		#endregion

		#endregion

		#region " Validation Rules "

		protected override void AddBusinessRules()
		{
			base.AddBusinessRules();
		}

		#endregion

		#region " Data Access & Factory Methods "

		protected override void OnCreate()
		{
			// This is called when a new object is created
			// Set any variables here, not in the constructor or NewExcelImportDocumentHeader() method.
		}

		public static ExcelImportDocumentHeader NewExcelImportDocumentHeader()
		{
			return DataPortal.CreateChild<ExcelImportDocumentHeader>();
		}

		public ExcelImportDocumentHeader()
		{
			MarkAsChild();
		}

		internal static ExcelImportDocumentHeader GetExcelImportDocumentHeader(SafeDataReader dr)
		{
			var e = new ExcelImportDocumentHeader();
			e.Fetch(dr);
			return e;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			using (BypassPropertyChecks)
			{
				int i = 0;
				LoadProperty(ExcelImportDocumentHeaderIDProperty, sdr.GetInt32(i++));
				LoadProperty(ExcelImportDocumentIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
				LoadProperty(ExcelHeaderProperty, sdr.GetString(i++));
				LoadProperty(CSLAPropertyProperty, sdr.GetString(i++));
				LoadProperty(CSLAPropertyDefaultValueProperty, sdr.GetString(i++));
				LoadProperty(NotImportableIndProperty, sdr.GetBoolean(i++));
			}

			MarkAsChild();
			MarkOld();
			BusinessRules.CheckRules();
		}

		protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
		{
			AddPrimaryKeyParam(cm, ExcelImportDocumentHeaderIDProperty);

			cm.Parameters.AddWithValue("@ExcelImportDocumentID", this.GetParent().ExcelImportDocumentID);
			cm.Parameters.AddWithValue("@ExcelHeader", GetProperty(ExcelHeaderProperty));
			cm.Parameters.AddWithValue("@CSLAProperty", GetProperty(CSLAPropertyProperty));
			cm.Parameters.AddWithValue("@CSLAPropertyDefaultValue", GetProperty(CSLAPropertyDefaultValueProperty));
			cm.Parameters.AddWithValue("@NotImportableInd", GetProperty(NotImportableIndProperty));

			return (scm) =>
			{
	// Post Save
	if (this.IsNew)
				{
					LoadProperty(ExcelImportDocumentHeaderIDProperty, scm.Parameters["@ExcelImportDocumentHeaderID"].Value);
				}
			};
		}

		protected override void SaveChildren()
		{
			// No Children
		}

		protected override void SetupDeleteCommand(SqlCommand cm)
		{
			cm.Parameters.AddWithValue("@ExcelImportDocumentHeaderID", GetProperty(ExcelImportDocumentHeaderIDProperty));
		}

		#endregion

	}

}