// Generated 06 Feb 2018 14:01 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Document
{
	[Serializable]
	public class ExcelImportDocument
	 : MEBusinessBase<ExcelImportDocument>
	{
		#region " Properties and Methods "

		#region " Properties "

		public static PropertyInfo<int> ExcelImportDocumentIDProperty = RegisterProperty<int>(c => c.ExcelImportDocumentID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int ExcelImportDocumentID
		{
			get { return GetProperty(ExcelImportDocumentIDProperty); }
		}

		public static PropertyInfo<String> DocumentNameProperty = RegisterProperty<String>(c => c.DocumentName, "Document Name", "");
		/// <summary>
		/// Gets the Document Name value
		/// </summary>
		[Display(Name = "Document Name", Description = ""),
		StringLength(150, ErrorMessage = "Document Name cannot be more than 150 characters")]
		public String DocumentName
		{
			get { return GetProperty(DocumentNameProperty); }
		}

		public static PropertyInfo<String> CSLAObjectProperty = RegisterProperty<String>(c => c.CSLAObject, "CSLA Object", "");
		/// <summary>
		/// Gets the CSLA Object value
		/// </summary>
		[Display(Name = "CSLA Object", Description = ""),
		StringLength(150, ErrorMessage = "CSLA Object cannot be more than 150 characters")]
		public String CSLAObject
		{
			get { return GetProperty(CSLAObjectProperty); }
		}

		#endregion

		#region " Child Lists "

		public static PropertyInfo<ExcelImportDocumentHeaderList> ExcelImportDocumentHeaderListProperty = RegisterProperty<ExcelImportDocumentHeaderList>(c => c.ExcelImportDocumentHeaderList, "Excel Import Document Header List");

		public ExcelImportDocumentHeaderList ExcelImportDocumentHeaderList
		{
			get
			{
				if (GetProperty(ExcelImportDocumentHeaderListProperty) == null)
				{
					LoadProperty(ExcelImportDocumentHeaderListProperty, METTLib.Document.ExcelImportDocumentHeaderList.NewExcelImportDocumentHeaderList());
				}
				return GetProperty(ExcelImportDocumentHeaderListProperty);
			}
		}

		#endregion

		#region " Methods "

		protected override object GetIdValue()
		{
			return GetProperty(ExcelImportDocumentIDProperty);
		}

		public override string ToString()
		{
			if (this.DocumentName.Length == 0)
			{
				if (this.IsNew)
				{
					return String.Format("New {0}", "Excel Import Document");
				}
				else
				{
					return String.Format("Blank {0}", "Excel Import Document");
				}
			}
			else
			{
				return this.DocumentName;
			}
		}

		protected override String[] TableReferencesToIgnore
		{
			get
			{
				return new String[] { "ExcelImportDocumentHeaders" };
			}
		}

		#endregion

		#endregion

		#region " Validation Rules "

		protected override void AddBusinessRules()
		{
			base.AddBusinessRules();
		}

		#endregion

		#region " Data Access & Factory Methods "

		protected override void OnCreate()
		{
			// This is called when a new object is created
			// Set any variables here, not in the constructor or NewExcelImportDocument() method.
		}

		public static ExcelImportDocument NewExcelImportDocument()
		{
			return DataPortal.CreateChild<ExcelImportDocument>();
		}

		public ExcelImportDocument()
		{
			MarkAsChild();
		}

		internal static ExcelImportDocument GetExcelImportDocument(SafeDataReader dr)
		{
			var e = new ExcelImportDocument();
			e.Fetch(dr);
			return e;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			using (BypassPropertyChecks)
			{
				int i = 0;
				LoadProperty(ExcelImportDocumentIDProperty, sdr.GetInt32(i++));
				LoadProperty(DocumentNameProperty, sdr.GetString(i++));
				LoadProperty(CSLAObjectProperty, sdr.GetString(i++));
			}

			MarkAsChild();
			MarkOld();
			BusinessRules.CheckRules();
		}

		protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
		{
			AddPrimaryKeyParam(cm, ExcelImportDocumentIDProperty);

			cm.Parameters.AddWithValue("@DocumentName", GetProperty(DocumentNameProperty));
			cm.Parameters.AddWithValue("@CSLAObject", GetProperty(CSLAObjectProperty));

			return (scm) =>
			{
	// Post Save
	if (this.IsNew)
				{
					LoadProperty(ExcelImportDocumentIDProperty, scm.Parameters["@ExcelImportDocumentID"].Value);
				}
			};
		}

		protected override void SaveChildren()
		{
			UpdateChild(GetProperty(ExcelImportDocumentHeaderListProperty));
		}

		protected override void SetupDeleteCommand(SqlCommand cm)
		{
			cm.Parameters.AddWithValue("@ExcelImportDocumentID", GetProperty(ExcelImportDocumentIDProperty));
		}

		#endregion

	}

}