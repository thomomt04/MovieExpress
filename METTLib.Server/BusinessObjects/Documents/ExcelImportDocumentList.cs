// Generated 06 Feb 2018 14:01 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Document
{
	[Serializable]
	public class ExcelImportDocumentList
	 : MEBusinessListBase<ExcelImportDocumentList, ExcelImportDocument>
	{
		#region " Business Methods "

		public ExcelImportDocument GetItem(int ExcelImportDocumentID)
		{
			foreach (ExcelImportDocument child in this)
			{
				if (child.ExcelImportDocumentID == ExcelImportDocumentID)
				{
					return child;
				}
			}
			return null;
		}

		public override string ToString()
		{
			return "Excel Import Documents";
		}

		public ExcelImportDocumentHeader GetExcelImportDocumentHeader(int ExcelImportDocumentHeaderID)
		{
			ExcelImportDocumentHeader obj = null;
			foreach (ExcelImportDocument parent in this)
			{
				obj = parent.ExcelImportDocumentHeaderList.GetItem(ExcelImportDocumentHeaderID);
				if (obj != null)
				{
					return obj;
				}
			}
			return null;
		}

		#endregion

		#region " Data Access "

		[Serializable]
		public class Criteria
			: CriteriaBase<Criteria>
		{
			public Criteria()
			{
			}

		}

		public static ExcelImportDocumentList NewExcelImportDocumentList()
		{
			return new ExcelImportDocumentList();
		}

		public ExcelImportDocumentList()
		{
			// must have parameter-less constructor
		}

		public static ExcelImportDocumentList GetExcelImportDocumentList()
		{
			return DataPortal.Fetch<ExcelImportDocumentList>(new Criteria());
		}

		protected void Fetch(SafeDataReader sdr)
		{
			this.RaiseListChangedEvents = false;
			while (sdr.Read())
			{
				this.Add(ExcelImportDocument.GetExcelImportDocument(sdr));
			}
			this.RaiseListChangedEvents = true;

			ExcelImportDocument parent = null;
			if (sdr.NextResult())
			{
				while (sdr.Read())
				{
					if (parent == null || parent.ExcelImportDocumentID != sdr.GetInt32(1))
					{
						parent = this.GetItem(sdr.GetInt32(1));
					}
					parent.ExcelImportDocumentHeaderList.RaiseListChangedEvents = false;
					parent.ExcelImportDocumentHeaderList.Add(ExcelImportDocumentHeader.GetExcelImportDocumentHeader(sdr));
					parent.ExcelImportDocumentHeaderList.RaiseListChangedEvents = true;
				}
			}


			foreach (ExcelImportDocument child in this)
			{
				child.CheckRules();
				foreach (ExcelImportDocumentHeader ExcelImportDocumentHeader in child.ExcelImportDocumentHeaderList)
				{
					ExcelImportDocumentHeader.CheckRules();
				}
			}
		}

		protected override void DataPortal_Fetch(Object criteria)
		{
			Criteria crit = (Criteria)criteria;
			using (SqlConnection cn = new SqlConnection(Singular.Settings.ConnectionString))
			{
				cn.Open();
				try
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "GetProcs.getExcelImportDocumentList";
						using (SafeDataReader sdr = new SafeDataReader(cm.ExecuteReader()))
						{
							Fetch(sdr);
						}
					}
				}
				finally
				{
					cn.Close();
				}
			}
		}

		#endregion

	}

}