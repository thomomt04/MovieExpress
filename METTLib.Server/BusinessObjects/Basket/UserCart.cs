// Generated 08 Nov 2021 11:42 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Basket
{
    [Serializable]
    public class UserCart
     : MEBusinessBase<UserCart>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> UserCartIDProperty = RegisterProperty<int>(c => c.UserCartID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int UserCartID
        {
            get { return GetProperty(UserCartIDProperty); }
        }

        public static PropertyInfo<int> ProductIDProperty = RegisterProperty<int>(c => c.ProductID, "Product", 0);
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "Product", Description = "")]
        public int ProductID
        {
            get { return GetProperty(ProductIDProperty); }
            set { SetProperty(ProductIDProperty, value); }
        }

        public static PropertyInfo<Boolean?> isActiveIndProperty = RegisterProperty<Boolean?>(c => c.isActiveInd, "Is Active", null);
        /// <summary>
        /// Gets and sets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = "")]
        public Boolean? isActiveInd
        {
            get { return GetProperty(isActiveIndProperty); }
            set { SetProperty(isActiveIndProperty, value); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        public static PropertyInfo<int?> ShoppingCartIDProperty = RegisterProperty<int?>(c => c.ShoppingCartID, "Shopping Cart", null);
        /// <summary>
        /// Gets and sets the Shopping Cart value
        /// </summary>
        [Display(Name = "Shopping Cart", Description = "")]
        public int? ShoppingCartID
        {
            get { return GetProperty(ShoppingCartIDProperty); }
            set { SetProperty(ShoppingCartIDProperty, value); }
        }

        public static PropertyInfo<String> ProductNameProperty = RegisterProperty<String>(c => c.ProductName, "Product Name", "");
        /// <summary>
        /// Gets and sets the Product Name value
        /// </summary>
        [Display(Name = "Product Name", Description = ""),
        StringLength(200, ErrorMessage = "Product Name cannot be more than 200 characters")]
        public String ProductName
        {
            get { return GetProperty(ProductNameProperty); }
            set { SetProperty(ProductNameProperty, value); }
        }

        public static PropertyInfo<Decimal> SellingPriceProperty = RegisterProperty<Decimal>(c => c.SellingPrice, "Selling Price", 0D);
        /// <summary>
        /// Gets and sets the Selling Price value
        /// </summary>
        [Display(Name = "Selling Price", Description = ""),
        Required(ErrorMessage = "Selling Price required")]
        public Decimal SellingPrice
        {
            get { return GetProperty(SellingPriceProperty); }
            set { SetProperty(SellingPriceProperty, value); }
        }

        public static PropertyInfo<int?> ItemsCountProperty = RegisterProperty<int?>(c => c.ItemsCount, "Product", null);
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "ItemsCount", Description = "")]
        public int? ItemsCount
        {
            get { return GetProperty(ItemsCountProperty); }
            set { SetProperty(ItemsCountProperty, value); }

        }


        public static PropertyInfo<int?> UserIDProperty = RegisterProperty<int?>(c => c.UserID, "Shopping Cart", null);
        /// <summary>
        /// Gets and sets the Shopping Cart value
        /// </summary>
        [Display(Name = "UserID", Description = "")]
        public int? UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }


        public static PropertyInfo<Decimal> SubTotalProperty = RegisterProperty<Decimal>(c => c.SubTotal, "SubTotal", 0D);
        /// <summary>
        /// Gets and sets the SubTotal value
        /// </summary>
        [Display(Name = "SubTotal", Description = ""),
        Required(ErrorMessage = "SubTotal required")]
        public Decimal SubTotal
        {
            get { return GetProperty(SubTotalProperty); }
            set { SetProperty(SubTotalProperty, value); }
        }

        public static PropertyInfo<int> DeliveryIDProperty = RegisterProperty<int>(c => c.DeliveryID, "Delivery", 0);
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "Option", Description = ""),
        Singular.DataAnnotations.DropDownWeb(typeof(MELib.Basket.DeliveryList), UnselectedText = "Select", ValueMember = "DeliveryID", DisplayMember = "DeliveryType")]
        public int DeliveryID
        {
            get { return GetProperty(DeliveryIDProperty); }
            set { SetProperty(DeliveryIDProperty, value); }
        }
        #endregion




        /// <summary>
        /// Gets or sets the Movie Genre ID
        /// </summary>
        //[Singular.DataAnnotations.DropDownWeb(typeof(MELib.Basket.DeliveryList), UnselectedText = "Select", ValueMember = "DeliveryID", DisplayMember = "DeliveryID")]
        //[Display(Name = "Delivery")]
        //public int? DeliveryID { get; set; }

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(UserCartIDProperty);
        }

        public override string ToString()
        {
            if (this.CreatedDate.ToString().Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "User Cart");
                }
                else
                {
                    return String.Format("Blank {0}", "User Cart");
                }
            }
            else
            {
                return this.CreatedDate.ToString();
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewUserCart() method.
        }

        public static UserCart NewUserCart()
        {
            return DataPortal.CreateChild<UserCart>();
        }

        public UserCart()
        {
            MarkAsChild();
        }

        internal static UserCart GetUserCart(SafeDataReader dr)
        {
            var u = new UserCart();
            u.Fetch(dr);
            return u;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(UserCartIDProperty, sdr.GetInt32(i++));
                LoadProperty(ProductIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                object tmpisActiveInd = sdr.GetValue(i++);
                if (tmpisActiveInd == System.DBNull.Value)
                {
                    LoadProperty(isActiveIndProperty, null);
                }
                else
                {
                    LoadProperty(isActiveIndProperty, (bool?)tmpisActiveInd);
                }
                LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(ShoppingCartIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(ProductNameProperty, sdr.GetString(i++));
                LoadProperty(SellingPriceProperty, sdr.GetDecimal(i++));
                LoadProperty(ItemsCountProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(SubTotalProperty, sdr.GetDecimal(i++));
                LoadProperty(UserIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));

            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            AddPrimaryKeyParam(cm, UserCartIDProperty);

            cm.Parameters.AddWithValue("@ProductID", Singular.Misc.NothingDBNull(GetProperty(ProductIDProperty)));
            cm.Parameters.AddWithValue("@isActiveInd", Singular.Misc.NothingDBNull(GetProperty(isActiveIndProperty)));
            cm.Parameters.AddWithValue("@ShoppingCartID", Singular.Misc.NothingDBNull(GetProperty(ShoppingCartIDProperty)));
            cm.Parameters.AddWithValue("@ItemsCount", Singular.Misc.NothingDBNull(GetProperty(ItemsCountProperty)));
            cm.Parameters.AddWithValue("@SubTotal", Singular.Misc.NothingDBNull(GetProperty(SubTotalProperty)));
            cm.Parameters.AddWithValue("@UserID", Singular.Misc.NothingDBNull(GetProperty(UserIDProperty)));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(UserCartIDProperty, scm.Parameters["@UserCartID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@UserCartID", GetProperty(UserCartIDProperty));
        }

        #endregion

    }

}