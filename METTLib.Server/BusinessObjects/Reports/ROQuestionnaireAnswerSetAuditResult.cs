// Generated 29 Mar 2019 10:47 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;

namespace METTLib.Reports
{
	[Serializable]
	public class ROQuestionnaireAnswerSetAuditResult
	 : METTReadOnlyBase<ROQuestionnaireAnswerSetAuditResult>
	{
		#region " Properties and Methods "

		#region " Properties "

		public static PropertyInfo<int> QuestionnaireGroupIDProperty = RegisterProperty<int>(c => c.QuestionnaireGroupID, "ID");
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int QuestionnaireGroupID
		{
			get { return GetProperty(QuestionnaireGroupIDProperty); }
		}

		public static PropertyInfo<String> IndicatorDetailNameProperty = RegisterProperty<String>(c => c.IndicatorDetailName, "IndicatorDetailName");
		/// <summary>
		/// Gets the Indicatordetailname value
		/// </summary>
		[Display(Name = "Indicators", Description = "")]
		public String IndicatorDetailName
		{
			get { return GetProperty(IndicatorDetailNameProperty); }
		}

		public static PropertyInfo<int> ValueProperty = RegisterProperty<int>(c => c.Value, "Value");
		/// <summary>
		/// Gets the Value value
		/// </summary>
		[Display(Name = "Max Value", Description = "")]
		public int Value
		{
			get { return GetProperty(ValueProperty); }
		}

		public static PropertyInfo<String> OriginalRatingProperty = RegisterProperty<String>(c => c.OriginalRating, "Originalrating");
		/// <summary>
		/// Gets the Originalrating value
		/// </summary>
		[Display(Name = "Original Rating", Description = "")]
		public String OriginalRating
		{
			get { return GetProperty(OriginalRatingProperty); }
		}

		public static PropertyInfo<String> OriginalCommentsProperty = RegisterProperty<String>(c => c.OriginalComments, "Originalcomments");
		/// <summary>
		/// Gets the Originalcomments value
		/// </summary>
		[Display(Name = "Original Comments", Description = "")]
		public String OriginalComments
		{
			get { return GetProperty(OriginalCommentsProperty); }
		}

		public static PropertyInfo<String> OriginalNextStepsProperty = RegisterProperty<String>(c => c.OriginalNextSteps, "Originalnextsteps");
		/// <summary>
		/// Gets the Originalnextsteps value
		/// </summary>
		[Display(Name = "Original Next Steps", Description = "")]
		public String OriginalNextSteps
		{
			get { return GetProperty(OriginalNextStepsProperty); }
		}

		public static PropertyInfo<String> OriginalEvidenceProperty = RegisterProperty<String>(c => c.OriginalEvidence, "Originalevidence");
		/// <summary>
		/// Gets the Originalevidence value
		/// </summary>
		[Display(Name = "Original Evidence", Description = "")]
		public String OriginalEvidence
		{
			get { return GetProperty(OriginalEvidenceProperty); }
		}

		public static PropertyInfo<String> AuditRatingProperty = RegisterProperty<String>(c => c.AuditRating, "Auditrating");
		/// <summary>
		/// Gets the Auditrating value
		/// </summary>
		[Display(Name = "Audit Rating", Description = ""), Singular.DataAnnotations.DisplayLayoutInfo("Display")]
		public String AuditRating
		{
			get { return GetProperty(AuditRatingProperty); }
		}

		public static PropertyInfo<String> AuditCommentsProperty = RegisterProperty<String>(c => c.AuditComments, "Auditcomments");
		/// <summary>
		/// Gets the Auditcomments value
		/// </summary>
		[Display(Name = "Audit Comments", Description = "")]
		public String AuditComments
		{
			get { return GetProperty(AuditCommentsProperty); }
		}

		public static PropertyInfo<String> AuditNextStepsProperty = RegisterProperty<String>(c => c.AuditNextSteps, "Auditnextsteps");
		/// <summary>
		/// Gets the Auditnextsteps value
		/// </summary>
		[Display(Name = "Audit Next Steps", Description = "")]
		public String AuditNextSteps
		{
			get { return GetProperty(AuditNextStepsProperty); }
		}

		public static PropertyInfo<String> AuditEvidenceProperty = RegisterProperty<String>(c => c.AuditEvidence, "Auditevidence");
		/// <summary>
		/// Gets the Auditevidence value
		/// </summary>
		[Display(Name = "Audit Evidence", Description = "")]
		public String AuditEvidence
		{
			get { return GetProperty(AuditEvidenceProperty); }
		}

		#endregion

		#region " Methods "

		protected override object GetIdValue()
		{
			return GetProperty(QuestionnaireGroupIDProperty);
		}

		public override string ToString()
		{
			return this.IndicatorDetailName;
		}

		#endregion

		#endregion

		#region " Data Access & Factory Methods "

		internal static ROQuestionnaireAnswerSetAuditResult GetROQuestionnaireAnswerSetAuditResult(SafeDataReader dr)
		{
			var r = new ROQuestionnaireAnswerSetAuditResult();
			r.Fetch(dr);
			return r;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			int i = 0;
			LoadProperty(QuestionnaireGroupIDProperty, sdr.GetInt32(i++));
			LoadProperty(IndicatorDetailNameProperty, sdr.GetString(i++));
			LoadProperty(ValueProperty, sdr.GetInt32(i++));
			LoadProperty(OriginalRatingProperty, sdr.GetString(i++));
			LoadProperty(OriginalCommentsProperty, sdr.GetString(i++));
			LoadProperty(OriginalNextStepsProperty, sdr.GetString(i++));
			LoadProperty(OriginalEvidenceProperty, sdr.GetString(i++));
			LoadProperty(AuditRatingProperty, sdr.GetString(i++));
			LoadProperty(AuditCommentsProperty, sdr.GetString(i++));
			LoadProperty(AuditNextStepsProperty, sdr.GetString(i++));
			LoadProperty(AuditEvidenceProperty, sdr.GetString(i++));
		}

		#endregion

	}

}