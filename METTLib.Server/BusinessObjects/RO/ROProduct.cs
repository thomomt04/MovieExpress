// Generated 27 Oct 2021 10:19 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.RO
{
    [Serializable]
    public class ROProduct
     : SingularReadOnlyBase<ROProduct>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> ProductIDProperty = RegisterProperty<int>(c => c.ProductID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int ProductID
        {
            get { return GetProperty(ProductIDProperty); }
        }

        public static PropertyInfo<int?> ProductCategoryIDProperty = RegisterProperty<int?>(c => c.ProductCategoryID, "Product Category", null);
        /// <summary>
        /// Gets the Product Category value
        /// </summary>
        [Display(Name = "Product Category", Description = "")]
        public int? ProductCategoryID
        {
            get { return GetProperty(ProductCategoryIDProperty); }
        }

        public static PropertyInfo<String> ProductNameProperty = RegisterProperty<String>(c => c.ProductName, "Product Name", "");
        /// <summary>
        /// Gets the Product Name value
        /// </summary>
        [Display(Name = "Product Name", Description = "")]
        public String ProductName
        {
            get { return GetProperty(ProductNameProperty); }
        }

        public static PropertyInfo<String> ProductDescriptionProperty = RegisterProperty<String>(c => c.ProductDescription, "Product Description", "");
        /// <summary>
        /// Gets the Product Description value
        /// </summary>
        [Display(Name = "Product Description", Description = "")]
        public String ProductDescription
        {
            get { return GetProperty(ProductDescriptionProperty); }
        }

        public static PropertyInfo<String> ProductImageURLProperty = RegisterProperty<String>(c => c.ProductImageURL, "Product Image URL", "");
        /// <summary>
        /// Gets the Product Image URL value
        /// </summary>
        [Display(Name = "Product Image URL", Description = "")]
        public String ProductImageURL
        {
            get { return GetProperty(ProductImageURLProperty); }
        }

        public static PropertyInfo<Decimal> SellingPriceProperty = RegisterProperty<Decimal>(c => c.SellingPrice, "Selling Price", 0D);
        /// <summary>
        /// Gets the Selling Price value
        /// </summary>
        [Display(Name = "Selling Price", Description = "")]
        public Decimal SellingPrice
        {
            get { return GetProperty(SellingPriceProperty); }
        }

        public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", false);
        /// <summary>
        /// Gets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = "")]
        public Boolean IsActiveInd
        {
            get { return GetProperty(IsActiveIndProperty); }
        }

        public static PropertyInfo<DateTime?> DeletedDateProperty = RegisterProperty<DateTime?>(c => c.DeletedDate, "Deleted Date");
        /// <summary>
        /// Gets the Deleted Date value
        /// </summary>
        [Display(Name = "Deleted Date", Description = "")]
        public DateTime? DeletedDate
        {
            get
            {
                return GetProperty(DeletedDateProperty);
            }
        }

        public static PropertyInfo<int> DeletedByProperty = RegisterProperty<int>(c => c.DeletedBy, "Deleted By", 0);
        /// <summary>
        /// Gets the Deleted By value
        /// </summary>
        [Display(Name = "Deleted By", Description = "")]
        public int DeletedBy
        {
            get { return GetProperty(DeletedByProperty); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
        /// <summary>
        /// Gets the Created By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int CreatedBy
        {
            get { return GetProperty(CreatedByProperty); }
        }

        public static PropertyInfo<SmartDate> ModifiedDateProperty = RegisterProperty<SmartDate>(c => c.ModifiedDate, "Modified Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Modified Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate ModifiedDate
        {
            get { return GetProperty(ModifiedDateProperty); }
        }

        public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
        /// <summary>
        /// Gets the Modified By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int ModifiedBy
        {
            get { return GetProperty(ModifiedByProperty); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(ProductIDProperty);
        }

        public override string ToString()
        {
            return this.ProductName;
        }

        #endregion

        #endregion

        #region " Data Access & Factory Methods "

        internal static ROProduct GetROProduct(SafeDataReader dr)
        {
            var r = new ROProduct();
            r.Fetch(dr);
            return r;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            int i = 0;
            LoadProperty(ProductIDProperty, sdr.GetInt32(i++));
            LoadProperty(ProductCategoryIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
            LoadProperty(ProductNameProperty, sdr.GetString(i++));
            LoadProperty(ProductDescriptionProperty, sdr.GetString(i++));
            LoadProperty(ProductImageURLProperty, sdr.GetString(i++));
            LoadProperty(SellingPriceProperty, sdr.GetDecimal(i++));
            LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
            LoadProperty(DeletedDateProperty, sdr.GetValue(i++));
            LoadProperty(DeletedByProperty, sdr.GetInt32(i++));
            LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
            LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
            LoadProperty(ModifiedDateProperty, sdr.GetSmartDate(i++));
            LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
        }

        #endregion

    }

}