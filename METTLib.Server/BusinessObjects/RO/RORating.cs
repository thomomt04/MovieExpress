// Generated 03 Jul 2018 08:15 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace METTLib.Ratings
{
	[Serializable]
	public class RORating
	 : METTReadOnlyBase<RORating>
	{
		#region " Properties and Methods "

		#region " Properties "

		public static PropertyInfo<int> RatingIDProperty = RegisterProperty<int>(c => c.RatingID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int RatingID
		{
			get { return GetProperty(RatingIDProperty); }
		}

		public static PropertyInfo<String> RatingNameProperty = RegisterProperty<String>(c => c.RatingName, "Rating Name", "");
		/// <summary>
		/// Gets the Rating Name value
		/// </summary>
		[Display(Name = "Rating Name", Description = "Description/Name of Rating")]
		public String RatingName
		{
			get { return GetProperty(RatingNameProperty); }
		}

		public static PropertyInfo<int> RatingValueProperty = RegisterProperty<int>(c => c.RatingValue, "Rating Value", 0);
		/// <summary>
		/// Gets the Rating Value value
		/// </summary>
		[Display(Name = "Rating Value", Description = "Value of Rating")]
		public int RatingValue
		{
			get { return GetProperty(RatingValueProperty); }
		}

		public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", true);
		/// <summary>
		/// Gets the Is Active value
		/// </summary>
		[Display(Name = "Is Active", Description = "Indicates whether question is currently active")]
		public Boolean IsActiveInd
		{
			get { return GetProperty(IsActiveIndProperty); }
		}

		public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
		/// <summary>
		/// Gets the Created By value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int CreatedBy
		{
			get { return GetProperty(CreatedByProperty); }
		}

		public static PropertyInfo<SmartDate> CreatedDateTimeProperty = RegisterProperty<SmartDate>(c => c.CreatedDateTime, "Created Date Time", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Created Date Time value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate CreatedDateTime
		{
			get { return GetProperty(CreatedDateTimeProperty); }
		}

		public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
		/// <summary>
		/// Gets the Modified By value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int ModifiedBy
		{
			get { return GetProperty(ModifiedByProperty); }
		}

		public static PropertyInfo<SmartDate> ModifiedDateTimeProperty = RegisterProperty<SmartDate>(c => c.ModifiedDateTime, "Modified Date Time", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Modified Date Time value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate ModifiedDateTime
		{
			get { return GetProperty(ModifiedDateTimeProperty); }
		}

		#endregion

		#region " Methods "

		protected override object GetIdValue()
		{
			return GetProperty(RatingIDProperty);
		}

		public override string ToString()
		{
			return this.RatingName;
		}

		#endregion

		#endregion

		#region " Data Access & Factory Methods "

		internal static RORating GetRORating(SafeDataReader dr)
		{
			var r = new RORating();
			r.Fetch(dr);
			return r;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			int i = 0;
			LoadProperty(RatingIDProperty, sdr.GetInt32(i++));
			LoadProperty(RatingNameProperty, sdr.GetString(i++));
			LoadProperty(RatingValueProperty, sdr.GetInt32(i++));
			LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
			LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
			LoadProperty(CreatedDateTimeProperty, sdr.GetSmartDate(i++));
			LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
			LoadProperty(ModifiedDateTimeProperty, sdr.GetSmartDate(i++));
		}

		#endregion

	}

}