// Generated 29 Jun 2018 11:38 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace METTLib.RO
{
  [Serializable]
  public class ROLegalDesignation
   : METTReadOnlyBase<ROLegalDesignation>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> LegalDesignationIDProperty = RegisterProperty<int>(c => c.LegalDesignationID, "ID", 0);
    /// <summary>
    /// Gets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key]
    public int LegalDesignationID
    {
      get { return GetProperty(LegalDesignationIDProperty); }
    }

    public static PropertyInfo<String> LegalDesignationProperty = RegisterProperty<String>(c => c.LegalDesignation, "Legal Designation", "");
    /// <summary>
    /// Gets the Legal Designation value
    /// </summary>
    [Display(Name = "Legal Designation", Description = "Description of Legal Designation e.g. NationalPark, Ramsar, Marine")]
    public String LegalDesignation
    {
      get { return GetProperty(LegalDesignationProperty); }
    }

    public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", true);
    /// <summary>
    /// Gets the Is Active value
    /// </summary>
    [Display(Name = "Is Active", Description = "")]
    public Boolean IsActiveInd
    {
      get { return GetProperty(IsActiveIndProperty); }
    }

    public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
    /// <summary>
    /// Gets the Created By value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public int? CreatedBy
    {
      get { return GetProperty(CreatedByProperty); }
    }

    public static PropertyInfo<SmartDate> CreatedDateTimeProperty = RegisterProperty<SmartDate>(c => c.CreatedDateTime, "Created Date Time", new SmartDate(DateTime.Now));
    /// <summary>
    /// Gets the Created Date Time value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate CreatedDateTime
    {
      get { return GetProperty(CreatedDateTimeProperty); }
    }

    public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
    /// <summary>
    /// Gets the Modified By value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public int? ModifiedBy
    {
      get { return GetProperty(ModifiedByProperty); }
    }

    public static PropertyInfo<SmartDate> ModifiedDateTimeProperty = RegisterProperty<SmartDate>(c => c.ModifiedDateTime, "Modified Date Time", new SmartDate(DateTime.Now));
    /// <summary>
    /// Gets the Modified Date Time value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate ModifiedDateTime
    {
      get { return GetProperty(ModifiedDateTimeProperty); }
    }

    #endregion

    #region " Methods "

    protected override object GetIdValue()
    {
      return GetProperty(LegalDesignationIDProperty);
    }

    public override string ToString()
    {
      return this.LegalDesignation;
    }

    #endregion

    #endregion

    #region " Data Access & Factory Methods "

    internal static ROLegalDesignation GetROLegalDesignation(SafeDataReader dr)
    {
      var r = new ROLegalDesignation();
      r.Fetch(dr);
      return r;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      int i = 0;
      LoadProperty(LegalDesignationIDProperty, sdr.GetInt32(i++));
      LoadProperty(LegalDesignationProperty, sdr.GetString(i++));
      LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
      LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
      LoadProperty(CreatedDateTimeProperty, sdr.GetSmartDate(i++));
      LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
      LoadProperty(ModifiedDateTimeProperty, sdr.GetSmartDate(i++));
    }

    #endregion

  }

}