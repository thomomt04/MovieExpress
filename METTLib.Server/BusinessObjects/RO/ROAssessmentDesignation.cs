// Generated 22 Jan 2019 09:20 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace METTLib.RO
{
  [Serializable]
  public class ROAssessmentDesignation
   : METTReadOnlyBase<ROAssessmentDesignation>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> AssessmentDesignationIDProperty = RegisterProperty<int>(c => c.AssessmentDesignationID, "ID", 0);
    /// <summary>
    /// Gets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key]
    public int AssessmentDesignationID
    {
      get { return GetProperty(AssessmentDesignationIDProperty); }
    }

    public static PropertyInfo<String> AssessmentDesignationNameProperty = RegisterProperty<String>(c => c.AssessmentDesignationName, "Assessment Designation Name", "");
    /// <summary>
    /// Gets the Assessment Designation Name value
    /// </summary>
    [Display(Name = "Assessment Designation Name", Description = "Actual name/text of the designation, e.g. RAMSAR, World Heritage, Protected Area, Unofficial")]
    public String AssessmentDesignationName
    {
      get { return GetProperty(AssessmentDesignationNameProperty); }
    }

    public static PropertyInfo<String> AssessmentDesignationCodeKeyProperty = RegisterProperty<String>(c => c.AssessmentDesignationCodeKey, "Assessment Designation Code Key", "");
    /// <summary>
    /// Gets the Assessment Designation Code Key value
    /// </summary>
    [Display(Name = "Assessment Designation Code Key", Description = "Code Key for the Designation")]
    public String AssessmentDesignationCodeKey
    {
      get { return GetProperty(AssessmentDesignationCodeKeyProperty); }
    }

    public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", true);
    /// <summary>
    /// Gets the Is Active value
    /// </summary>
    [Display(Name = "Is Active", Description = "Indicates whether Designation is currently active")]
    public Boolean IsActiveInd
    {
      get { return GetProperty(IsActiveIndProperty); }
    }

    public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
    /// <summary>
    /// Gets the Created By value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public int CreatedBy
    {
      get { return GetProperty(CreatedByProperty); }
    }

    public static PropertyInfo<SmartDate> CreatedDateTimeProperty = RegisterProperty<SmartDate>(c => c.CreatedDateTime, "Created Date Time", new SmartDate(DateTime.Now));
    /// <summary>
    /// Gets the Created Date Time value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate CreatedDateTime
    {
      get { return GetProperty(CreatedDateTimeProperty); }
    }

    public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
    /// <summary>
    /// Gets the Modified By value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public int ModifiedBy
    {
      get { return GetProperty(ModifiedByProperty); }
    }

    public static PropertyInfo<SmartDate> ModifiedDateTimeProperty = RegisterProperty<SmartDate>(c => c.ModifiedDateTime, "Modified Date Time", new SmartDate(DateTime.Now));
    /// <summary>
    /// Gets the Modified Date Time value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate ModifiedDateTime
    {
      get { return GetProperty(ModifiedDateTimeProperty); }
    }

    #endregion

    #region " Methods "

    protected override object GetIdValue()
    {
      return GetProperty(AssessmentDesignationIDProperty);
    }

    public override string ToString()
    {
      return this.AssessmentDesignationName;
    }

    #endregion

    #endregion

    #region " Data Access & Factory Methods "

    internal static ROAssessmentDesignation GetROAssessmentDesignation(SafeDataReader dr)
    {
      var r = new ROAssessmentDesignation();
      r.Fetch(dr);
      return r;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      int i = 0;
      LoadProperty(AssessmentDesignationIDProperty, sdr.GetInt32(i++));
      LoadProperty(AssessmentDesignationNameProperty, sdr.GetString(i++));
      LoadProperty(AssessmentDesignationCodeKeyProperty, sdr.GetString(i++));
      LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
      LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
      LoadProperty(CreatedDateTimeProperty, sdr.GetSmartDate(i++));
      LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
      LoadProperty(ModifiedDateTimeProperty, sdr.GetSmartDate(i++));
    }

    #endregion

  }

}