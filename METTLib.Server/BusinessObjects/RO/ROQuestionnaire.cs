// Generated 11 Jul 2018 14:07 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace METTLib.RO
{
	[Serializable]
	public class ROQuestionnaire
	 : SingularReadOnlyBase<ROQuestionnaire>
	{
		#region " Properties and Methods "

		#region " Properties "

		public static PropertyInfo<int> QuestionnaireIDProperty = RegisterProperty<int>(c => c.QuestionnaireID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int QuestionnaireID
		{
			get { return GetProperty(QuestionnaireIDProperty); }
		}

		public static PropertyInfo<String> QuestionnaireProperty = RegisterProperty<String>(c => c.Questionnaire, "Questionnaire", "");
		/// <summary>
		/// Gets the Questionnaire value
		/// </summary>
		[Display(Name = "Questionnaire", Description = "Text describing the survey. Defaults to campaign name and staff type")]
		public String Questionnaire
		{
			get { return GetProperty(QuestionnaireProperty); }
		}

		public static PropertyInfo<String> QuestionnaireVersionNumberProperty = RegisterProperty<String>(c => c.QuestionnaireVersionNumber, "Questionnaire Version Number", "");
		/// <summary>
		/// Gets the Questionnaire Version Number value
		/// </summary>
		[Display(Name = "Questionnaire Version Number", Description = "Version Number of METT Assessment e.g. #A")]
		public String QuestionnaireVersionNumber
		{
			get { return GetProperty(QuestionnaireVersionNumberProperty); }
		}

		public static PropertyInfo<DateTime?> StartDateProperty = RegisterProperty<DateTime?>(c => c.StartDate, "Start Date");
		/// <summary>
		/// Gets the Start Date value
		/// </summary>
		[Display(Name = "Start Date", Description = "The date that the system will allow this questionnaire to be answered from")]
		public DateTime? StartDate
		{
			get
			{
				return GetProperty(StartDateProperty);
			}
		}

		public static PropertyInfo<DateTime?> EndDateProperty = RegisterProperty<DateTime?>(c => c.EndDate, "End Date");
		/// <summary>
		/// Gets the End Date value
		/// </summary>
		[Display(Name = "End Date", Description = "The date the the system will allow this questionnaire to be answered")]
		public DateTime? EndDate
		{
			get
			{
				return GetProperty(EndDateProperty);
			}
		}

		public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
		/// <summary>
		/// Gets the Created By value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int? CreatedBy
		{
			get { return GetProperty(CreatedByProperty); }
		}

		public static PropertyInfo<SmartDate> CreatedDateTimeProperty = RegisterProperty<SmartDate>(c => c.CreatedDateTime, "Created Date Time", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Created Date Time value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate CreatedDateTime
		{
			get { return GetProperty(CreatedDateTimeProperty); }
		}

		public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
		/// <summary>
		/// Gets the Modified By value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int? ModifiedBy
		{
			get { return GetProperty(ModifiedByProperty); }
		}

		public static PropertyInfo<SmartDate> ModifiedDateTimeProperty = RegisterProperty<SmartDate>(c => c.ModifiedDateTime, "Modified Date Time", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Modified Date Time value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate ModifiedDateTime
		{
			get { return GetProperty(ModifiedDateTimeProperty); }
		}

		public static PropertyInfo<Boolean> PublishIndProperty = RegisterProperty<Boolean>(c => c.PublishInd, "Publish", false);
		/// <summary>
		/// Gets the Publish value
		/// </summary>
		[Display(Name = "Publish", Description = "")]
		public Boolean PublishInd
		{
			get { return GetProperty(PublishIndProperty); }
		}

		public static PropertyInfo<DateTime> PublishDateTimeProperty = RegisterProperty<DateTime>(c => c.PublishDateTime, "Publish Date Time");
		/// <summary>
		/// Gets the Publish Date Time value
		/// </summary>
		[Display(Name = "Publish Date Time", Description = "The Date and Time that the record was published. Note that notification emails will be sent to all assessors once there is a published date.")]
		public DateTime PublishDateTime
		{
			get
			{
				if (!FieldManager.FieldExists(PublishDateTimeProperty))
				{
					LoadProperty(PublishDateTimeProperty, new SmartDate(DateTime.Now));
				}
				return GetProperty(PublishDateTimeProperty);
			}
		}

		#endregion

		#region " Methods "

		protected override object GetIdValue()
		{
			return GetProperty(QuestionnaireIDProperty);
		}

		public override string ToString()
		{
			return this.Questionnaire;
		}

		#endregion

		#endregion

		#region " Data Access & Factory Methods "

		internal static ROQuestionnaire GetROQuestionnaire(SafeDataReader dr)
		{
			var r = new ROQuestionnaire();
			r.Fetch(dr);
			return r;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			int i = 0;
			LoadProperty(QuestionnaireIDProperty, sdr.GetInt32(i++));
			LoadProperty(QuestionnaireProperty, sdr.GetString(i++));
			LoadProperty(QuestionnaireVersionNumberProperty, sdr.GetString(i++));
			LoadProperty(StartDateProperty, sdr.GetValue(i++));
			LoadProperty(EndDateProperty, sdr.GetValue(i++));
			LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
			LoadProperty(CreatedDateTimeProperty, sdr.GetSmartDate(i++));
			LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
			LoadProperty(ModifiedDateTimeProperty, sdr.GetSmartDate(i++));
			LoadProperty(PublishIndProperty, sdr.GetBoolean(i++));
			LoadProperty(PublishDateTimeProperty, sdr.GetValue(i++));
		}

		#endregion

	}

}