// Generated 17 Jul 2018 13:15 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace METTLib.RO
{
	[Serializable]
	public class ROQuestionnaireAnswerScore
	 : METTReadOnlyBase<ROQuestionnaireAnswerScore>
	{
		#region " Properties and Methods "

		#region " Properties "

		public static PropertyInfo<int> QuestionnaireAnswerScoreIDProperty = RegisterProperty<int>(c => c.QuestionnaireAnswerScoreID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int QuestionnaireAnswerScoreID
		{
			get { return GetProperty(QuestionnaireAnswerScoreIDProperty); }
		}

		public static PropertyInfo<int> QuestionnaireAnswerSetIDProperty = RegisterProperty<int>(c => c.QuestionnaireAnswerSetID, "Questionnaire Answer Set", 0);
		/// <summary>
		/// Gets the Questionnaire Answer Set value
		/// </summary>
		[Display(Name = "Questionnaire Answer Set", Description = "Questionnaire Group ID")]
		public int QuestionnaireAnswerSetID
		{
			get { return GetProperty(QuestionnaireAnswerSetIDProperty); }
		}

		public static PropertyInfo<int> TotalIndexAssessorProperty = RegisterProperty<int>(c => c.TotalIndexAssessor, "Total Index Assessor", 0);
		/// <summary>
		/// Gets the Total Index Assessor value
		/// </summary>
		[Display(Name = "Total Index Assessor", Description = "Total assessor score summary")]
		public int TotalIndexAssessor
		{
			get { return GetProperty(TotalIndexAssessorProperty); }
		}

		public static PropertyInfo<Decimal> TotalIndexAssessorPctProperty = RegisterProperty<Decimal>(c => c.TotalIndexAssessorPct, "Total Index Assessor Pct", 0D);
		/// <summary>
		/// Gets the Total Index Assessor Pct value
		/// </summary>
		[Display(Name = "Total Index Assessor Pct", Description = "Total assessor score percentage")]
		public Decimal TotalIndexAssessorPct
		{
			get { return GetProperty(TotalIndexAssessorPctProperty); }
		}

		public static PropertyInfo<int> AuditIndexAuditorProperty = RegisterProperty<int>(c => c.AuditIndexAuditor, "Audit Index Auditor", 0);
		/// <summary>
		/// Gets the Audit Index Auditor value
		/// </summary>
		[Display(Name = "Audit Index Auditor", Description = "Total Auditor score summary")]
		public int AuditIndexAuditor
		{
			get { return GetProperty(AuditIndexAuditorProperty); }
		}

		public static PropertyInfo<Decimal> AuditIndexAuditorPctProperty = RegisterProperty<Decimal>(c => c.AuditIndexAuditorPct, "Audit Index Auditor Pct", 0D);
		/// <summary>
		/// Gets the Audit Index Auditor Pct value
		/// </summary>
		[Display(Name = "Audit Index Auditor Pct", Description = "Total auditor score percentage")]
		public Decimal AuditIndexAuditorPct
		{
			get { return GetProperty(AuditIndexAuditorPctProperty); }
		}

		#endregion

		#region " Methods "

		protected override object GetIdValue()
		{
			return GetProperty(QuestionnaireAnswerScoreIDProperty);
		}

	
		#endregion

		#endregion

		#region " Data Access & Factory Methods "

		internal static ROQuestionnaireAnswerScore GetROQuestionnaireAnswerScore(SafeDataReader dr)
		{
			var r = new ROQuestionnaireAnswerScore();
			r.Fetch(dr);
			return r;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			int i = 0;
			LoadProperty(QuestionnaireAnswerScoreIDProperty, sdr.GetInt32(i++));
			LoadProperty(QuestionnaireAnswerSetIDProperty, sdr.GetInt32(i++));
			LoadProperty(TotalIndexAssessorProperty, sdr.GetInt32(i++));
			LoadProperty(TotalIndexAssessorPctProperty, sdr.GetDecimal(i++));
			LoadProperty(AuditIndexAuditorProperty, sdr.GetInt32(i++));
			LoadProperty(AuditIndexAuditorPctProperty, sdr.GetDecimal(i++));
		}

		#endregion

	}

}