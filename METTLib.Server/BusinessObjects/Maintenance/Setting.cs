// Generated 17 May 2018 13:20 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Maintenance
{
	[Serializable]
	public class Setting
	 : SingularBusinessBase<Setting>
	{
		#region " Properties and Methods "

		#region " Properties "

		public static PropertyInfo<int> SettingIDProperty = RegisterProperty<int>(c => c.SettingID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int SettingID
		{
			get { return GetProperty(SettingIDProperty); }
		}

		public static PropertyInfo<String> METTSupportEmailProperty = RegisterProperty<String>(c => c.METTSupportEmail, "METT Support Email", "");
		/// <summary>
		/// Gets and sets the METT Support Email value
		/// </summary>
		[Display(Name = "METT Support Email", Description = ""),
		StringLength(50, ErrorMessage = "METT Support Email cannot be more than 50 characters")]
		public String METTSupportEmail
		{
			get { return GetProperty(METTSupportEmailProperty); }
			set { SetProperty(METTSupportEmailProperty, value); }
		}

		public static PropertyInfo<String> NotesProperty = RegisterProperty<String>(c => c.Notes, "Notes", "");
		/// <summary>
		/// Gets and sets the Notes value
		/// </summary>
		[Display(Name = "Notes", Description = ""),
		StringLength(1000, ErrorMessage = "Notes cannot be more than 1000 characters")]
		public String Notes
		{
			get { return GetProperty(NotesProperty); }
			set { SetProperty(NotesProperty, value); }
		}

		public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Created Date value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate CreatedDate
		{
			get { return GetProperty(CreatedDateProperty); }
		}

		public static PropertyInfo<Boolean> ActiveIndProperty = RegisterProperty<Boolean>(c => c.ActiveInd, "Active", false);
		/// <summary>
		/// Gets and sets the Active value
		/// </summary>
		[Display(Name = "Active", Description = ""),
		Required(ErrorMessage = "Active required")]
		public Boolean ActiveInd
		{
			get { return GetProperty(ActiveIndProperty); }
			set { SetProperty(ActiveIndProperty, value); }
		}

		public static PropertyInfo<Boolean> UnderMaintenanceIndProperty = RegisterProperty<Boolean>(c => c.UnderMaintenanceInd, "Under Maintenance", false);
		/// <summary>
		/// Gets and sets the Under Maintenance value
		/// </summary>
		[Display(Name = "Under Maintenance", Description = ""),
		Required(ErrorMessage = "Under Maintenance required")]
		public Boolean UnderMaintenanceInd
		{
			get { return GetProperty(UnderMaintenanceIndProperty); }
			set { SetProperty(UnderMaintenanceIndProperty, value); }
		}

		public static PropertyInfo<String> EmailSignatureTextProperty = RegisterProperty<String>(c => c.EmailSignatureText, "Email Signature Text", "");
		/// <summary>
		/// Gets and sets the Email Signature Text value
		/// </summary>
		[Display(Name = "Email Signature Text", Description = ""),
		StringLength(1000, ErrorMessage = "Email Signature Text cannot be more than 1000 characters")]
		public String EmailSignatureText
		{
			get { return GetProperty(EmailSignatureTextProperty); }
			set { SetProperty(EmailSignatureTextProperty, value); }
		}


		public static PropertyInfo<String> UserManualBtnTextProperty = RegisterProperty<String>(c => c.UserManualBtnText, "User Manual Btn Text", "");
		/// <summary>
		/// Gets and sets the User Manual URL value
		/// </summary>
		[Display(Name = "User Manual Btn Text", Description = ""),
		StringLength(50, ErrorMessage = "User Manual Btn Text cannot be more than 50 characters")]
		public String UserManualBtnText
		{
			get { return GetProperty(UserManualBtnTextProperty); }
			set { SetProperty(UserManualBtnTextProperty, value); }
		}


		public static PropertyInfo<String> UserManualURLProperty = RegisterProperty<String>(c => c.UserManualURL, "User Manual URL", "");
		/// <summary>
		/// Gets and sets the User Manual URL value
		/// </summary>
		[Display(Name = "User Manual URL", Description = ""),
		StringLength(1000, ErrorMessage = "User Manual URL cannot be more than 1000 characters")]
		public String UserManualURL
		{
			get { return GetProperty(UserManualURLProperty); }
			set { SetProperty(UserManualURLProperty, value); }
		}

		public static PropertyInfo<String> FAQDocumentBtnTextProperty = RegisterProperty<String>(c => c.FAQDocumentBtnText, "FAQ Document Btn Text", "");
		/// <summary>
		/// Gets and sets the FAQ Document URL value
		/// </summary>
		[Display(Name = "FAQ Document Btn Text", Description = ""),
		StringLength(50, ErrorMessage = "FAQ Document Btn Text cannot be more than 50 characters")]
		public String FAQDocumentBtnText
		{
			get { return GetProperty(FAQDocumentBtnTextProperty); }
			set { SetProperty(FAQDocumentBtnTextProperty, value); }
		}


		public static PropertyInfo<String> FAQDocumentURLProperty = RegisterProperty<String>(c => c.FAQDocumentURL, "FAQ Document URL", "");
		/// <summary>
		/// Gets and sets the FAQ Document URL value
		/// </summary>
		[Display(Name = "FAQ Document URL", Description = ""),
		StringLength(1000, ErrorMessage = "FAQ Document URL cannot be more than 1000 characters")]
		public String FAQDocumentURL
		{
			get { return GetProperty(FAQDocumentURLProperty); }
			set { SetProperty(FAQDocumentURLProperty, value); }
		}

		public static PropertyInfo<Boolean> DeletedIndProperty = RegisterProperty<Boolean>(c => c.DeletedInd, "Deleted", false);
		/// <summary>
		/// Gets and sets the Deleted value
		/// </summary>
		[Display(Name = "Deleted", Description = ""),
		Required(ErrorMessage = "Deleted required")]
		public Boolean DeletedInd
		{
			get { return GetProperty(DeletedIndProperty); }
			set { SetProperty(DeletedIndProperty, value); }
		}

		#endregion

		#region " Methods "

		protected override object GetIdValue()
		{
			return GetProperty(SettingIDProperty);
		}

		public override string ToString()
		{
			if (this.METTSupportEmail.Length == 0)
			{
				if (this.IsNew)
				{
					return String.Format("New {0}", "Setting");
				}
				else
				{
					return String.Format("Blank {0}", "Setting");
				}
			}
			else
			{
				return this.METTSupportEmail;
			}
		}

		#endregion

		#endregion

		#region " Validation Rules "

		protected override void AddBusinessRules()
		{
			base.AddBusinessRules();
		}

		#endregion

		#region " Data Access & Factory Methods "

		protected override void OnCreate()
		{
			// This is called when a new object is created
			// Set any variables here, not in the constructor or NewSetting() method.
		}

		public static Setting NewSetting()
		{
			return DataPortal.CreateChild<Setting>();
		}

		public Setting()
		{
			MarkAsChild();
		}

		internal static Setting GetSetting(SafeDataReader dr)
		{
			var s = new Setting();
			s.Fetch(dr);
			return s;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			using (BypassPropertyChecks)
			{
				int i = 0;
				LoadProperty(SettingIDProperty, sdr.GetInt32(i++));
				LoadProperty(METTSupportEmailProperty, sdr.GetString(i++));
				LoadProperty(NotesProperty, sdr.GetString(i++));
				LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
				LoadProperty(ActiveIndProperty, sdr.GetBoolean(i++));
				LoadProperty(UnderMaintenanceIndProperty, sdr.GetBoolean(i++));
				LoadProperty(EmailSignatureTextProperty, sdr.GetString(i++));
				LoadProperty(UserManualBtnTextProperty, sdr.GetString(i++));
				LoadProperty(UserManualURLProperty, sdr.GetString(i++));
				LoadProperty(FAQDocumentBtnTextProperty, sdr.GetString(i++));
				LoadProperty(FAQDocumentURLProperty, sdr.GetString(i++));
				LoadProperty(DeletedIndProperty, sdr.GetBoolean(i++));
			}

			MarkAsChild();
			MarkOld();
			BusinessRules.CheckRules();
		}

		protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
		{
			AddPrimaryKeyParam(cm, SettingIDProperty);

			cm.Parameters.AddWithValue("@METTSupportEmail", GetProperty(METTSupportEmailProperty));
			cm.Parameters.AddWithValue("@Notes", GetProperty(NotesProperty));
			cm.Parameters.AddWithValue("@ActiveInd", GetProperty(ActiveIndProperty));
			cm.Parameters.AddWithValue("@UnderMaintenanceInd", GetProperty(UnderMaintenanceIndProperty));
			cm.Parameters.AddWithValue("@EmailSignatureText", GetProperty(EmailSignatureTextProperty));
			cm.Parameters.AddWithValue("@DeletedInd", GetProperty(DeletedIndProperty));

			return (scm) =>
			{
	// Post Save
	if (this.IsNew)
				{
					LoadProperty(SettingIDProperty, scm.Parameters["@SettingID"].Value);
				}
			};
		}

		protected override void SaveChildren()
		{
			// No Children
		}

		protected override void SetupDeleteCommand(SqlCommand cm)
		{
			cm.Parameters.AddWithValue("@SettingID", GetProperty(SettingIDProperty));
		}

		#endregion

	}

}