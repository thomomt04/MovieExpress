// Generated 02 Oct 2018 11:29 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;
using Singular.Web;

namespace METTLib.Maintenance
{
	[Serializable]
	public class MAQuestionnaireQuestionType
	 : METTBusinessBase<MAQuestionnaireQuestionType>
	{
		#region " Properties and Methods "

		#region " Properties "

		
		public static PropertyInfo<int> QuestionnaireQuestionAnswerOptionIDProperty = RegisterProperty<int>(c => c.QuestionnaireQuestionAnswerOptionID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int QuestionnaireQuestionAnswerOptionID
		{
			get { return GetProperty(QuestionnaireQuestionAnswerOptionIDProperty); }
		}

		public static PropertyInfo<int> QuestionnaireQuestionTypeIDProperty = RegisterProperty<int>(c => c.QuestionnaireQuestionTypeID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		//[Display(AutoGenerateField = false)]
		public int QuestionnaireQuestionTypeID
		{
			get { return GetProperty(QuestionnaireQuestionTypeIDProperty); }
		}

		public static PropertyInfo<int?> QuestionnaireQuestionIDProperty = RegisterProperty<int?>(c => c.QuestionnaireQuestionID, "Questionnaire Question", null);
		/// <summary>
		/// Gets the Questionnaire Question value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int? QuestionnaireQuestionID
		{
			get { return GetProperty(QuestionnaireQuestionIDProperty); }
		}

		public static PropertyInfo<int> QuestionnaireGroupIDProperty = RegisterProperty<int>(c => c.QuestionnaireGroupID, "Questionnaire Group", 0);
		/// <summary>
		/// Gets and sets the Questionnaire Group value
		/// </summary>
		[Display(Name = "Questionnaire Group", Description = ""),
		Required(ErrorMessage = "Questionnaire Group required")]
		public int QuestionnaireGroupID
		{
			get { return GetProperty(QuestionnaireGroupIDProperty); }
			set { SetProperty(QuestionnaireGroupIDProperty, value); }
		}

		//public static PropertyInfo<int> QuestionnaireQuestionAnswerOptionIDProperty = RegisterProperty<int>(c => c.QuestionnaireQuestionAnswerOptionID, "Questionnaire Question Answer Option", 0);
		///// <summary>
		///// Gets and sets the Questionnaire Question Answer Option value
		///// </summary>
		//[Display(Name = "Questionnaire Question Answer Option", Description = ""),
		//Required(ErrorMessage = "Questionnaire Question Answer Option required")]
		//public int QuestionnaireQuestionAnswerOptionID
		//{
		//	get { return GetProperty(QuestionnaireQuestionAnswerOptionIDProperty); }
		//	set { SetProperty(QuestionnaireQuestionAnswerOptionIDProperty, value); }
		//}

		public static PropertyInfo<String> AnswerOptionProperty = RegisterProperty<String>(c => c.AnswerOption, "Answer Option", "");
		/// <summary>
		/// Gets and sets the Answer Option value
		/// </summary>
		[Display(Name = "Answer Option", Description = ""),
		StringLength(350, ErrorMessage = "Answer Option cannot be more than 350 characters")]
		public String AnswerOption
		{
			get { return GetProperty(AnswerOptionProperty); }
			set { SetProperty(AnswerOptionProperty, value); }
		}

		public static PropertyInfo<int> AnswerRatingProperty = RegisterProperty<int>(c => c.AnswerRating, "Answer Rating", 0);
		/// <summary>
		/// Gets and sets the Answer Rating value
		/// </summary>
		[Display(Name = "Answer Rating", Description = ""),
		Required(ErrorMessage = "Answer Rating required")]
		public int AnswerRating
		{
			get { return GetProperty(AnswerRatingProperty); }
			set { SetProperty(AnswerRatingProperty, value); }
		}

		public static PropertyInfo<int> SortOrderProperty = RegisterProperty<int>(c => c.SortOrder, "Sort Order", 0);
		/// <summary>
		/// Gets and sets the Sort Order value
		/// </summary>
		[Display(Name = "Sort Order", Description = ""),
		Required(ErrorMessage = "Sort Order required")]
		public int SortOrder
		{
			get { return GetProperty(SortOrderProperty); }
			set { SetProperty(SortOrderProperty, value); }
		}


		public static PropertyInfo<String> QuestionnaireQuestionAnswerTooltipProperty = RegisterProperty<String>(c => c.QuestionnaireQuestionAnswerTooltip, "Question Tooltip", "");
		/// <summary>
		/// Gets and sets the Question value
		/// </summary>
		[Display(Name = "Answer Tooltip", Description = ""),
		StringLength(2000, ErrorMessage = "Question answer tooltip cannot be more than 2000 characters")]
		public String QuestionnaireQuestionAnswerTooltip
		{
			get { return GetProperty(QuestionnaireQuestionAnswerTooltipProperty); }
			set { SetProperty(QuestionnaireQuestionAnswerTooltipProperty, value); }
		}

		public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
		/// <summary>
		/// Gets the Modified By value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int? ModifiedBy
		{
			get { return GetProperty(ModifiedByProperty); }
		}

		public static PropertyInfo<SmartDate> ModifiedDateTimeProperty = RegisterProperty<SmartDate>(c => c.ModifiedDateTime, "Modified Date Time", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Modified Date Time value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate ModifiedDateTime
		{
			get { return GetProperty(ModifiedDateTimeProperty); }
		}

		#endregion

		#region " Methods "

		public MAQuestionnaireQuestion GetParent()
		{
			return (MAQuestionnaireQuestion)((MAQuestionnaireQuestionTypeList)this.Parent).Parent;
		}

		protected override object GetIdValue()
		{
			return GetProperty(QuestionnaireQuestionAnswerOptionIDProperty);
		}

		public override string ToString()
		{
			if (this.AnswerOption.Length == 0)
			{
				if (this.IsNew)
				{
					return String.Format("New {0}", "Questionnaire Question Type");
				}
				else
				{
					return String.Format("Blank {0}", "Questionnaire Question Type");
				}
			}
			else
			{
				return this.AnswerOption;
			}
		}


		#endregion
		#endregion
		#region " Validation Rules "

		protected override void AddBusinessRules()
		{
			base.AddBusinessRules();
		}

		#endregion

		#region " Data Access & Factory Methods "

		protected override void OnCreate()
		{
			// This is called when a new object is created
			// Set any variables here, not in the constructor or NewMAQuestionnaireQuestionType() method.
		}

		public static MAQuestionnaireQuestionType NewMAQuestionnaireQuestionType()
		{
			return DataPortal.CreateChild<MAQuestionnaireQuestionType>();
		}

		public MAQuestionnaireQuestionType()
		{
			MarkAsChild();
		}

		internal static MAQuestionnaireQuestionType GetMAQuestionnaireQuestionType(SafeDataReader dr)
		{
			var m = new MAQuestionnaireQuestionType();
			m.Fetch(dr);
			return m;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			using (BypassPropertyChecks)
			{
				int i = 0;
				LoadProperty(QuestionnaireQuestionTypeIDProperty, sdr.GetInt32(i++));
				LoadProperty(QuestionnaireQuestionIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
				LoadProperty(QuestionnaireGroupIDProperty, sdr.GetInt32(i++));
				LoadProperty(QuestionnaireQuestionAnswerOptionIDProperty, sdr.GetInt32(i++));
				LoadProperty(AnswerOptionProperty, sdr.GetString(i++));
				LoadProperty(AnswerRatingProperty, sdr.GetInt32(i++));
				LoadProperty(SortOrderProperty, sdr.GetInt32(i++));
				LoadProperty(QuestionnaireQuestionAnswerTooltipProperty, sdr.GetString(i++));


			}

			MarkAsChild();
			MarkOld();
			BusinessRules.CheckRules();
		}

		protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
		{
			//AddPrimaryKeyParam(cm, QuestionnaireQuestionTypeIDProperty);
			AddPrimaryKeyParam(cm, QuestionnaireQuestionAnswerOptionIDProperty); 

			cm.Parameters.AddWithValue("@AnswerOption", GetProperty(AnswerOptionProperty));
			cm.Parameters.AddWithValue("@AnswerRating", GetProperty(AnswerRatingProperty));
			cm.Parameters.AddWithValue("@SortOrder", GetProperty(SortOrderProperty));
			cm.Parameters.AddWithValue("@QuestionnaireQuestionAnswerTooltip", GetProperty(QuestionnaireQuestionAnswerTooltipProperty));
			cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));
			cm.Parameters.AddWithValue("@QuestionnaireQuestionID", this.GetParent().QuestionnaireQuestionID);
			cm.Parameters.AddWithValue("@QuestionnaireQuestionTypeID", this.GetParent().QuestionnaireQuestionTypeID);

			//cm.Parameters.AddWithValue("@QuestionnaireQuestionTypeID", this.GetParent().QuesGetProperty(QuestionnaireQuestionTypeIDProperty));

			//cm.Parameters.AddWithValue("@QuestionnaireQuestionTypeID", GetProperty(QuestionnaireQuestionTypeIDProperty));

			return (scm) =>
			{
				// Post Save
				if (this.IsNew)
				{
					LoadProperty(QuestionnaireQuestionAnswerOptionIDProperty, scm.Parameters["@QuestionnaireQuestionAnswerOptionID"].Value);
				}
			};
		}

		protected override void SaveChildren()
		{
			// No Children
		}

		protected override void SetupDeleteCommand(SqlCommand cm)
		{
			cm.Parameters.AddWithValue("@QuestionnaireQuestionAnswerOptionID", GetProperty(QuestionnaireQuestionAnswerOptionIDProperty));
		}

		#endregion

	}

}