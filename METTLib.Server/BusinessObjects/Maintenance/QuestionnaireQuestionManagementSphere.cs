// Generated 05 Dec 2018 07:42 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;
using METTLib.RO;


namespace METTLib.Maintenance
{
	[Serializable]
	public class QuestionnaireQuestionManagementSphere
	 : METTBusinessBase<QuestionnaireQuestionManagementSphere>
	{
		#region " Properties and Methods "

		#region " Properties "

		public static PropertyInfo<int> QuestionnaireQuestionManagementSphereIDProperty = RegisterProperty<int>(c => c.QuestionnaireQuestionManagementSphereID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int QuestionnaireQuestionManagementSphereID
		{
			get { return GetProperty(QuestionnaireQuestionManagementSphereIDProperty); }
		}

		public static PropertyInfo<int?> QuestionnaireQuestionIDProperty = RegisterProperty<int?>(c => c.QuestionnaireQuestionID, "Questionnaire Question", null);
		/// <summary>
		/// Gets and sets the Questionnaire Question value
		/// </summary>
		[Display(Name = "Questionnaire Question", Description = "Questionnaire ID")]//,
		//Required(ErrorMessage = "Questionnaire Question required")
		public int? QuestionnaireQuestionID
		{
			get { return GetProperty(QuestionnaireQuestionIDProperty); }
			set { SetProperty(QuestionnaireQuestionIDProperty, value); }
		}

		//public static PropertyInfo<int?> ManagementSphereIDProperty = RegisterProperty<int?>(c => c.ManagementSphereID, "Management Sphere", null);
		///// <summary>
		///// Gets and sets the Management Sphere value
		///// </summary>
		//[Display(Name = "Management Sphere", Description = "Management Sphere at time of questionnaire"),
		//Required(ErrorMessage = "Management Sphere required")]
		//public int? ManagementSphereID
		//{
		//	get { return GetProperty(ManagementSphereIDProperty); }
		//	set { SetProperty(ManagementSphereIDProperty, value); }
		//}

		public static PropertyInfo<int?> ManagementSphereIDProperty = RegisterProperty<int?>(c => c.ManagementSphereID, "Management Sphere", null);
		/// <summary>
		/// Gets and sets the Management Sphere value
		/// </summary>
		[Display(Name = "Management Sphere", Description = "Management Sphere at time of questionnaire"),
		Required(ErrorMessage = "Management Sphere required"), Singular.DataAnnotations.DropDownWeb(typeof(RO.ROManagementSphereList), ValueMember = "ManagementSphereID", DisplayMember = "ManagementSphere")]
		public int? ManagementSphereID
		{
			get { return GetProperty(ManagementSphereIDProperty); }
			set { SetProperty(ManagementSphereIDProperty, value); }
		}

		public static PropertyInfo<String> ManagementSphereProperty = RegisterProperty<String>(c => c.ManagementSphere, "Management Sphere Description", "");
		/// <summary>
		/// Gets and sets the Management Sphere value
		/// </summary>
		[Display(Name = "Management Sphere", Description = "Description of Management Sphere"), DisplayName("Management Sphere"),
		StringLength(100, ErrorMessage = "Management Sphere cannot be more than 100 characters")]
		public String ManagementSphere
		{
			get { return GetProperty(ManagementSphereProperty); }
			set { SetProperty(ManagementSphereProperty, value); }
		}

		//public static PropertyInfo<String> ManagementSphereContentProperty = RegisterProperty<String>(c => c.ManagementSphereContent, "Management Sphere Content Description", "");
		///// <summary>
		///// Gets and sets the Management Sphere Content value
		///// </summary>
		//[Display(Name = "Management Sphere Content", Description = "Description of Management Sphere Content"), DisplayName("Management Sphere Content"),
		//StringLength(100, ErrorMessage = "Management Sphere Content cannot be more than 100 characters")]
		//public String ManagementSphereContent
		//{
		//	get { return GetProperty(ManagementSphereContentProperty); }
		//	set { SetProperty(ManagementSphereContentProperty, value); }
		//}

		public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", true);
		/// <summary>
		/// Gets and sets the Is Active value
		/// </summary>
		[Display(Name = "Is Active", Description = "Indicate whether this Management Sphere is active for this question"),
		Required(ErrorMessage = "Is Active required")]
		public Boolean IsActiveInd
		{
			get { return GetProperty(IsActiveIndProperty); }
			set { SetProperty(IsActiveIndProperty, value); }
		}

		public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
		/// <summary>
		/// Gets the Created By value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int? CreatedBy
		{
			get { return GetProperty(CreatedByProperty); }
		}

		public static PropertyInfo<SmartDate> CreatedDateTimeProperty = RegisterProperty<SmartDate>(c => c.CreatedDateTime, "Created Date Time", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Created Date Time value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate CreatedDateTime
		{
			get { return GetProperty(CreatedDateTimeProperty); }
		}

		public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
		/// <summary>
		/// Gets the Modified By value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int? ModifiedBy
		{
			get { return GetProperty(ModifiedByProperty); }
		}

		public static PropertyInfo<SmartDate> ModifiedDateTimeProperty = RegisterProperty<SmartDate>(c => c.ModifiedDateTime, "Modified Date Time", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Modified Date Time value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate ModifiedDateTime
		{
			get { return GetProperty(ModifiedDateTimeProperty); }
		}

		#endregion

		#region " Methods "

		protected override object GetIdValue()
		{
			return GetProperty(QuestionnaireQuestionManagementSphereIDProperty);
		}

		public override string ToString()
		{
			if (this.CreatedDateTime.ToString().Length == 0)
			{
				if (this.IsNew)
				{
					return String.Format("New {0}", "Questionnaire Question Management Sphere");
				}
				else
				{
					return String.Format("Blank {0}", "Questionnaire Question Management Sphere");
				}
			}
			else
			{
				return this.CreatedDateTime.ToString();
			}
		}

		public MAQuestionnaireQuestion GetParent()
		{
			return (MAQuestionnaireQuestion)((QuestionnaireQuestionManagementSphereList)this.Parent).Parent;
		}

		#endregion

		#endregion

		#region " Validation Rules "

		protected override void AddBusinessRules()
		{
			base.AddBusinessRules();
		}

		#endregion

		#region " Data Access & Factory Methods "

		protected override void OnCreate()
		{
			// This is called when a new object is created
			// Set any variables here, not in the constructor or NewQuestionnaireQuestionManagementSphere() method.
		}

		public static QuestionnaireQuestionManagementSphere NewQuestionnaireQuestionManagementSphere()
		{
			return DataPortal.CreateChild<QuestionnaireQuestionManagementSphere>();
		}

		public QuestionnaireQuestionManagementSphere()
		{
			MarkAsChild();
		}

		internal static QuestionnaireQuestionManagementSphere GetQuestionnaireQuestionManagementSphere(SafeDataReader dr)
		{
			var q = new QuestionnaireQuestionManagementSphere();
			q.Fetch(dr);
			return q;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			using (BypassPropertyChecks)
			{
				int i = 0;
				LoadProperty(QuestionnaireQuestionManagementSphereIDProperty, sdr.GetInt32(i++));
				LoadProperty(QuestionnaireQuestionIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
				LoadProperty(ManagementSphereIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
				LoadProperty(ManagementSphereProperty, sdr.GetString(i++));
		//		LoadProperty(ManagementSphereContentProperty, sdr.GetString(i++));
				LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
				LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
				LoadProperty(CreatedDateTimeProperty, sdr.GetSmartDate(i++));
				LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
				LoadProperty(ModifiedDateTimeProperty, sdr.GetSmartDate(i++));
			}

			MarkAsChild();
			MarkOld();
			BusinessRules.CheckRules();
		}

		protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
		{
			LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

			AddPrimaryKeyParam(cm, QuestionnaireQuestionManagementSphereIDProperty);

			cm.Parameters.AddWithValue("@QuestionnaireQuestionID", this.GetParent().QuestionnaireQuestionID);
			cm.Parameters.AddWithValue("@ManagementSphereID", GetProperty(ManagementSphereIDProperty));
			cm.Parameters.AddWithValue("@IsActiveInd", GetProperty(IsActiveIndProperty));
			cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));

			return (scm) =>
			{
	// Post Save
	if (this.IsNew)
				{
					LoadProperty(QuestionnaireQuestionManagementSphereIDProperty, scm.Parameters["@QuestionnaireQuestionManagementSphereID"].Value);
				}
			};
		}

		protected override void SaveChildren()
		{
			// No Children
		}

		protected override void SetupDeleteCommand(SqlCommand cm)
		{
			cm.Parameters.AddWithValue("@QuestionnaireQuestionManagementSphereID", GetProperty(QuestionnaireQuestionManagementSphereIDProperty));
		}

		#endregion

	}

}