// Generated 05 Dec 2018 07:41 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace METTLib.Maintenance
{
	[Serializable]
	public class QuestionnaireQuestionLegalDesignation
	 : METTBusinessBase<QuestionnaireQuestionLegalDesignation>
	{
		#region " Properties and Methods "

		#region " Properties "

		public static PropertyInfo<int> QuestionnaireQuestionLegalDesignationIDProperty = RegisterProperty<int>(c => c.QuestionnaireQuestionLegalDesignationID, "ID", 0);
		/// <summary>
		/// Gets the ID value
		/// </summary>
		[Display(AutoGenerateField = false), Key]
		public int QuestionnaireQuestionLegalDesignationID
		{
			get { return GetProperty(QuestionnaireQuestionLegalDesignationIDProperty); }
		}

		public static PropertyInfo<int?> QuestionnaireQuestionIDProperty = RegisterProperty<int?>(c => c.QuestionnaireQuestionID, "Questionnaire Question", null);
		/// <summary>
		/// Gets and sets the Questionnaire Question value
		/// </summary>
		[Display(Name = "Questionnaire Question", Description = "Questionnaire ID")]//,
		//Required(ErrorMessage = "Questionnaire Question required")]
		public int? QuestionnaireQuestionID
		{
			get { return GetProperty(QuestionnaireQuestionIDProperty); }
			set { SetProperty(QuestionnaireQuestionIDProperty, value); }
		}

		//public static PropertyInfo<int?> LegalDesignationIDProperty = RegisterProperty<int?>(c => c.LegalDesignationID, "Legal Designation", null);
		///// <summary>
		///// Gets and sets the Legal Designation value
		///// </summary>
		//[Display(Name = "Legal Designation", Description = "Legal Designation at time of questionnaire"),
		//Required(ErrorMessage = "Legal Designation required")]
		//public int? LegalDesignationID
		//{
		//	get { return GetProperty(LegalDesignationIDProperty); }
		//	set { SetProperty(LegalDesignationIDProperty, value); }
		//}

		public static PropertyInfo<int?> LegalDesignationIDProperty = RegisterProperty<int?>(c => c.LegalDesignationID, "Legal Designation", null);
		/// <summary>
		/// Gets and sets the Legal Designation value
		/// </summary>
		[Display(Name = "Legal Designation", Description = "Legal Designation at time of questionnaire"),
		Required(ErrorMessage = "Legal Designation required"), Singular.DataAnnotations.DropDownWeb(typeof(RO.ROLegalDesignationList), ValueMember = "LegalDesignationID", DisplayMember = "LegalDesignation")]
		public int? LegalDesignationID
		{
			get { return GetProperty(LegalDesignationIDProperty); }
			set { SetProperty(LegalDesignationIDProperty, value); }
		}



		//public static PropertyInfo<String> LegalDesignationProperty = RegisterProperty<String>(c => c.LegalDesignation, "Legal Designation Description", "");
		///// <summary>
		///// Gets and sets the Nationalbiome value
		///// </summary>
		//[Display(Name = "Legal Designation", Description = "Description of Legal Designation"), DisplayName("Legal Designation"),
		//StringLength(100, ErrorMessage = "Legal Designation cannot be more than 100 characters")]
		//public String LegalDesignation
		//{
		//	get { return GetProperty(LegalDesignationProperty); }
		//	set { SetProperty(LegalDesignationProperty, value); }
		//}

		public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", true);
		/// <summary>
		/// Gets and sets the Is Active value
		/// </summary>
		[Display(Name = "Is Active", Description = "Indicate whether this LegalDestinationType is active"),
		Required(ErrorMessage = "Is Active required")]
		public Boolean IsActiveInd
		{
			get { return GetProperty(IsActiveIndProperty); }
			set { SetProperty(IsActiveIndProperty, value); }
		}

		public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
		/// <summary>
		/// Gets the Created By value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int? CreatedBy
		{
			get { return GetProperty(CreatedByProperty); }
		}

		public static PropertyInfo<SmartDate> CreatedDateTimeProperty = RegisterProperty<SmartDate>(c => c.CreatedDateTime, "Created Date Time", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Created Date Time value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate CreatedDateTime
		{
			get { return GetProperty(CreatedDateTimeProperty); }
		}

		public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
		/// <summary>
		/// Gets the Modified By value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public int? ModifiedBy
		{
			get { return GetProperty(ModifiedByProperty); }
		}

		public static PropertyInfo<SmartDate> ModifiedDateTimeProperty = RegisterProperty<SmartDate>(c => c.ModifiedDateTime, "Modified Date Time", new SmartDate(DateTime.Now));
		/// <summary>
		/// Gets the Modified Date Time value
		/// </summary>
		[Display(AutoGenerateField = false)]
		public SmartDate ModifiedDateTime
		{
			get { return GetProperty(ModifiedDateTimeProperty); }
		}

		#endregion

		#region " Methods "

		protected override object GetIdValue()
		{
			return GetProperty(QuestionnaireQuestionLegalDesignationIDProperty);
		}


		public MAQuestionnaireQuestion GetParent()
		{
			return (MAQuestionnaireQuestion)((QuestionnaireQuestionLegalDesignationList)this.Parent).Parent;
		}

		public override string ToString()
		{
			if (this.CreatedDateTime.ToString().Length == 0)
			{
				if (this.IsNew)
				{
					return String.Format("New {0}", "Questionnaire Question Legal Designation");
				}
				else
				{
					return String.Format("Blank {0}", "Questionnaire Question Legal Designation");
				}
			}
			else
			{
				return this.CreatedDateTime.ToString();
			}
		}

		#endregion

		#endregion

		#region " Validation Rules "

		protected override void AddBusinessRules()
		{
			base.AddBusinessRules();
		}

		#endregion

		#region " Data Access & Factory Methods "

		protected override void OnCreate()
		{
			// This is called when a new object is created
			// Set any variables here, not in the constructor or NewQuestionnaireQuestionLegalDesignation() method.
		}

		public static QuestionnaireQuestionLegalDesignation NewQuestionnaireQuestionLegalDesignation()
		{
			return DataPortal.CreateChild<QuestionnaireQuestionLegalDesignation>();
		}

		public QuestionnaireQuestionLegalDesignation()
		{
			MarkAsChild();
		}

		internal static QuestionnaireQuestionLegalDesignation GetQuestionnaireQuestionLegalDesignation(SafeDataReader dr)
		{
			var q = new QuestionnaireQuestionLegalDesignation();
			q.Fetch(dr);
			return q;
		}

		protected void Fetch(SafeDataReader sdr)
		{
			using (BypassPropertyChecks)
			{
				int i = 0;
				LoadProperty(QuestionnaireQuestionLegalDesignationIDProperty, sdr.GetInt32(i++));
				LoadProperty(QuestionnaireQuestionIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
				LoadProperty(LegalDesignationIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
			//	LoadProperty(LegalDesignationProperty, sdr.GetString(i++));
				LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
				LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
				LoadProperty(CreatedDateTimeProperty, sdr.GetSmartDate(i++));
				LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
				LoadProperty(ModifiedDateTimeProperty, sdr.GetSmartDate(i++));
			}

			MarkAsChild();
			MarkOld();
			BusinessRules.CheckRules();
		}

		protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
		{
			LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

			AddPrimaryKeyParam(cm, QuestionnaireQuestionLegalDesignationIDProperty);

			//cm.Parameters.AddWithValue("@QuestionnaireQuestionID", GetProperty(QuestionnaireQuestionIDProperty));
			cm.Parameters.AddWithValue("@QuestionnaireQuestionID",this.GetParent().QuestionnaireQuestionID);
			cm.Parameters.AddWithValue("@LegalDesignationID", GetProperty(LegalDesignationIDProperty));
			cm.Parameters.AddWithValue("@IsActiveInd", GetProperty(IsActiveIndProperty));
			cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));

			return (scm) =>
			{
	// Post Save
	if (this.IsNew)
				{
					LoadProperty(QuestionnaireQuestionLegalDesignationIDProperty, scm.Parameters["@QuestionnaireQuestionLegalDesignationID"].Value);
				}
			};
		}

		protected override void SaveChildren()
		{
			// No Children
		}

		protected override void SetupDeleteCommand(SqlCommand cm)
		{
			cm.Parameters.AddWithValue("@QuestionnaireQuestionLegalDesignationID", GetProperty(QuestionnaireQuestionLegalDesignationIDProperty));
		}

		#endregion

	}

}