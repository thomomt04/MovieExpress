// Generated 11 Jul 2018 13:38 - Singular Systems Object Generator Version 2.2.693
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace METTLib.Maintenance
{
	[Serializable]
	public class OrganisationRegionList
	 : METTBusinessListBase<OrganisationRegionList, OrganisationRegion>
	{
		#region " Business Methods "

		public OrganisationRegion GetItem(int OrganisationRegionID)
		{
			foreach (OrganisationRegion child in this)
			{
				if (child.OrganisationRegionID == OrganisationRegionID)
				{
					return child;
				}
			}
			return null;
		}

		public override string ToString()
		{
			return "Organisationregions";
		}

		#endregion

		#region " Data Access "

		[Serializable]
		public class Criteria
			: CriteriaBase<Criteria>
		{
			public int? OrganisationID { get; set; }

			public Criteria()
			{
				OrganisationID = null;
			}

		}

		public static OrganisationRegionList NewOrganisationRegionList()
		{
			return new OrganisationRegionList();
		}

		public OrganisationRegionList()
		{
			// must have parameter-less constructor
		}

		public static OrganisationRegionList GetOrganisationRegionList()
		{
			return DataPortal.Fetch<OrganisationRegionList>(new Criteria());
		}

		public static OrganisationRegionList GetOrganisationRegionList(int? OrganisationID)
		{
			return DataPortal.Fetch<OrganisationRegionList>(new Criteria { OrganisationID = OrganisationID });
		}

		protected void Fetch(SafeDataReader sdr)
		{
			this.RaiseListChangedEvents = false;
			while (sdr.Read())
			{
				this.Add(OrganisationRegion.GetOrganisationRegion(sdr));
			}
			this.RaiseListChangedEvents = true;
		}

		protected override void DataPortal_Fetch(Object criteria)
		{
			Criteria crit = (Criteria)criteria;
			using (SqlConnection cn = new SqlConnection(Singular.Settings.ConnectionString))
			{
				cn.Open();
				try
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "GetProcs.getOrganisationRegionList";
						cm.Parameters.AddWithValue("@OrganisationID", crit.OrganisationID);
						cm.Parameters.AddWithValue("@UserID", Singular.Security.Security.CurrentIdentity.UserID);
						using (SafeDataReader sdr = new SafeDataReader(cm.ExecuteReader()))
						{
							Fetch(sdr);
						}
					}
				}
				finally
				{
					cn.Close();
				}
			}
		}

		#endregion

	}

}