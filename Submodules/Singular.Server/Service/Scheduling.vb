' Singular Systems .js CodeGen Utility version 1.0.2.
' This code is generated by an automated tool. Edit the .js file this was generated from, not this file.
' Generated from C:\Clients\DTExpress\Singular.Server\Service\Scheduling.js at 07 Aug 2014 - 16:02:06.

Namespace JSCode

Public Class Scheduling

Public Const getScheduleInfo As String = "var s = self;" & vbCrLf &
"  var ret = """";" & vbCrLf &
"  if (s.Info()) {" & vbCrLf &
"    var obj = s.Info();" & vbCrLf &
"    //Occurs String" & vbCrLf &
"    switch (obj.OccursType()) {" & vbCrLf &
"      case ""0"":" & vbCrLf &
"        ret = ret.concat(""Every"");" & vbCrLf &
"        ret = ret.concat(obj.OccursDaily().DayInterval() == 1 ? """" : "" "");" & vbCrLf &
"        ret = ret.concat(obj.OccursDaily().DayInterval() == 1 ? """" : obj.OccursDaily().DayInterval());" & vbCrLf &
"        ret = ret.concat("" Day"");" & vbCrLf &
"        ret = ret.concat(obj.OccursDaily().DayInterval() > 1 ? ""s"" : """");" & vbCrLf &
"        break;" & vbCrLf &
"      case ""1"":" & vbCrLf &
"        ret = ret.concat(""Every"");" & vbCrLf &
"        ret = ret.concat(obj.OccursWeekly().WeekInterval() == 1 ? """" : "" "");" & vbCrLf &
"        ret = ret.concat(obj.OccursWeekly().WeekInterval() == 1 ? """" : obj.OccursWeekly().WeekInterval());" & vbCrLf &
"        ret = ret.concat("" Week"");" & vbCrLf &
"        ret = ret.concat(obj.OccursWeekly().WeekInterval() > 1 ? ""s"" : """");" & vbCrLf &
"        ret = ret.concat("" on "");" & vbCrLf &
"        if (obj.OccursWeekly().Monday() == true) {" & vbCrLf &
"          ret = ret.concat(""Monday, "");" & vbCrLf &
"        }" & vbCrLf &
"        if (obj.OccursWeekly().Tuesday() == true) {" & vbCrLf &
"          ret = ret.concat(""Tuesday, "");" & vbCrLf &
"        }" & vbCrLf &
"        if (obj.OccursWeekly().Wednesday() == true) {" & vbCrLf &
"          ret = ret.concat(""Wednesday, "");" & vbCrLf &
"        }" & vbCrLf &
"        if (obj.OccursWeekly().Thursday() == true) {" & vbCrLf &
"          ret = ret.concat(""Thursday, "");" & vbCrLf &
"        }" & vbCrLf &
"        if (obj.OccursWeekly().Friday() == true) {" & vbCrLf &
"          ret = ret.concat(""Friday, "");" & vbCrLf &
"        }" & vbCrLf &
"        if (obj.OccursWeekly().Saturday() == true) {" & vbCrLf &
"          ret = ret.concat(""Saturday, "");" & vbCrLf &
"        }" & vbCrLf &
"        if (obj.OccursWeekly().Sunday() == true) {" & vbCrLf &
"          ret = ret.concat(""Sunday, "");" & vbCrLf &
"        }" & vbCrLf &
"        break;" & vbCrLf &
"      case ""2"":" & vbCrLf &
"        switch (obj.OccursMonthlyType()) {" & vbCrLf &
"          case ""0"":" & vbCrLf &
"            ret = ret.concat(""on day "");" & vbCrLf &
"            ret = ret.concat(obj.OccursMonthlyDay().Day());" & vbCrLf &
"            ret = ret.concat("" of "");" & vbCrLf &
"            ret = ret.concat(obj.OccursMonthlyDay().MonthInterval() > 1 ? ""every "" : ""each"");" & vbCrLf &
"            ret = ret.concat(obj.OccursMonthlyDay().MonthInterval() > 1 ? Me.MonthInterval : """");" & vbCrLf &
"            ret = ret.concat("" Month"");" & vbCrLf &
"            ret = ret.concat(obj.OccursMonthlyDay().MonthInterval() > 1 ? ""s"" : """");" & vbCrLf &
"            break;" & vbCrLf &
"          case ""1"":" & vbCrLf &
"            ret.concat(""on the "");" & vbCrLf &
"            switch (obj.OccursMonthlyThe().TheDay()) {" & vbCrLf &
"              case ""1"": ret = ret.concat(""First "");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""2"": ret = ret.concat(""Second "");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""3"": ret = ret.concat(""Third "");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""4"": ret = ret.concat(""Fourth "");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""-1"": ret = ret.concat(""Last "");" & vbCrLf &
"                break;" & vbCrLf &
"            }" & vbCrLf &
"            break;" & vbCrLf &
"            switch (obj.OccursMonthlyThe().TheDayOfWeek()) {" & vbCrLf &
"              case ""0"": ret = ret.concat(""Monday"");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""1"": ret = ret.concat(""Tuesday"");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""2"": ret = ret.concat(""Wednesday"");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""3"": ret = ret.concat(""Thursday"");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""4"": ret = ret.concat(""Friday"");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""5"": ret = ret.concat(""Saturday"");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""6"": ret = ret.concat(""Sunday"");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""7"": ret = ret.concat(""Day"");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""8"": ret = ret.concat(""Week Day"");" & vbCrLf &
"                break;" & vbCrLf &
"              case ""9"": ret = ret.concat(""Weekend Day"");" & vbCrLf &
"                break;" & vbCrLf &
"            }" & vbCrLf &
"            ret = ret.concat("" of "");" & vbCrLf &
"            ret = ret.concat(obj.OccursMonthlyThe().MonthInterval() > 1 ? ""every "" : ""each"");" & vbCrLf &
"            ret = ret.concat(obj.OccursMonthlyThe().MonthInterval() > 1 ? Me.MonthInterval : """");" & vbCrLf &
"            ret = ret.concat("" Month"");" & vbCrLf &
"            ret = ret.concat(obj.OccursMonthlyThe().MonthInterval() > 1 ? ""s"" : """");" & vbCrLf &
"            break;" & vbCrLf &
"        }" & vbCrLf &
"    }" & vbCrLf &
"    //Daily Frequency String" & vbCrLf &
"    ret = ret.concat("" "");" & vbCrLf &
"    switch (obj.DailyFrequencyType()) {" & vbCrLf &
"      case ""0"":" & vbCrLf &
"        ret = ret.concat(""at "");" & vbCrLf &
"        ret = ret.concat((new Date(obj.DailyFrequencyOnce().AtTime())).toTimeString());" & vbCrLf &
"        break;" & vbCrLf &
"      case ""1"":" & vbCrLf &
"        ret = ret.concat(""every "");" & vbCrLf &
"        ret = ret.concat(obj.DailyFrequencyEvery().Unit());" & vbCrLf &
"        ret = ret.concat("" "");" & vbCrLf &
"        switch (obj.DailyFrequencyEvery().TimeMeasure()) {" & vbCrLf &
"          case ""1"": ret = ret.concat(""Hour"");" & vbCrLf &
"            break;" & vbCrLf &
"          case ""2"": ret = ret.concat(""Minute"");" & vbCrLf &
"            break;" & vbCrLf &
"          case ""3"": ret = ret.concat(""Second"");" & vbCrLf &
"            break;" & vbCrLf &
"        }" & vbCrLf &
"        ret = ret.concat(obj.DailyFrequencyEvery().Unit() > 1 ? ""s"" : """");" & vbCrLf &
"        ret = ret.concat("" from "");" & vbCrLf &
"        ret = ret.concat((new Date(obj.DailyFrequencyEvery().StartTime())).toTimeString());" & vbCrLf &
"        ret = ret.concat("" to "");" & vbCrLf &
"        ret = ret.concat((new Date(obj.DailyFrequencyEvery().EndTime())).toTimeString());" & vbCrLf &
"        break;" & vbCrLf &
"    }" & vbCrLf &
"    //Duration String" & vbCrLf &
"    ret = ret.concat("" "");" & vbCrLf &
"    ret = ret.concat(""Starting on "");" & vbCrLf &
"    ret = ret.concat((new Date(obj.Duration().StartDate())).toDateString());" & vbCrLf &
"    if (obj.Duration().HasEndDate() == true) {" & vbCrLf &
"      if (obj.Duration().EndDate()) {" & vbCrLf &
"        ret = ret.concat("" and ending on "");" & vbCrLf &
"        ret = ret.concat((new Date(obj.Duration().EndDate())).toDateString());" & vbCrLf &
"      }" & vbCrLf &
"    }" & vbCrLf &
"  }" & vbCrLf &
"  return ret;"

end class
end namespace
