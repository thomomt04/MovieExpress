' Generated 22 Dec 2014 13:51 - Singular Systems Object Generator Version 2.1.661
Imports Csla
Imports Csla.Serialization
Imports Csla.Data
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
#If SILVERLIGHT = False Then
Imports System.Data.SqlClient
#End If

Namespace Reporting.Dynamic

  <Serializable()> _
  Public Class ReportGroupList
    Inherits SingularBusinessListBase(Of ReportGroupList, ReportGroup)

#Region "  Business Methods  "

    Public Function GetItem(DynamicReportGroupID As Integer) As ReportGroup

      For Each child As ReportGroup In Me
        If child.DynamicReportGroupID = DynamicReportGroupID Then
          Return child
        End If
      Next
      Return Nothing

    End Function

    Public Overrides Function ToString() As String

      Return "Dynamic Report Groups"

    End Function

    Public Function GetReport(DynamicReportID As Integer) As Report

      Dim obj As Report = Nothing
      For Each parent As ReportGroup In Me
        obj = parent.ReportList.GetItem(DynamicReportID)
        If obj IsNot Nothing Then
          Return obj
        End If
      Next
      Return Nothing

    End Function

#End Region

#Region "  Data Access  "

    <Serializable()> _
    Public Class Criteria
      Inherits CriteriaBase(Of Criteria)

      Public Property IncludeParameters As Boolean
      Public Property DefaultGroupName As String

      Public Sub New()


      End Sub

    End Class

#Region "  Common  "

    Public Shared Function NewReportGroupList() As ReportGroupList

      Return New ReportGroupList()

    End Function

    Public Shared Sub BeginGetReportGroupList(CallBack As EventHandler(Of DataPortalResult(Of ReportGroupList)))

      Dim dp As New DataPortal(Of ReportGroupList)()
      AddHandler dp.FetchCompleted, CallBack
      dp.BeginFetch(New Criteria())

    End Sub

    Public Sub New()

      ' must have parameter-less constructor

    End Sub

#End Region

#Region "  Silverlight  "

#If SILVERLIGHT Then

#End Region

#Region " .NET Data Access "

#Else

#End Region

#Region "  .Net Data Access  "

    Public Shared Function GetReportGroupList(IncludeParameters As Boolean, Optional DefaultGroupName As String = Nothing) As ReportGroupList

      Return DataPortal.Fetch(Of ReportGroupList)(New Criteria() With {.IncludeParameters = IncludeParameters, .DefaultGroupName = DefaultGroupName})

    End Function

    Private Sub Fetch(sdr As SafeDataReader, DefaultGroupName As String)

      Me.RaiseListChangedEvents = False
      While sdr.Read
        Me.Add(ReportGroup.GetReportGroup(sdr))
      End While
      Me.RaiseListChangedEvents = True

      Dim parent As ReportGroup = Nothing
      If sdr.NextResult() Then
        While sdr.Read

          Dim GroupID As Integer = sdr.GetInt32(1)
          If GroupID = 0 Then
            'if the group id is missing, create a parent group.
            Dim GroupName As String = If(String.IsNullOrEmpty(DefaultGroupName), Report.GetGroupName(sdr.GetString(4)), DefaultGroupName)
            parent = Where(Function(c) c.GroupName = GroupName).FirstOrDefault
            If parent Is Nothing Then
              parent = ReportGroup.NewReportGroup(GroupName)
              parent.Auto = True
              Add(parent)
            End If
          ElseIf parent Is Nothing OrElse parent.DynamicReportGroupID <> sdr.GetInt32(1) Then
            parent = Me.GetItem(sdr.GetInt32(1))
          End If

          parent.ReportList.RaiseListChangedEvents = False
          parent.ReportList.Add(Report.GetReport(sdr))
          parent.ReportList.RaiseListChangedEvents = True
        End While
      End If

      Dim parentChild As Report = Nothing
      If sdr.NextResult() Then
        While sdr.Read
          If parentChild Is Nothing OrElse parentChild.DynamicReportID <> sdr.GetInt32(1) Then
            parentChild = Me.GetReport(sdr.GetInt32(1))
          End If
          parentChild.ReportParameterList.RaiseListChangedEvents = False
          parentChild.ReportParameterList.Add(ReportParameter.GetReportParameter(sdr, parentChild.AutoGeneratedInd))
          parentChild.ReportParameterList.RaiseListChangedEvents = True

        End While
      End If

    End Sub

    Protected Overrides Sub DataPortal_Fetch(criteria As Object)

      Dim crit As Criteria = criteria
      Using cn As New SqlConnection(Singular.Settings.ConnectionString)
        cn.Open()
        Try
          Using cm As SqlCommand = cn.CreateCommand
            cm.CommandType = CommandType.StoredProcedure
            cm.CommandText = "GetProcs.getDynamicReportGroupList"
            cm.Parameters.AddWithValue("@AutoSchema", Settings.DynamicReportsAutoSchema)
            cm.Parameters.AddWithValue("@IncludeParameters", crit.IncludeParameters)
            Using sdr As New SafeDataReader(cm.ExecuteReader)
              Fetch(sdr, crit.DefaultGroupName)
            End Using
          End Using
        Finally
          cn.Close()
        End Try
      End Using

    End Sub

    Friend Sub Update()

      Me.RaiseListChangedEvents = False
      Try
        ' Loop through each deleted child object and call its Update() method
        For Each Child As ReportGroup In DeletedList
          Child.DeleteSelf()
        Next

        ' Then clear the list of deleted objects because they are truly gone now.
        DeletedList.Clear()

        ' Loop through each non-deleted child object and call its Update() method
        For Each Child As ReportGroup In Me
          If Child.IsNew Then
            Child.Insert()
          Else
            Child.Update()
          End If
        Next
      Finally
        Me.RaiseListChangedEvents = True
      End Try

    End Sub

    Protected Overrides Sub DataPortal_Update()

      UpdateTransactional(AddressOf Update)

    End Sub

#End If

#End Region

#End Region

  End Class

End Namespace