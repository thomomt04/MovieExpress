Imports Csla
Imports Csla.Serialization
Imports Csla.Data
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
#If SILVERLIGHT Then
#Else
Imports System.Data.SqlClient
#End If

<Serializable()>
Public Class CmdInsSecurityRole
  Inherits Singular.CommandBase(Of CmdInsSecurityRole)

  Public Shared SecurityRoleIDProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(c) c.SecurityRoleID, "Security Group")
  ''' <Summary>
  ''' Gets and sets the Security Group value
  ''' </Summary>
  Public ReadOnly Property SecurityRoleID() As Integer
    Get
      Return ReadProperty(SecurityRoleIDProperty)
    End Get
  End Property

  Public Shared SectionProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(c) c.Section, "Security Group", "")
  ''' <Summary>
  ''' Gets and sets the Security Group value
  ''' </Summary>
  <Display(Name:="Security Group", Description:="The Name of the Group."),
  Required(ErrorMessage:="Security Group required"),
  StringLength(50, ErrorMessage:="Security Group cannot be more than 50 characters")> _
  Public Property Section() As String
    Get
      Return ReadProperty(SectionProperty)
    End Get
    Set(ByVal Value As String)
      LoadProperty(SectionProperty, Value)
    End Set
  End Property

  Public Shared RoleProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(c) c.Role, "Security Group", "")
  ''' <Summary>
  ''' Gets and sets the Security Group value
  ''' </Summary>
  <Display(Name:="Security Group", Description:="The Name of the Group."),
  Required(ErrorMessage:="Security Group required"),
  StringLength(50, ErrorMessage:="Security Group cannot be more than 50 characters")> _
  Public Property Role() As String
    Get
      Return ReadProperty(RoleProperty)
    End Get
    Set(ByVal Value As String)
      LoadProperty(RoleProperty, Value)
    End Set
  End Property

  Public Shared DescriptionProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(c) c.Description, "Security Group", "")
  ''' <Summary>
  ''' Gets and sets the Security Group value
  ''' </Summary>
  <Display(Name:="Security Group", Description:="The Name of the Group."),
  Required(ErrorMessage:="Security Group required"),
  StringLength(50, ErrorMessage:="Security Group cannot be more than 50 characters")> _
  Public Property Description() As String
    Get
      Return ReadProperty(DescriptionProperty)
    End Get
    Set(ByVal Value As String)
      LoadProperty(DescriptionProperty, Value)
    End Set
  End Property

  Public Shared Function NewCmdInsSecurityRole(Section As String, Role As String, Description As String) As CmdInsSecurityRole

    Return New CmdInsSecurityRole() With {.Section = Section, .Role = Role, .Description = Description}

  End Function

  Public Sub New()


  End Sub

#If SILVERLIGHT Then

  Public Sub BeginExecute(CallBack As EventHandler(Of DataPortalResult(Of CmdInsSecurityRole)))

    Dim dp As New DataPortal(Of CmdInsSecurityRole)
    AddHandler dp.ExecuteCompleted, CallBack
    dp.BeginExecute(Me)

  End Sub

#Else

  Protected Overrides Sub DataPortal_Execute()

    Using cn As New SqlConnection(Settings.ConnectionString)
      cn.Open()
      Try
        Using cm As SqlCommand = cn.CreateCommand
          cm.CommandType = CommandType.StoredProcedure
          cm.CommandText = "InsProcs.insSecurityRole"

          cm.Parameters.AddWithValue("@SecurityRoleID", Me.SecurityRoleID).Direction = ParameterDirection.InputOutput
          cm.Parameters.AddWithValue("@SectionName", Me.Section)
          cm.Parameters.AddWithValue("@SecurityRole", Me.Role)
          cm.Parameters.AddWithValue("@Description", Me.Description)
          cm.Parameters.AddWithValue("@AutoGeneratedInd", True)


          Try
            cm.ExecuteNonQuery()
          Catch ex As Exception
            ' try create the proc
            Try
              Using cm2 As SqlCommand = cn.CreateCommand
                cm2.CommandType = CommandType.Text
                Try
                  ' try change it to the right thing
                  cm2.CommandText = My.Resources.ALTER_InsSecurityRole
                  cm2.ExecuteNonQuery()
                Catch ex2 As Exception
                  ' if that didnt work try create it
                  cm2.CommandText = My.Resources.CREATE_InsSecurityRole
                  cm2.ExecuteNonQuery()
                End Try

                ' if we get here then hopefully everything worked out, try run the insproc again
                cm.ExecuteNonQuery()
              End Using
            Catch ex2 As Exception
              Throw ex2
            End Try
          End Try

          LoadProperty(SecurityRoleIDProperty, cm.Parameters("@SecurityRoleID").Value)
        End Using
      Finally
        cn.Close()
      End Try
    End Using

  End Sub

#End If

End Class
