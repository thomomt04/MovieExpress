'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by wsdl, Version=2.0.50727.42.
'

Namespace SmsSending

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code"), _
   System.Web.Services.WebServiceBindingAttribute(Name:="PushServerWSBinding", [Namespace]:="http://api.clickatell.com/soap/webservice")> _
  Partial Public Class PushServerWS
    Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

    Private authOperationCompleted As System.Threading.SendOrPostCallback

    Private pingOperationCompleted As System.Threading.SendOrPostCallback

    Private sendmsgOperationCompleted As System.Threading.SendOrPostCallback

    Private querymsgOperationCompleted As System.Threading.SendOrPostCallback

    Private delmsgOperationCompleted As System.Threading.SendOrPostCallback

    Private getbalanceOperationCompleted As System.Threading.SendOrPostCallback

    Private routeCoverageOperationCompleted As System.Threading.SendOrPostCallback

    Private si_pushOperationCompleted As System.Threading.SendOrPostCallback

    Private ind_pushOperationCompleted As System.Threading.SendOrPostCallback

    Private token_payOperationCompleted As System.Threading.SendOrPostCallback

    Private startbatchOperationCompleted As System.Threading.SendOrPostCallback

    Private senditemOperationCompleted As System.Threading.SendOrPostCallback

    Private quicksendOperationCompleted As System.Threading.SendOrPostCallback

    Private endbatchOperationCompleted As System.Threading.SendOrPostCallback

    Private getmsgchargeOperationCompleted As System.Threading.SendOrPostCallback

    '''<remarks/>
    Public Sub New()
      MyBase.New()
      Me.Url = "http://api.clickatell.com/soap/webservice.php"
    End Sub

    '''<remarks/>
    Public Event authCompleted As authCompletedEventHandler

    '''<remarks/>
    Public Event pingCompleted As pingCompletedEventHandler

    '''<remarks/>
    Public Event sendmsgCompleted As sendmsgCompletedEventHandler

    '''<remarks/>
    Public Event querymsgCompleted As querymsgCompletedEventHandler

    '''<remarks/>
    Public Event delmsgCompleted As delmsgCompletedEventHandler

    '''<remarks/>
    Public Event getbalanceCompleted As getbalanceCompletedEventHandler

    '''<remarks/>
    Public Event routeCoverageCompleted As routeCoverageCompletedEventHandler

    '''<remarks/>
    Public Event si_pushCompleted As si_pushCompletedEventHandler

    '''<remarks/>
    Public Event ind_pushCompleted As ind_pushCompletedEventHandler

    '''<remarks/>
    Public Event token_payCompleted As token_payCompletedEventHandler

    '''<remarks/>
    Public Event startbatchCompleted As startbatchCompletedEventHandler

    '''<remarks/>
    Public Event senditemCompleted As senditemCompletedEventHandler

    '''<remarks/>
    Public Event quicksendCompleted As quicksendCompletedEventHandler

    '''<remarks/>
    Public Event endbatchCompleted As endbatchCompletedEventHandler

    '''<remarks/>
    Public Event getmsgchargeCompleted As getmsgchargeCompletedEventHandler

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/auth", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function auth(ByVal api_id As Integer, ByVal user As String, ByVal password As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
      Dim results() As Object = Me.Invoke("auth", New Object() {api_id, user, password})
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Function Beginauth(ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("auth", New Object() {api_id, user, password}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Endauth(ByVal asyncResult As System.IAsyncResult) As String
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Overloads Sub authAsync(ByVal api_id As Integer, ByVal user As String, ByVal password As String)
      Me.authAsync(api_id, user, password, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub authAsync(ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal userState As Object)
      If (Me.authOperationCompleted Is Nothing) Then
        Me.authOperationCompleted = AddressOf Me.OnauthOperationCompleted
      End If
      Me.InvokeAsync("auth", New Object() {api_id, user, password}, Me.authOperationCompleted, userState)
    End Sub

    Private Sub OnauthOperationCompleted(ByVal arg As Object)
      If (Not (Me.authCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent authCompleted(Me, New authCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/ping", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function ping(ByVal session_id As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
      Dim results() As Object = Me.Invoke("ping", New Object() {session_id})
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Function Beginping(ByVal session_id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("ping", New Object() {session_id}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Endping(ByVal asyncResult As System.IAsyncResult) As String
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Overloads Sub pingAsync(ByVal session_id As String)
      Me.pingAsync(session_id, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub pingAsync(ByVal session_id As String, ByVal userState As Object)
      If (Me.pingOperationCompleted Is Nothing) Then
        Me.pingOperationCompleted = AddressOf Me.OnpingOperationCompleted
      End If
      Me.InvokeAsync("ping", New Object() {session_id}, Me.pingOperationCompleted, userState)
    End Sub

    Private Sub OnpingOperationCompleted(ByVal arg As Object)
      If (Not (Me.pingCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent pingCompleted(Me, New pingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/sendmsg", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function sendmsg( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal from As String, _
                ByVal text As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal [unicode] As Integer, _
                ByVal msg_type As String, _
                ByVal udh As String, _
                ByVal data As String, _
                ByVal validity As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("sendmsg", New Object() {session_id, api_id, user, password, [to], from, text, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, [unicode], msg_type, udh, data, validity})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Beginsendmsg( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal from As String, _
                ByVal text As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal [unicode] As Integer, _
                ByVal msg_type As String, _
                ByVal udh As String, _
                ByVal data As String, _
                ByVal validity As Integer, _
                ByVal callbackAs As System.AsyncCallback, _
                ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("sendmsg", New Object() {session_id, api_id, user, password, [to], from, text, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, [unicode], msg_type, udh, data, validity}, callbackAs, asyncState)
    End Function

    '''<remarks/>
    Public Function Endsendmsg(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub sendmsgAsync( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal from As String, _
                ByVal text As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal [unicode] As Integer, _
                ByVal msg_type As String, _
                ByVal udh As String, _
                ByVal data As String, _
                ByVal validity As Integer)
      Me.sendmsgAsync(session_id, api_id, user, password, [to], from, text, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, [unicode], msg_type, udh, data, validity, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub sendmsgAsync( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal from As String, _
                ByVal text As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal [unicode] As Integer, _
                ByVal msg_type As String, _
                ByVal udh As String, _
                ByVal data As String, _
                ByVal validity As Integer, _
                ByVal userState As Object)
      If (Me.sendmsgOperationCompleted Is Nothing) Then
        Me.sendmsgOperationCompleted = AddressOf Me.OnsendmsgOperationCompleted
      End If
      Me.InvokeAsync("sendmsg", New Object() {session_id, api_id, user, password, [to], from, text, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, [unicode], msg_type, udh, data, validity}, Me.sendmsgOperationCompleted, userState)
    End Sub

    Private Sub OnsendmsgOperationCompleted(ByVal arg As Object)
      If (Not (Me.sendmsgCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent sendmsgCompleted(Me, New sendmsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/querymsg", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function querymsg(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal climsgid As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("querymsg", New Object() {session_id, api_id, user, password, apimsgid, climsgid})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Beginquerymsg(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal climsgid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("querymsg", New Object() {session_id, api_id, user, password, apimsgid, climsgid}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Endquerymsg(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub querymsgAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal climsgid As String)
      Me.querymsgAsync(session_id, api_id, user, password, apimsgid, climsgid, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub querymsgAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal climsgid As String, ByVal userState As Object)
      If (Me.querymsgOperationCompleted Is Nothing) Then
        Me.querymsgOperationCompleted = AddressOf Me.OnquerymsgOperationCompleted
      End If
      Me.InvokeAsync("querymsg", New Object() {session_id, api_id, user, password, apimsgid, climsgid}, Me.querymsgOperationCompleted, userState)
    End Sub

    Private Sub OnquerymsgOperationCompleted(ByVal arg As Object)
      If (Not (Me.querymsgCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent querymsgCompleted(Me, New querymsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/delmsg", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function delmsg(ByVal session_id As String, ByVal api_id As String, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal climsgid As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("delmsg", New Object() {session_id, api_id, user, password, apimsgid, climsgid})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Begindelmsg(ByVal session_id As String, ByVal api_id As String, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal climsgid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("delmsg", New Object() {session_id, api_id, user, password, apimsgid, climsgid}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Enddelmsg(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub delmsgAsync(ByVal session_id As String, ByVal api_id As String, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal climsgid As String)
      Me.delmsgAsync(session_id, api_id, user, password, apimsgid, climsgid, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub delmsgAsync(ByVal session_id As String, ByVal api_id As String, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal climsgid As String, ByVal userState As Object)
      If (Me.delmsgOperationCompleted Is Nothing) Then
        Me.delmsgOperationCompleted = AddressOf Me.OndelmsgOperationCompleted
      End If
      Me.InvokeAsync("delmsg", New Object() {session_id, api_id, user, password, apimsgid, climsgid}, Me.delmsgOperationCompleted, userState)
    End Sub

    Private Sub OndelmsgOperationCompleted(ByVal arg As Object)
      If (Not (Me.delmsgCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent delmsgCompleted(Me, New delmsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/getbalance", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function getbalance(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
      Dim results() As Object = Me.Invoke("getbalance", New Object() {session_id, api_id, user, password})
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Function Begingetbalance(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("getbalance", New Object() {session_id, api_id, user, password}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Endgetbalance(ByVal asyncResult As System.IAsyncResult) As String
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Overloads Sub getbalanceAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String)
      Me.getbalanceAsync(session_id, api_id, user, password, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub getbalanceAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal userState As Object)
      If (Me.getbalanceOperationCompleted Is Nothing) Then
        Me.getbalanceOperationCompleted = AddressOf Me.OngetbalanceOperationCompleted
      End If
      Me.InvokeAsync("getbalance", New Object() {session_id, api_id, user, password}, Me.getbalanceOperationCompleted, userState)
    End Sub

    Private Sub OngetbalanceOperationCompleted(ByVal arg As Object)
      If (Not (Me.getbalanceCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent getbalanceCompleted(Me, New getbalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/routeCoverage", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function routeCoverage(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal msisdn As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
      Dim results() As Object = Me.Invoke("routeCoverage", New Object() {session_id, api_id, user, password, msisdn})
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Function BeginrouteCoverage(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal msisdn As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("routeCoverage", New Object() {session_id, api_id, user, password, msisdn}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function EndrouteCoverage(ByVal asyncResult As System.IAsyncResult) As String
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Overloads Sub routeCoverageAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal msisdn As String)
      Me.routeCoverageAsync(session_id, api_id, user, password, msisdn, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub routeCoverageAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal msisdn As String, ByVal userState As Object)
      If (Me.routeCoverageOperationCompleted Is Nothing) Then
        Me.routeCoverageOperationCompleted = AddressOf Me.OnrouteCoverageOperationCompleted
      End If
      Me.InvokeAsync("routeCoverage", New Object() {session_id, api_id, user, password, msisdn}, Me.routeCoverageOperationCompleted, userState)
    End Sub

    Private Sub OnrouteCoverageOperationCompleted(ByVal arg As Object)
      If (Not (Me.routeCoverageCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent routeCoverageCompleted(Me, New routeCoverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/si_push", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function si_push( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal si_id As String, _
                ByVal si_url As String, _
                ByVal si_text As String, _
                ByVal si_created As String, _
                ByVal si_expires As String, _
                ByVal si_action As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal validity As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("si_push", New Object() {session_id, api_id, user, password, [to], si_id, si_url, si_text, si_created, si_expires, si_action, from, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, validity})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Beginsi_push( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal si_id As String, _
                ByVal si_url As String, _
                ByVal si_text As String, _
                ByVal si_created As String, _
                ByVal si_expires As String, _
                ByVal si_action As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal validity As Integer, _
                ByVal callbackAs As System.AsyncCallback, _
                ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("si_push", New Object() {session_id, api_id, user, password, [to], si_id, si_url, si_text, si_created, si_expires, si_action, from, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, validity}, callbackAs, asyncState)
    End Function

    '''<remarks/>
    Public Function Endsi_push(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub si_pushAsync( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal si_id As String, _
                ByVal si_url As String, _
                ByVal si_text As String, _
                ByVal si_created As String, _
                ByVal si_expires As String, _
                ByVal si_action As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal validity As Integer)
      Me.si_pushAsync(session_id, api_id, user, password, [to], si_id, si_url, si_text, si_created, si_expires, si_action, from, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, validity, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub si_pushAsync( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal si_id As String, _
                ByVal si_url As String, _
                ByVal si_text As String, _
                ByVal si_created As String, _
                ByVal si_expires As String, _
                ByVal si_action As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal validity As Integer, _
                ByVal userState As Object)
      If (Me.si_pushOperationCompleted Is Nothing) Then
        Me.si_pushOperationCompleted = AddressOf Me.Onsi_pushOperationCompleted
      End If
      Me.InvokeAsync("si_push", New Object() {session_id, api_id, user, password, [to], si_id, si_url, si_text, si_created, si_expires, si_action, from, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, validity}, Me.si_pushOperationCompleted, userState)
    End Sub

    Private Sub Onsi_pushOperationCompleted(ByVal arg As Object)
      If (Not (Me.si_pushCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent si_pushCompleted(Me, New si_pushCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/ind_push", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function ind_push( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal mms_subject As String, _
                ByVal mms_class As String, _
                ByVal mms_expire As String, _
                ByVal mms_from As String, _
                ByVal mms_url As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal validity As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("ind_push", New Object() {session_id, api_id, user, password, [to], mms_subject, mms_class, mms_expire, mms_from, mms_url, from, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, validity})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Beginind_push( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal mms_subject As String, _
                ByVal mms_class As String, _
                ByVal mms_expire As String, _
                ByVal mms_from As String, _
                ByVal mms_url As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal validity As Integer, _
                ByVal callbackAs As System.AsyncCallback, _
                ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("ind_push", New Object() {session_id, api_id, user, password, [to], mms_subject, mms_class, mms_expire, mms_from, mms_url, from, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, validity}, callbackAs, asyncState)
    End Function

    '''<remarks/>
    Public Function Endind_push(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub ind_pushAsync( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal mms_subject As String, _
                ByVal mms_class As String, _
                ByVal mms_expire As String, _
                ByVal mms_from As String, _
                ByVal mms_url As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal validity As Integer)
      Me.ind_pushAsync(session_id, api_id, user, password, [to], mms_subject, mms_class, mms_expire, mms_from, mms_url, from, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, validity, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub ind_pushAsync( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal [to]() As String, _
                ByVal mms_subject As String, _
                ByVal mms_class As String, _
                ByVal mms_expire As String, _
                ByVal mms_from As String, _
                ByVal mms_url As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal validity As Integer, _
                ByVal userState As Object)
      If (Me.ind_pushOperationCompleted Is Nothing) Then
        Me.ind_pushOperationCompleted = AddressOf Me.Onind_pushOperationCompleted
      End If
      Me.InvokeAsync("ind_push", New Object() {session_id, api_id, user, password, [to], mms_subject, mms_class, mms_expire, mms_from, mms_url, from, concat, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, validity}, Me.ind_pushOperationCompleted, userState)
    End Sub

    Private Sub Onind_pushOperationCompleted(ByVal arg As Object)
      If (Not (Me.ind_pushCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent ind_pushCompleted(Me, New ind_pushCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/token_pay", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function token_pay(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal token As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
      Dim results() As Object = Me.Invoke("token_pay", New Object() {session_id, api_id, user, password, token})
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Function Begintoken_pay(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal token As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("token_pay", New Object() {session_id, api_id, user, password, token}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Endtoken_pay(ByVal asyncResult As System.IAsyncResult) As String
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String)
    End Function

    '''<remarks/>
    Public Overloads Sub token_payAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal token As String)
      Me.token_payAsync(session_id, api_id, user, password, token, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub token_payAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal token As String, ByVal userState As Object)
      If (Me.token_payOperationCompleted Is Nothing) Then
        Me.token_payOperationCompleted = AddressOf Me.Ontoken_payOperationCompleted
      End If
      Me.InvokeAsync("token_pay", New Object() {session_id, api_id, user, password, token}, Me.token_payOperationCompleted, userState)
    End Sub

    Private Sub Ontoken_payOperationCompleted(ByVal arg As Object)
      If (Not (Me.token_payCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent token_payCompleted(Me, New token_payCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/startbatch", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function startbatch( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal template As String, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal [unicode] As Integer, _
                ByVal msg_type As String, _
                ByVal udh As String, _
                ByVal data As String, _
                ByVal validity As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("startbatch", New Object() {session_id, api_id, user, password, from, concat, template, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, [unicode], msg_type, udh, data, validity})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Beginstartbatch( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal template As String, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal [unicode] As Integer, _
                ByVal msg_type As String, _
                ByVal udh As String, _
                ByVal data As String, _
                ByVal validity As Integer, _
                ByVal callbackAs As System.AsyncCallback, _
                ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("startbatch", New Object() {session_id, api_id, user, password, from, concat, template, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, [unicode], msg_type, udh, data, validity}, callbackAs, asyncState)
    End Function

    '''<remarks/>
    Public Function Endstartbatch(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub startbatchAsync( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal template As String, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal [unicode] As Integer, _
                ByVal msg_type As String, _
                ByVal udh As String, _
                ByVal data As String, _
                ByVal validity As Integer)
      Me.startbatchAsync(session_id, api_id, user, password, from, concat, template, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, [unicode], msg_type, udh, data, validity, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub startbatchAsync( _
                ByVal session_id As String, _
                ByVal api_id As Integer, _
                ByVal user As String, _
                ByVal password As String, _
                ByVal from As String, _
                ByVal concat As Integer, _
                ByVal template As String, _
                ByVal deliv_ack As Integer, _
                ByVal callback As Integer, _
                ByVal deliv_time As Integer, _
                ByVal max_credits As Single, _
                ByVal req_feat As Integer, _
                ByVal queue As Integer, _
                ByVal escalate As Integer, _
                ByVal mo As Integer, _
                ByVal cliMsgId As String, _
                ByVal [unicode] As Integer, _
                ByVal msg_type As String, _
                ByVal udh As String, _
                ByVal data As String, _
                ByVal validity As Integer, _
                ByVal userState As Object)
      If (Me.startbatchOperationCompleted Is Nothing) Then
        Me.startbatchOperationCompleted = AddressOf Me.OnstartbatchOperationCompleted
      End If
      Me.InvokeAsync("startbatch", New Object() {session_id, api_id, user, password, from, concat, template, deliv_ack, callback, deliv_time, max_credits, req_feat, queue, escalate, mo, cliMsgId, [unicode], msg_type, udh, data, validity}, Me.startbatchOperationCompleted, userState)
    End Sub

    Private Sub OnstartbatchOperationCompleted(ByVal arg As Object)
      If (Not (Me.startbatchCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent startbatchCompleted(Me, New startbatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/senditem", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function senditem(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal [to]() As String, ByVal field1 As String, ByVal field2 As String, ByVal field3 As String, ByVal field4 As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("senditem", New Object() {session_id, api_id, user, password, batch_id, [to], field1, field2, field3, field4})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Beginsenditem(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal [to]() As String, ByVal field1 As String, ByVal field2 As String, ByVal field3 As String, ByVal field4 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("senditem", New Object() {session_id, api_id, user, password, batch_id, [to], field1, field2, field3, field4}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Endsenditem(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub senditemAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal [to]() As String, ByVal field1 As String, ByVal field2 As String, ByVal field3 As String, ByVal field4 As String)
      Me.senditemAsync(session_id, api_id, user, password, batch_id, [to], field1, field2, field3, field4, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub senditemAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal [to]() As String, ByVal field1 As String, ByVal field2 As String, ByVal field3 As String, ByVal field4 As String, ByVal userState As Object)
      If (Me.senditemOperationCompleted Is Nothing) Then
        Me.senditemOperationCompleted = AddressOf Me.OnsenditemOperationCompleted
      End If
      Me.InvokeAsync("senditem", New Object() {session_id, api_id, user, password, batch_id, [to], field1, field2, field3, field4}, Me.senditemOperationCompleted, userState)
    End Sub

    Private Sub OnsenditemOperationCompleted(ByVal arg As Object)
      If (Not (Me.senditemCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent senditemCompleted(Me, New senditemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/quicksend", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function quicksend(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal [to]() As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("quicksend", New Object() {session_id, api_id, user, password, batch_id, [to]})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Beginquicksend(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal [to]() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("quicksend", New Object() {session_id, api_id, user, password, batch_id, [to]}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Endquicksend(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub quicksendAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal [to]() As String)
      Me.quicksendAsync(session_id, api_id, user, password, batch_id, [to], Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub quicksendAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal [to]() As String, ByVal userState As Object)
      If (Me.quicksendOperationCompleted Is Nothing) Then
        Me.quicksendOperationCompleted = AddressOf Me.OnquicksendOperationCompleted
      End If
      Me.InvokeAsync("quicksend", New Object() {session_id, api_id, user, password, batch_id, [to]}, Me.quicksendOperationCompleted, userState)
    End Sub

    Private Sub OnquicksendOperationCompleted(ByVal arg As Object)
      If (Not (Me.quicksendCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent quicksendCompleted(Me, New quicksendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/endbatch", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function endbatch(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("endbatch", New Object() {session_id, api_id, user, password, batch_id})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Beginendbatch(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("endbatch", New Object() {session_id, api_id, user, password, batch_id}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Endendbatch(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub endbatchAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String)
      Me.endbatchAsync(session_id, api_id, user, password, batch_id, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub endbatchAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal batch_id As String, ByVal userState As Object)
      If (Me.endbatchOperationCompleted Is Nothing) Then
        Me.endbatchOperationCompleted = AddressOf Me.OnendbatchOperationCompleted
      End If
      Me.InvokeAsync("endbatch", New Object() {session_id, api_id, user, password, batch_id}, Me.endbatchOperationCompleted, userState)
    End Sub

    Private Sub OnendbatchOperationCompleted(ByVal arg As Object)
      If (Not (Me.endbatchCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent endbatchCompleted(Me, New endbatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://api.clickatell.com/soap/webservice.php/getmsgcharge", RequestNamespace:="http://api.clickatell.com/soap/webservice", ResponseNamespace:="http://api.clickatell.com/soap/webservice")> _
    Public Function getmsgcharge(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal apimsgid As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
      Dim results() As Object = Me.Invoke("getmsgcharge", New Object() {session_id, api_id, user, password, apimsgid})
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Function Begingetmsgcharge(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
      Return Me.BeginInvoke("getmsgcharge", New Object() {session_id, api_id, user, password, apimsgid}, callback, asyncState)
    End Function

    '''<remarks/>
    Public Function Endgetmsgcharge(ByVal asyncResult As System.IAsyncResult) As String()
      Dim results() As Object = Me.EndInvoke(asyncResult)
      Return CType(results(0), String())
    End Function

    '''<remarks/>
    Public Overloads Sub getmsgchargeAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal apimsgid As String)
      Me.getmsgchargeAsync(session_id, api_id, user, password, apimsgid, Nothing)
    End Sub

    '''<remarks/>
    Public Overloads Sub getmsgchargeAsync(ByVal session_id As String, ByVal api_id As Integer, ByVal user As String, ByVal password As String, ByVal apimsgid As String, ByVal userState As Object)
      If (Me.getmsgchargeOperationCompleted Is Nothing) Then
        Me.getmsgchargeOperationCompleted = AddressOf Me.OngetmsgchargeOperationCompleted
      End If
      Me.InvokeAsync("getmsgcharge", New Object() {session_id, api_id, user, password, apimsgid}, Me.getmsgchargeOperationCompleted, userState)
    End Sub

    Private Sub OngetmsgchargeOperationCompleted(ByVal arg As Object)
      If (Not (Me.getmsgchargeCompletedEvent) Is Nothing) Then
        Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
        RaiseEvent getmsgchargeCompleted(Me, New getmsgchargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
      End If
    End Sub

    '''<remarks/>
    Public Shadows Sub CancelAsync(ByVal userState As Object)
      MyBase.CancelAsync(userState)
    End Sub
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub authCompletedEventHandler(ByVal sender As Object, ByVal e As authCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class authCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String)
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub pingCompletedEventHandler(ByVal sender As Object, ByVal e As pingCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class pingCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String)
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub sendmsgCompletedEventHandler(ByVal sender As Object, ByVal e As sendmsgCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class sendmsgCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub querymsgCompletedEventHandler(ByVal sender As Object, ByVal e As querymsgCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class querymsgCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub delmsgCompletedEventHandler(ByVal sender As Object, ByVal e As delmsgCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class delmsgCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub getbalanceCompletedEventHandler(ByVal sender As Object, ByVal e As getbalanceCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class getbalanceCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String)
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub routeCoverageCompletedEventHandler(ByVal sender As Object, ByVal e As routeCoverageCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class routeCoverageCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String)
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub si_pushCompletedEventHandler(ByVal sender As Object, ByVal e As si_pushCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class si_pushCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub ind_pushCompletedEventHandler(ByVal sender As Object, ByVal e As ind_pushCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class ind_pushCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub token_payCompletedEventHandler(ByVal sender As Object, ByVal e As token_payCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class token_payCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String)
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub startbatchCompletedEventHandler(ByVal sender As Object, ByVal e As startbatchCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class startbatchCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub senditemCompletedEventHandler(ByVal sender As Object, ByVal e As senditemCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class senditemCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub quicksendCompletedEventHandler(ByVal sender As Object, ByVal e As quicksendCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class quicksendCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub endbatchCompletedEventHandler(ByVal sender As Object, ByVal e As endbatchCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class endbatchCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")> _
  Public Delegate Sub getmsgchargeCompletedEventHandler(ByVal sender As Object, ByVal e As getmsgchargeCompletedEventArgs)

  '''<remarks/>
  <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42"), _
   System.Diagnostics.DebuggerStepThroughAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code")> _
  Partial Public Class getmsgchargeCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs

    Private results() As Object

    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
      MyBase.New(exception, cancelled, userState)
      Me.results = results
    End Sub

    '''<remarks/>
    Public ReadOnly Property Result() As String()
      Get
        Me.RaiseExceptionIfNecessary()
        Return CType(Me.results(0), String())
      End Get
    End Property
  End Class


End Namespace